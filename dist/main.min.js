var He = Object.defineProperty;
var Re = (i, t, e) => t in i ? He(i, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : i[t] = e;
var r = (i, t, e) => (Re(i, typeof t != "symbol" ? t + "" : t, e), e), Pt = (i, t, e) => {
  if (!t.has(i))
    throw TypeError("Cannot " + e);
};
var s = (i, t, e) => (Pt(i, t, "read from private field"), e ? e.call(i) : t.get(i)), n = (i, t, e) => {
  if (t.has(i))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(i) : t.set(i, e);
}, l = (i, t, e, o) => (Pt(i, t, "write to private field"), o ? o.call(i, e) : t.set(i, e), e);
const Vt = {
  onDragStart: null,
  onDragging: null,
  onDragEnd: null
};
function Ae(i, t = {}) {
  t = {
    ...Vt,
    ...t
  };
  const e = () => {
    const w = [...i.parentNode.children].indexOf(i);
    i.draggable = !0, i.ondragstart = (h) => {
      h.dataTransfer.effectAllowed = "move", h.dataTransfer.dropEffect = "move", h.dataTransfer.setData(
        "text/plain",
        w.toString()
      ), t.onDragStart && t.onDragStart(w);
    }, i.ondragover = (h) => (h.preventDefault(), !1), i.ondragenter = (h) => {
      h.preventDefault(), t.onDragging && t.onDragging(w);
    }, i.ondrop = (h) => {
      h.preventDefault(), h.dataTransfer.dropEffect = "move";
      const Te = parseInt(
        h.dataTransfer.getData("text/plain"),
        10
      );
      t.onDragEnd && t.onDragEnd(Te, w);
    };
  }, o = () => {
    i.draggable = !1, i.ondragstart = null, i.ondragover = null, i.ondragenter = null, i.ondrop = null;
  };
  return e(), {
    /**
     * @param {DraggableOptions} _options
     */
    update(a) {
      t = {
        ...Vt,
        ...a
      }, o(), e();
    },
    destroy: o
  };
}
const $e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: Ae
}, Symbol.toStringTag, { value: "Module" }));
var d;
class Y {
  constructor() {
    /**
     * @type {any}
     */
    n(this, d, {});
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   */
  dispatchWithData(t, e) {
    if (e === void 0)
      throw "data is undefined!";
    if (s(this, d)[t])
      for (const o of s(this, d)[t])
        o(e);
    return this;
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  addListener(t, e) {
    if (typeof e != "function")
      throw `invalid event listener passed for "${t.toString()}" event!`;
    return s(this, d)[t] || (s(this, d)[t] = []), s(this, d)[t].push(e), () => {
      this.removeListener(t, e);
    };
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>)} listener
   */
  removeListener(t, e) {
    if (!s(this, d)[t])
      throw `no listeners found for ${t.toString()}, there is nothing to delete`;
    let o = !1, a = 0;
    for (const w of s(this, d)[t])
      w === e && (s(this, d)[t].splice(a, 1), o = !0), a++;
    if (!o)
      throw `listener not found for ${t.toString()}, there is nothing to delete`;
    return this;
  }
}
d = new WeakMap();
const je = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Events: Y
}, Symbol.toStringTag, { value: "Module" })), Ie = {
  color: "currentColor",
  opacity: 0.2,
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out"
};
function ie(i, t) {
  t = { ...Ie, ...t };
  const e = document.createElement("div");
  e.classList.add("ripple"), e.style.position = "absolute", e.style.color = "inherit", e.style.borderRadius = "50%", e.style.pointerEvents = "none", e.style.width = "100px", e.style.height = "100px", e.style.marginTop = "-50px", e.style.marginLeft = "-50px", e.style.opacity = `${t.opacity}`, e.style.backgroundColor = t.color, e.style.transform = "scale(0) translate(0, 0)", e.style.transition = `transform ${t.spreadDuration} ${t.spreadTiming} 0s,opacity ${t.clearDuration} ${t.clearTiming} 0s`, i.currentTarget.appendChild(e);
  const o = i.currentTarget.getBoundingClientRect();
  t.centered ? (e.style.top = `${o.height / 2}px`, e.style.left = `${o.width / 2}px`) : (e.style.top = `${i.clientY - o.top}px`, e.style.left = `${i.clientX - o.left}px`);
  const a = Math.max(o.width, o.height) * 0.02;
  return e.style.transform = `scale(${a}) translate(0, 0)`, e;
}
function oe(i) {
  i && (i.addEventListener("transitionend", (t) => {
    t.propertyName === "opacity" && i.remove();
  }), i.style.opacity = "0");
}
function $t(i, t = {}) {
  let e;
  const o = (w) => {
    e = ie(w, t);
  }, a = () => {
    oe(e);
  };
  return i.classList.add("ripple-container"), i.style.overflow = "hidden", i.addEventListener("pointerdown", o), i.addEventListener("pointerup", a), i.addEventListener("pointerleave", a), () => {
    i.classList.remove("ripple-container"), i.removeEventListener("pointerdown", o), i.removeEventListener("pointerup", a), i.removeEventListener("pointerleave", a);
  };
}
const Ne = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: $t,
  start: ie,
  stop: oe
}, Symbol.toStringTag, { value: "Module" }));
function ze() {
  return /(android)/i.test(navigator.userAgent);
}
const Ue = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isAndroid: ze
}, Symbol.toStringTag, { value: "Module" })), qe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  draggable: $e,
  events: je,
  ripple: Ne,
  utils: Ue
}, Symbol.toStringTag, { value: "Module" })), re = document.createElement("template");
re.innerHTML = `
<style>
    :host {
        display: flex;
        position: absolute;
        z-index: 100;
        background-color: hsla(var(--bg), .2);
        backdrop-filter: blur(5px);
        overflow: hidden;
        user-select: none;
    }

    :host([position="top"]) {
        top: 0;
        left: 0;
        width: 100%;
        height: var(--app-bar-height);
        border-bottom: var(--border-width) var(--border-style) hsl(var(--border));
    }

    :host > ui-flex-grid-row {
        width: 100%;
        height: 100%;
        align-items: center;
        justify-content: space-between;
    }

    :host > ui-flex-grid-row > * {
        height: 100%;
    }

    :host > ui-flex-grid-row > *:nth-child(1),
    :host > ui-flex-grid-row > *:nth-child(3) {
        width: fit-content;
    }

    :host > ui-flex-grid-row > [slot="left"] {
        margin-left: 0 !important;
    }

    :host > ui-flex-grid-row > [slot="center"] {
        width: 100%;
    }

    :host > ui-flex-grid-row > [slot="right"] {
        margin-right: 0 !important;
        justify-content: flex-end;
    }
</style>

<ui-flex-grid-row gap="0.25rem">
    <ui-flex-grid-row gap="0.25rem">
        <slot name="left"></slot>
    </ui-flex-grid-row>

    <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
        <slot name="center"></slot>
    </ui-flex-grid-row>

    <ui-flex-grid-row gap="0.25rem">
        <slot name="right"></slot>
    </ui-flex-grid-row>
</ui-flex-grid-row>
`;
var L, Bt;
let Oe = (Bt = class {
  /** @param {AppBar} root */
  constructor(t) {
    /** @type {AppBar} */
    n(this, L, void 0);
    l(this, L, t);
  }
  getLeftSlot() {
    return [...s(this, L).querySelectorAll('[slot="left"]')];
  }
  getCenterSlot() {
    return [...s(this, L).querySelectorAll('[slot="center"]')];
  }
  getRightSlot() {
    return [...s(this, L).querySelectorAll('[slot="right"]')];
  }
}, L = new WeakMap(), Bt);
const pt = class pt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(re.content.cloneNode(!0)), this.ui = new Oe(this);
  }
};
r(pt, "register", () => customElements.define("ui-app-bar", pt));
let K = pt;
const ne = document.createElement("template");
ne.innerHTML = `
<style>
    :host {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        padding: var(--spacing) calc(var(--spacing) * 2.5);
        border: var(--border-width) var(--border-style) currentColor;
        border-radius: var(--radius);
        overflow: hidden;
        text-transform: capitalize;
        cursor: pointer;
        outline: none;
        user-select: none;
    }

    :host([variant="full"]) {
        border: none;
    }

    :host([variant="full"][color="primary"]) {
        background-color: hsl(var(--primary));
        color: hsl(var(--primary-fg));
    }

    :host([variant="full"][color="secondary"]) {
        background-color: hsl(var(--secondary));
        color: hsl(var(--secondary-fg));
    }

    :host([variant="full"][color="destructive"]) {
        background-color: hsl(var(--destructive));
        color: hsl(var(--destructive-fg));
    }

    :host([variant="outline"]) {
        border-color: currentColor;
        background-color: transparent;
    }

    :host([variant="outline"][color="primary"]) {
        color: hsl(var(--primary));
    }

    :host([variant="outline"][color="secondary"]) {
        color: hsl(var(--secondary));
    }

    :host([variant="outline"][color="destructive"]) {
        color: hsl(var(--destructive));
    }

    :host([variant="ghost"]) {
        border-color: transparent;
        background-color: transparent;
    }

    :host([variant="ghost"][color="primary"]) {
        color: hsl(var(--primary));
    }

    :host([variant="ghost"][color="secondary"]) {
        color: hsl(var(--secondary));
    }

    :host([variant="ghost"][color="destructive"]) {
        color: hsl(var(--destructive));
    }

    :host(:disabled),
    :host(:disabled:hover),
    :host(:disabled:active) {
        background-color: transparent;
        opacity: 0.25;
        cursor: default;
    }
</style>

<slot></slot>
`;
var O, Xt;
let De = (Xt = class {
  /** @param {Button} root */
  constructor(t) {
    /** @type {Button} */
    n(this, O, void 0);
    l(this, O, t), this.removeRipple = null;
  }
  enableRipple() {
    this.removeRipple || (this.removeRipple = $t(s(this, O), { centered: !0 }));
  }
  disableRipple() {
    this.removeRipple && this.removeRipple(), this.removeRipple = null;
  }
}, O = new WeakMap(), Xt);
const R = class R extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ne.content.cloneNode(!0)), this.ui = new De(this);
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "no-ripple":
        o !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
    }
  }
};
r(R, "register", () => customElements.define("ui-button", R)), r(R, "observedAttributes", ["no-ripple"]);
let Q = R;
const ae = document.createElement("template");
ae.innerHTML = `
<style>
    :host {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        width: 2rem;
        height: 2rem;
        padding: calc(var(--spacing) / 2);
        border: var(--border-width) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);
        outline: none;
        overflow: hidden;
        cursor: pointer;
        user-select: none;
    }

    :host([ghost]) {
        border-color: transparent !important;
        box-shadow: none;
    }

    :host([color="primary"]) {
        color: hsl(var(--primary));
        border-color: hsl(var(--primary));
    }

    :host([color="secondary"]) {
        color: hsl(var(--secondary));
        border-color: hsl(var(--secondary));
    }

    :host([color="destructive"]) {
        color: hsl(var(--destructive));
        border-color: hsl(var(--destructive));
    }

    /* :disabled */

    :host(:disabled),
    :host(:disabled:hover),
    :host(:disabled:active) {
        opacity: 0.25;
        cursor: default;
    }
</style>

<slot></slot>
`;
var D, Yt;
let Pe = (Yt = class {
  /** @param {IconButton} root */
  constructor(t) {
    /** @type {IconButton} */
    n(this, D, void 0);
    l(this, D, t), this.removeRipple = null;
  }
  enableRipple() {
    this.removeRipple || (this.removeRipple = $t(s(this, D), { centered: !0 }));
  }
  disableRipple() {
    this.removeRipple && this.removeRipple(), this.removeRipple = null;
  }
}, D = new WeakMap(), Yt);
const A = class A extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ae.content.cloneNode(!0)), this.ui = new Pe(this);
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "no-ripple":
        o !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
    }
  }
};
r(A, "register", () => customElements.define("ui-icon-button", A)), r(A, "observedAttributes", ["no-ripple"]);
let G = A;
const le = document.createElement("template");
le.innerHTML = `
<style>
    :host {
        display: block;
        width: 100%;
        max-width: 65rem;
        margin: 0 auto !important;
        padding: var(--spacing);
    }
</style>

<slot></slot>
`;
const gt = class gt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(le.content.cloneNode(!0));
  }
};
r(gt, "register", () => customElements.define("ui-container", gt));
let F = gt;
const ce = document.createElement("template");
ce.innerHTML = `
<style>
    :host dialog * {
        box-sizing: border-box;
    }

    dialog {
        --header-height: 2.5rem;
        --footer-height: 3rem;

        position: fixed;

        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);

        max-width: 100%;
        max-height: 100%;

        margin: 0 !important;
        padding: 0;

        border: none;
        outline: none;

        background-color: transparent;

        -ms-overflow-style: none;
        scrollbar-width: none;

        z-index: 999;
    }

    dialog::-webkit-scrollbar {
        display: none;
    }

    dialog::backdrop {
        background-color: hsl(0, 0%, 0%, 0.4);
        backdrop-filter: blur(5px);
    }

    dialog > article {
        background-color: hsl(var(--bg));
        color: hsl(var(--fg));

        border: var(--border-width) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);

        padding: 0;

        display: flex;
        flex-direction: column;
        justify-content: space-between;

        position: relative;
    }

    :host([fullscreen]) dialog {
        width: 100%;
        height: 100%;
    }

    :host([fullscreen]) dialog > article {
        width: calc(100% - var(--spacing) * 2);
        height: calc(100% - (env(safe-area-inset-top, 0) + env(safe-area-inset-bottom, 0) + (var(--spacing) * 2)));

        margin: var(--spacing) !important;
        margin-top: calc(env(safe-area-inset-top, 0) + var(--spacing)) !important;
        margin-bottom: calc(env(safe-area-inset-bottom, 0) + var(--spacing)) !important;
    }

    /*
     * Header Styles
     */
  
    header {
        display: flex;
        align-items: center;
        justify-content: space-between;

        padding: calc(var(--spacing) / 2);
        padding-left: var(--spacing);

        border-top-right-radius: var(--radius);
        border-top-left-radius: var(--radius);

        width: 100%;
        height: var(--header-height);
    }

    header h4 {
        margin: auto 0 !important;
    }

    :host([fullscreen]) header {
        z-index: 15;
        position: absolute;
        top: 0;
        left: 0;
    }

    /*
     * Content Styles
     */

    .content {
        padding-left: var(--spacing);
        padding-right: var(--spacing);
        height: fit-content;
    }

    :host([fullscreen]) .content {
        z-index: 10;
        position: relative;
        width: 100%;
        height: 100%;
        padding-top: calc(var(--header-height) + var(--spacing));
        padding-bottom: calc(var(--footer-height) + var(--spacing));
    }

    /*
     * Footer Styles
     */

    footer {
        padding: var(--spacing);
        margin-top: var(--spacing) !important;
        border-bottom-right-radius: var(--radius);
        border-bottom-left-radius: var(--radius);

        width: 100%;
        height: var(--footer-height);
    }

    :host([fullscreen]) footer {
        z-index: 15;
        position: absolute;
        bottom: 0;
        left: 0;
    }

    footer ui-flex-grid-row {
        height: 100%;
        flex-wrap: nowrap;
        justify-content: flex-end;
        align-items: center;
    }
</style>

<dialog>
	<article>
        <header>
            <span><slot name="title"></slot></span>

            <ui-icon-button ghost>
                <ui-svg-close></ui-svg-close>
            </ui-icon-button>
        </header>

        <section class="content">
            <slot></slot>
        </section>

        <footer>
            <ui-flex-grid-row gap="calc(var(--spacing) / 2)">
                <slot name="actions"></slot>
            </ui-flex-grid-row>
        </footer>
	</article>
</dialog>
`;
var b, y, x, Kt;
let Ve = (Kt = class {
  /**
   * @param {Dialog} root
   * @param {HTMLDialogElement} dialog
   */
  constructor(t, e) {
    /** @type {Dialog} */
    n(this, b, void 0);
    /** @type {HTMLDialogElement} */
    n(this, y, void 0);
    /** @type {HTMLElement} */
    n(this, x, void 0);
    l(this, b, t), l(this, y, e), this.events = new Y(), l(this, x, document.createElement("h4")), s(this, x).slot = "title", s(this, b).appendChild(s(this, x));
  }
  get dialog() {
    return s(this, y);
  }
  open(t = !1) {
    t ? s(this, y).showModal() : s(this, y).show();
  }
  close() {
    s(this, y).close();
  }
  get fullscreen() {
    return s(this, b).hasAttribute("fullscreen");
  }
  set fullscreen(t) {
    t ? s(this, b).setAttribute("fullscreen", "") : s(this, b).removeAttribute("fullscreen");
  }
  get title() {
    return s(this, x).innerText;
  }
  set title(t) {
    s(this, x).innerText = t;
  }
}, b = new WeakMap(), y = new WeakMap(), x = new WeakMap(), Kt);
var P, V;
const mt = class mt extends HTMLElement {
  constructor() {
    super();
    n(this, P, () => this.ui.events.dispatchWithData("close", null));
    n(this, V, () => this.ui.close());
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ce.content.cloneNode(!0)), this.ui = new Ve(this, this.shadowRoot.querySelector("dialog"));
  }
  connectedCallback() {
    const e = this.shadowRoot.querySelector("header ui-icon-button");
    e.addEventListener("click", s(this, V)), e.addEventListener("click", s(this, P));
  }
  disconnectedCallback() {
    const e = this.shadowRoot.querySelector("header ui-icon-button");
    e.removeEventListener("click", s(this, V)), e.removeEventListener("click", s(this, P));
  }
};
P = new WeakMap(), V = new WeakMap(), r(mt, "register", () => customElements.define("ui-dialog", mt));
let _ = mt;
const Zt = "1", he = document.createElement("template");
he.innerHTML = `
<style></style>
<slot></slot>
`;
const $ = class $ extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(he.content.cloneNode(!0)), this._updateStyle();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "flex":
        this._updateStyle({ flex: o || Zt });
        break;
    }
  }
  /**
   * @param {Object} attributes
   * @param {string} [attributes.flex]
   */
  _updateStyle({ flex: t = Zt } = {}) {
    this.shadowRoot.querySelector("style").textContent = `
            :host {
                flex: ${t};
            }
        `;
  }
};
r($, "register", () => customElements.define("ui-flex-grid-item", $)), r($, "observedAttributes", ["flex"]);
let tt = $;
const Wt = "0", de = document.createElement("template");
de.innerHTML = `
<style></style>
<slot></slot>
`;
const j = class j extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(de.content.cloneNode(!0)), this._updateStyle();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "gap":
        this._updateStyle({ gap: o || Wt });
        break;
    }
  }
  /**
   * @param {Object} attributes
   * @param {string} [attributes.gap]
   */
  _updateStyle({ gap: t = Wt } = {}) {
    this.shadowRoot.querySelector("style").textContent = `
            :host {
                display: flex;
                flex-flow: row nowrap;
                position: relative;
                width: 100%;
            }

            :host ::slotted(ui-flex-grid-item) {
                margin: 0 ${t} !important;
            }

            :host ::slotted(ui-flex-grid-item:first-child) {
                margin-left: 0 !important;
            }

            :host ::slotted(ui-flex-grid-item:last-child) {
                margin-right: 0 !important;
            }
        `;
  }
};
r(j, "register", () => customElements.define("ui-flex-grid-row", j)), r(j, "observedAttributes", ["gap"]);
let et = j;
const Jt = "0", ue = document.createElement("template");
ue.innerHTML = `
<style></style>
<slot></slot>
`;
const I = class I extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ue.content.cloneNode(!0)), this._updateStyle();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "gap":
        this._updateStyle({ gap: o || Jt });
        break;
    }
  }
  /**
   * @param {Object} attributes
   * @param {string} [attributes.gap]
   */
  _updateStyle({ gap: t = Jt } = {}) {
    this.shadowRoot.querySelector("style").textContent = `
            :host {
                display: flex;
                flex-flow: column nowrap;
                position: relative;
                width: 100%;
                height: fit-content;
            }

            :host ::slotted(ui-flex-grid-row) {
                margin: ${t} 0 !important;
            }

            :host ::slotted(ui-flex-grid-row:first-child) {
                margin-top: 0 !important;
            }

            :host ::slotted(ui-flex-grid-row:last-child) {
                margin-bottom: 0 !important;
            }
        `;
  }
};
r(I, "register", () => customElements.define("ui-flex-grid", I)), r(I, "observedAttributes", ["gap"]);
let st = I;
const pe = document.createElement("template");
pe.innerHTML = `
<style>
    :host {
        display: none;
        padding: var(--spacing);
        padding-right: 2rem;
        transition: background-color 0.25s linear;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        height: calc(1em * var(--line-height) + var(--spacing) * 2);
        align-items: center;
    }
</style>

<slot></slot>
`;
var m, Qt;
let Ze = (Qt = class {
  /** @param {SelectOption} root */
  constructor(t) {
    /** @type {SelectOption} */
    n(this, m, void 0);
    l(this, m, t);
  }
  get value() {
    return s(this, m).getAttribute("value");
  }
  set value(t) {
    s(this, m).setAttribute("value", t);
  }
  get selected() {
    return s(this, m).hasAttribute("selected");
  }
  set selected(t) {
    t ? s(this, m).setAttribute("selected", "") : s(this, m).removeAttribute("selected");
  }
}, m = new WeakMap(), Qt);
const ft = class ft extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(pe.content.cloneNode(!0)), this.ui = new Ze(this);
  }
};
r(ft, "register", () => customElements.define("ui-select-option", ft));
let q = ft;
const ge = document.createElement("template");
ge.innerHTML = `
<style>
    * {
        box-sizing: border-box;
    }

    :host {
        --items-length: 0;
        position: relative; 
        display: block;
        width: 100%;
        height: calc(1em * var(--line-height) + var(--spacing) * 2);
        border: var(--border-width) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);
        transition: height 0.25s ease;
        line-height: 1.15;
        overflow: hidden;
    }

    .options {
        cursor: pointer;
        display: none;
        display: flex;
        flex-direction: column;
        min-height: 100%;
    }

    .icon {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 0;
        right: 0;
        width: 2.5rem;
        height: 100%;
        color: hsl(var(--primary));
    }

    ::slotted(ui-select-option) {
        display: flex;
    }

    :host(.open) {
        height: calc((1em * var(--line-height) + var(--spacing) * 2) * var(--items-length));
    }

    :host(.open) .options {
        display: block;
    }

    :host(.open) .icon {
        display: none;
    }

    :host(.open) ::slotted(ui-select-option[selected]) {
        background-color: hsl(var(--primary));
        color: hsl(var(--primary-fg));
    }

    :host(.open) ::slotted(ui-select-option:not([selected]):hover) {
        background-color: hsl(var(--fg), 0.1);
    }

    :host(:not(.open)) .options:has(> ::slotted(ui-select-option[selected])) {
        display: block;
    }

    :host(:not(.open)) ::slotted(ui-select-option:not([selected])) {
        display: none;
    }
</style>

<div class="options">
    <div class="icon"><ui-icon-chevron-down></ui-icon-chevron-down></div>

    <slot></slot>
</div>
`;
var Z, k;
const vt = class vt extends HTMLElement {
  constructor() {
    super();
    /** @param {Event} ev */
    n(this, Z, (e) => {
      this.classList.toggle("open") ? (e.stopPropagation(), this.addEventListener("click", s(this, k))) : setTimeout(
        () => this.removeEventListener("click", s(this, k))
      );
    });
    /** @param {MouseEvent | PointerEvent} ev */
    n(this, k, (e) => {
      (e.composedPath() || []).forEach((o) => {
        o instanceof q && ([...this.querySelectorAll("ui-select-option")].forEach(
          (a) => a.removeAttribute("selected")
        ), o.setAttribute("selected", ""), this.dispatchEvent(new CustomEvent("change", { detail: o })));
      });
    });
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ge.content.cloneNode(!0));
  }
  connectedCallback() {
    var e;
    (e = this.shadowRoot.querySelector(".options")) == null || e.addEventListener("click", s(this, Z)), this.style.setProperty(
      "--items-length",
      this.querySelectorAll("ui-select-option").length.toString()
    );
  }
  disconnectedCallback() {
    var e;
    this.removeEventListener("click", s(this, k)), (e = this.shadowRoot.querySelector(".options")) == null || e.addEventListener("click", s(this, Z));
  }
};
Z = new WeakMap(), k = new WeakMap(), r(vt, "register", () => customElements.define("ui-select", vt));
let it = vt;
var W, C, J, Gt;
let We = (Gt = class {
  /** @param {Lang} root */
  constructor(t) {
    /** @type {Lang} */
    n(this, W, void 0);
    /**
     * @type {Events<{ "change": import("./lang-type").LangType}>}
     */
    n(this, C, void 0);
    /**
     * @type {{
     *  [key: string]: {
     *      [key: string]: string;
     *  };
     * }}
     */
    n(this, J, void 0);
    l(this, W, t), l(this, C, new Y()), this.langType = null;
  }
  /** @returns {import("./lang-type").LangType} */
  getFallbackElement() {
    return s(this, W).querySelector("ui-lang-type[fallback]");
  }
  /**
   * @param {import("./lang-type").LangType} langType
   * @param {{
   *  [key: string]: {
   *      [key: string]: string;
   *  };
   * }} data
   */
  new(t, e) {
    this.langType = t, l(this, J, e), s(this, C).dispatchWithData("change", this.langType);
  }
  /**
   * @param {string} group
   * @param {string} key
   */
  get(t, e) {
    var o;
    return (o = s(this, J)) == null ? void 0 : o[t][e];
  }
  /**
   * @param {"change"} key
   * @param {(langType: import("./lang-type").LangType | null) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(t, e, o = !1) {
    if (typeof e != "function")
      throw "callback is not a function";
    return o && e(this.langType), s(this, C).addListener(t, e);
  }
}, W = new WeakMap(), C = new WeakMap(), J = new WeakMap(), Gt);
const N = class N extends HTMLElement {
  constructor() {
    super(), this.ui = new We(this);
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "current":
        o !== null && this._loadLanguage(o);
        break;
    }
  }
  /** @param {string} name */
  async _loadLanguage(t) {
    const e = this.querySelector(`ui-lang-type[name="${t}"]`) || this.ui.getFallbackElement();
    if (!e)
      return;
    if (!e.ui.href)
      throw "Missing href attribute!";
    const o = await fetch(e.ui.href);
    this.ui.new(e, await o.json());
  }
};
r(N, "register", () => customElements.define("ui-lang", N)), r(N, "observedAttributes", ["current"]);
let ot = N;
var u, Ft;
let Je = (Ft = class {
  /**
  * @param {LangType} root
  */
  constructor(t) {
    /** @type {LangType} */
    n(this, u, void 0);
    l(this, u, t);
  }
  get name() {
    return s(this, u).getAttribute("name");
  }
  set name(t) {
    s(this, u).setAttribute("name", t);
  }
  get href() {
    return s(this, u).getAttribute("href");
  }
  set href(t) {
    s(this, u).setAttribute("href", t);
  }
  get fallback() {
    return s(this, u).hasAttribute("fallback");
  }
  set fallback(t) {
    t ? s(this, u).setAttribute("fallback", "") : s(this, u).removeAttribute("fallback");
  }
}, u = new WeakMap(), Ft);
const wt = class wt extends HTMLElement {
  constructor() {
    super(), this.ui = new Je(this);
  }
};
r(wt, "register", () => customElements.define("ui-lang-type", wt));
let rt = wt;
const me = document.createElement("template");
me.innerHTML = `
    <style>
        :host {
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            animation: fade-in 0.5s;
            transition: opacity 0.5s ease;
        }

        :host(:last-child) {
            opacity: 1;
        }

        @keyframes fade-in {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
    </style>

    <slot></slot>
`;
var M, _t;
let Be = (_t = class {
  /**
  * @param {StackLayoutPage} root
  */
  constructor(t) {
    /** @type {StackLayoutPage} */
    n(this, M, void 0);
    l(this, M, t);
  }
  get name() {
    return s(this, M).getAttribute("name");
  }
  set name(t) {
    s(this, M).setAttribute("name", t);
  }
}, M = new WeakMap(), _t);
const bt = class bt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(me.content.cloneNode(!0)), this.ui = new Be(this);
  }
};
r(bt, "register", () => customElements.define("ui-stack-layout-page", bt));
let nt = bt;
const fe = document.createElement("template");
fe.innerHTML = `
    <style>
        :host {
            display: block;
            position: relative;
            width: 100%;
            height: 100%;
        }
    </style>

    <slot></slot>
`;
var E, S, te;
let Xe = (te = class {
  /** @param {StackLayout} root */
  constructor(t) {
    /** @type {StackLayout} */
    n(this, E, void 0);
    /**
     * @type {Pages}
     */
    n(this, S, {});
    l(this, E, t), this.events = new Y(), this.stack = [];
  }
  /**
   * @param {string} name
   * @param {() => (StackLayoutPage | DocumentFragment)} cb
   */
  registerPage(t, e) {
    s(this, S)[t] = e;
  }
  /**
   * @param {string} name
   */
  unregisterPage(t) {
    delete s(this, S)[t];
  }
  goBack() {
    if (!this.stack.length)
      return;
    const t = this.stack.pop();
    t.ontransitionend = () => {
      t.ontransitionend = null, s(this, E).removeChild(t);
    }, this.stack.length && s(this, E).appendChild(this.stack[this.stack.length - 1]), this.dispatchChangeEvent();
  }
  /**
   * @param {string} name
   */
  setPage(t) {
    if (this.stack.push(
      // @ts-expect-error
      s(this, E).appendChild(s(this, S)[t]().children[0])
    ), this.stack.length > 1) {
      const e = this.stack[this.stack.length - 2];
      e.ontransitionend = () => {
        e.ontransitionend = null, e.parentElement.removeChild(e);
      };
    }
    this.dispatchChangeEvent();
  }
  async dispatchChangeEvent() {
    this.events.dispatchWithData(
      "change",
      {
        newPage: this.stack[this.stack.length - 1] || null,
        oldPage: this.stack[this.stack.length - 2] || null
      }
    );
  }
}, E = new WeakMap(), S = new WeakMap(), te);
const yt = class yt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(fe.content.cloneNode(!0)), this.ui = new Xe(this);
  }
};
r(yt, "register", () => customElements.define("ui-stack-layout", yt));
let at = yt;
var f, v, ee;
let Ye = (ee = class {
  /**
   * @param {Store} root
   */
  constructor(t) {
    /** @type {Store} */
    n(this, f, void 0);
    /** @type {any} */
    n(this, v, {});
    l(this, f, t), this.events = new Y();
  }
  get localStoragePrefix() {
    return s(this, f).getAttribute("local-storage-prefix");
  }
  set localStoragePrefix(t) {
    s(this, f).setAttribute("local-storage-prefix", t);
  }
  get enableLocalStorage() {
    return s(this, f).hasAttribute("enable-local-storage");
  }
  set enableLocalStorage(t) {
    t ? s(this, f).setAttribute("enable-local-storage", "") : s(this, f).removeAttribute("enable-local-storage");
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @returns {T[K]}
   */
  get(t) {
    return s(this, v)[t];
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
   * `this.enableLocalStorage` flag needs to be set to `true` for this to work
   */
  set(t, e, o = !1) {
    if (o && this.enableLocalStorage) {
      const a = JSON.parse(localStorage.getItem(this.localStoragePrefix + t.toString()) || "null");
      s(this, v)[t] = a ?? e;
    } else
      s(this, v)[t] = e;
    this.enableLocalStorage && localStorage.setItem(this.localStoragePrefix + t.toString(), JSON.stringify(s(this, v)[t])), this.events.dispatchWithData(t, s(this, v)[t]);
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {(data: T[K]) => any} callback
   */
  update(t, e) {
    if (typeof e != "function")
      throw "callback is not a function";
    this.set(t, e(s(this, v)[t]));
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {(data: T[K]) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(t, e, o = !1) {
    if (typeof e != "function")
      throw "callback is not a function";
    return o && e(this.get(t)), this.events.addListener(t, e);
  }
}, f = new WeakMap(), v = new WeakMap(), ee);
const xt = class xt extends HTMLElement {
  constructor() {
    super(), this.ui = new Ye(this);
  }
};
r(xt, "register", () => customElements.define("ui-store", xt));
let lt = xt;
const ve = document.createElement("template");
ve.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 52 52"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M50,24H6.83L27.41,3.41a2,2,0,0,0,0-2.82,2,2,0,0,0-2.82,0l-24,24a1.79,1.79,0,0,0-.25.31A1.19,1.19,0,0,0,.25,25c0,.07-.07.13-.1.2l-.06.2a.84.84,0,0,0,0,.17,2,2,0,0,0,0,.78.84.84,0,0,0,0,.17l.06.2c0,.07.07.13.1.2a1.19,1.19,0,0,0,.09.15,1.79,1.79,0,0,0,.25.31l24,24a2,2,0,1,0,2.82-2.82L6.83,28H50a2,2,0,0,0,0-4Z"
    />
</svg>
`;
const Lt = class Lt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ve.content.cloneNode(!0));
  }
};
r(Lt, "register", () => customElements.define("ui-svg-back-arrow-navigation", Lt));
let jt = Lt;
const we = document.createElement("template");
we.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect width="24" height="24" fill="none" />
    <path
        d="M17 9.5L12 14.5L7 9.5"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>
`;
const Et = class Et extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(we.content.cloneNode(!0));
  }
};
r(Et, "register", () => customElements.define("ui-svg-chevron-down", Et));
let It = Et;
const be = document.createElement("template");
be.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <g clip-path="url(#clip0_429_11083)">
        <path
            d="M7 7.00006L17 17.0001M7 17.0001L17 7.00006"
            stroke="currentColor"
            stroke-width="2.5"
            stroke-linecap="round"
            stroke-linejoin="round"
        />
    </g>
    <defs>
        <clipPath id="clip0_429_11083">
            <rect width="24" height="24" fill="none" />
        </clipPath>
    </defs>
</svg>
`;
const kt = class kt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(be.content.cloneNode(!0));
  }
};
r(kt, "register", () => customElements.define("ui-svg-close", kt));
let Nt = kt;
const ye = document.createElement("template");
ye.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 1024 1024"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M960 160h-291.2a160 160 0 0 0-313.6 0H64a32 32 0 0 0 0 64h896a32 32 0 0 0 0-64zM512 96a96 96 0 0 1 90.24 64h-180.48A96 96 0 0 1 512 96zM844.16 290.56a32 32 0 0 0-34.88 6.72A32 32 0 0 0 800 320a32 32 0 1 0 64 0 33.6 33.6 0 0 0-9.28-22.72 32 32 0 0 0-10.56-6.72zM832 416a32 32 0 0 0-32 32v96a32 32 0 0 0 64 0v-96a32 32 0 0 0-32-32zM832 640a32 32 0 0 0-32 32v224a32 32 0 0 1-32 32H256a32 32 0 0 1-32-32V320a32 32 0 0 0-64 0v576a96 96 0 0 0 96 96h512a96 96 0 0 0 96-96v-224a32 32 0 0 0-32-32z"
        fill="currentColor"
    />
    <path
        d="M384 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM544 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM704 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0z"
        fill="currentColor"
    />
</svg>
`;
const Ct = class Ct extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ye.content.cloneNode(!0));
  }
};
r(Ct, "register", () => customElements.define("ui-svg-delete-recycle-bin", Ct));
let zt = Ct;
const xe = document.createElement("template");
xe.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M20.1497 7.93997L8.27971 19.81C7.21971 20.88 4.04971 21.3699 3.27971 20.6599C2.50971 19.9499 3.06969 16.78 4.12969 15.71L15.9997 3.84C16.5478 3.31801 17.2783 3.03097 18.0351 3.04019C18.7919 3.04942 19.5151 3.35418 20.0503 3.88938C20.5855 4.42457 20.8903 5.14781 20.8995 5.90463C20.9088 6.66146 20.6217 7.39189 20.0997 7.93997H20.1497Z"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
    <path
        d="M21 21H12"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>;
`;
const Mt = class Mt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(xe.content.cloneNode(!0));
  }
};
r(Mt, "register", () => customElements.define("ui-svg-edit2", Mt));
let Ut = Mt;
const Le = document.createElement("template");
Le.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g fill="currentColor" transform="translate(85.333333, 42.666667)">
            <path
                d="M75.9466667,285.653333 C63.8764997,278.292415 49.6246897,275.351565 35.6266667,277.333333 L1.42108547e-14,277.333333 L1.42108547e-14,405.333333 L28.3733333,405.333333 L28.3733333,356.48 L40.5333333,356.48 C53.1304778,357.774244 65.7885986,354.68506 76.3733333,347.733333 C85.3576891,340.027178 90.3112817,328.626053 89.8133333,316.8 C90.4784904,304.790173 85.3164923,293.195531 75.9466667,285.653333 L75.9466667,285.653333 Z M53.12,332.373333 C47.7608867,334.732281 41.8687051,335.616108 36.0533333,334.933333 L27.7333333,334.933333 L27.7333333,298.666667 L36.0533333,298.666667 C42.094796,298.02451 48.1897668,299.213772 53.5466667,302.08 C58.5355805,305.554646 61.3626692,311.370371 61.0133333,317.44 C61.6596233,323.558965 58.5400493,329.460862 53.12,332.373333 L53.12,332.373333 Z M150.826667,277.333333 L115.413333,277.333333 L115.413333,405.333333 L149.333333,405.333333 C166.620091,407.02483 184.027709,403.691457 199.466667,395.733333 C216.454713,383.072462 225.530463,362.408923 223.36,341.333333 C224.631644,323.277677 218.198313,305.527884 205.653333,292.48 C190.157107,280.265923 170.395302,274.806436 150.826667,277.333333 L150.826667,277.333333 Z M178.986667,376.32 C170.098963,381.315719 159.922142,383.54422 149.76,382.72 L144.213333,382.72 L144.213333,299.946667 L149.333333,299.946667 C167.253333,299.946667 174.293333,301.653333 181.333333,308.053333 C189.877212,316.948755 194.28973,329.025119 193.493333,341.333333 C194.590843,354.653818 189.18793,367.684372 178.986667,376.32 L178.986667,376.32 Z M254.506667,405.333333 L283.306667,405.333333 L283.306667,351.786667 L341.333333,351.786667 L341.333333,329.173333 L283.306667,329.173333 L283.306667,299.946667 L341.333333,299.946667 L341.333333,277.333333 L254.506667,277.333333 L254.506667,405.333333 L254.506667,405.333333 Z M234.666667,7.10542736e-15 L9.52127266e-13,7.10542736e-15 L9.52127266e-13,234.666667 L42.6666667,234.666667 L42.6666667,192 L42.6666667,169.6 L42.6666667,42.6666667 L216.96,42.6666667 L298.666667,124.373333 L298.666667,169.6 L298.666667,192 L298.666667,234.666667 L341.333333,234.666667 L341.333333,106.666667 L234.666667,7.10542736e-15 L234.666667,7.10542736e-15 Z"
            ></path>
        </g>
    </g></svg
>
`;
const St = class St extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Le.content.cloneNode(!0));
  }
};
r(St, "register", () => customElements.define("ui-svg-pdf-document", St));
let qt = St;
const Ee = document.createElement("template");
Ee.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 -0.5 21 21"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <defs></defs>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g transform="translate(-259.000000, -840.000000)" fill="currentColor">
            <g transform="translate(56.000000, 160.000000)">
                <path
                    d="M211.261065,690.694762 C209.623062,692.25443 206.966811,692.25443 205.328807,690.694762 L203.614251,689.062203 C202.79525,688.282368 202.79525,687.018258 203.614251,686.238424 C204.433253,685.45859 205.761903,685.45859 206.580905,686.238424 C207.721845,687.3248 208.972894,687.224949 209.777214,686.458096 C210.587827,685.686249 210.685352,684.498026 209.541266,683.409653 C208.722264,682.629819 208.722264,681.36471 209.541266,680.584876 C210.361317,679.805041 211.688918,679.805041 212.50792,680.584876 L214.22667,682.221429 C215.864674,683.781098 215.864674,686.310317 214.22667,687.869985 L223.356286,696.563988 C225.318325,698.431197 222.350623,701.253977 220.390682,699.387767 L211.261065,690.694762 Z"
                ></path>
            </g>
        </g>
    </g>
</svg>
`;
const Tt = class Tt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Ee.content.cloneNode(!0));
  }
};
r(Tt, "register", () => customElements.define("ui-svg-settings", Tt));
let Ot = Tt;
const ke = document.createElement("template");
ke.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        x="48"
        y="80"
        width="416"
        height="384"
        rx="48"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="128"
        y1="48"
        x2="128"
        y2="80"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="384"
        y1="48"
        x2="384"
        y2="80"
    />
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x="112"
        y="224"
        width="96"
        height="96"
        rx="13"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="464"
        y1="160"
        x2="48"
        y2="160"
    />
</svg>
`;
const Ht = class Ht extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ke.content.cloneNode(!0));
  }
};
r(Ht, "register", () => customElements.define("ui-svg-today-outline", Ht));
let Dt = Ht;
const g = {
  BackArrowNavigation: jt,
  ChevronDown: It,
  Close: Nt,
  DeleteRecycleBin: zt,
  Edit2: Ut,
  PDFDocument: qt,
  Settings: Ot,
  TodayOutline: Dt
}, Ce = document.createElement("template");
Ce.innerHTML = `
<style>
    :host {
        position: relative;
        display: flex;
        flex-direction: row;
        width: 100%;
        padding: calc(var(--spacing) / 4) calc(var(--spacing) / 2);
        border-radius: var(--radius);
    }

    :host > .text {
        display: flex;
        flex-direction: column;
        justify-content: center;
        min-width: fit-content;
        width: 100%;
        margin-right: var(--spacing);
    }

    :host > .input {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: fit-content;
        width: 100%;
    }
</style>

<span class="text">
    <ui-primary></ui-primary>
    <ui-secondary></ui-secondary>
</span>

<span class="input">
    <slot name="input"></slot>
    <slot></slot>
</span>
`;
var c, T, B, X, H, se;
let Ke = (se = class {
  /** @param {Label} root */
  constructor(t) {
    /** @type {Label} */
    n(this, c, void 0);
    n(this, T, !1);
    n(this, B, async () => {
      [...s(this, c).querySelectorAll('[slot="input"]')].forEach((t) => t.click());
    });
    n(this, X, async (t) => {
      t.stopPropagation();
    });
    /** @type {() => void} */
    n(this, H, void 0);
    l(this, c, t);
  }
  get primary() {
    return s(this, c).getAttribute("primary");
  }
  set primary(t) {
    s(this, c).setAttribute("primary", t);
  }
  get secondary() {
    return s(this, c).getAttribute("secondary");
  }
  set secondary(t) {
    s(this, c).setAttribute("secondary", t);
  }
  getInputSlot() {
    return [...s(this, c).querySelectorAll('[slot="input"]')];
  }
  enableRipple() {
    s(this, H) || (this.removeRipple = $t(s(this, c)), s(this, c).style.cursor = "pointer", this._startInputHandling());
  }
  disableRipple() {
    s(this, H) && s(this, H).call(this), this._stopInputHandling();
  }
  _startInputHandling() {
    s(this, T) || (s(this, c).addEventListener("click", s(this, B)), this.getInputSlot().forEach((t) => {
      t.addEventListener("click", s(this, X));
    }), l(this, T, !0));
  }
  _stopInputHandling() {
    s(this, c).removeEventListener("click", s(this, B)), [...s(this, c).querySelectorAll('[slot="input"]')].forEach((t) => {
      t.removeEventListener("click", s(this, X));
    }), l(this, T, !1);
  }
}, c = new WeakMap(), T = new WeakMap(), B = new WeakMap(), X = new WeakMap(), H = new WeakMap(), se);
const z = class z extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Ce.content.cloneNode(!0)), this.ui = new Ke(this);
  }
  /**
  * @param {string} name
  * @param {string | null} _oldValue
  * @param {string | null} newValue
  */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "ripple":
        o !== null ? this.ui.enableRipple() : this.ui.disableRipple();
        break;
      case "primary":
        this.shadowRoot.querySelector("ui-primary").innerHTML = o || "";
        break;
      case "secondary":
        this.shadowRoot.querySelector("ui-secondary").innerHTML = o || "";
        break;
    }
  }
};
r(z, "register", () => customElements.define("ui-label", z)), r(z, "observedAttributes", ["ripple", "secondary", "primary"]);
let ct = z;
const Me = document.createElement("template");
Me.innerHTML = `
<style>
    :host {
        font-size: 1.10rem;
        font-family: var(--font-family);
        font-variation-settings:
            "CASL" 1,
            "MONO" 0,
            "slnt" 0;
    }
</style>

<slot></slot>
`;
const Rt = class Rt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Me.content.cloneNode(!0));
  }
};
r(Rt, "register", () => customElements.define("ui-primary", Rt));
let ht = Rt;
const Se = document.createElement("template");
Se.innerHTML = `
<style>
    :host {
        font-size: 0.9rem;
        font-family: var(--font-family);
        font-variation-settings:
            "CASL" 1,
            "MONO" 0,
            "slnt" -15;
    }
</style>

<slot></slot>
`;
const At = class At extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Se.content.cloneNode(!0));
  }
};
r(At, "register", () => customElements.define("ui-secondary", At));
let dt = At;
var p;
class Qe {
  constructor() {
    /** @type {MediaQueryList | null} */
    n(this, p, null);
    this.currentTheme = null, this.themes = {};
  }
  enableAutoMode() {
    if (this.removeMode(), s(this, p)) {
      this.mediaChangeHandler(s(this, p));
      return;
    }
    l(this, p, window.matchMedia("(prefers-color-scheme: dark)")), s(this, p).addEventListener("change", this.mediaChangeHandler), this.mediaChangeHandler(s(this, p));
  }
  disableAutoMode() {
    this._removeMedia();
  }
  /**
   * @param {string} name
   * @param {string} href
   */
  addTheme(t, e) {
    this.themes[t] = e;
  }
  /**
   * @param {string} name
   */
  loadTheme(t) {
    var o;
    if (!this.themes[t])
      throw `theme "${t}" is missing in this.themes`;
    if (((o = this.currentTheme) == null ? void 0 : o.name) == t)
      return;
    {
      const a = document.getElementById("theme");
      a && (document.head.removeChild(a), this.currentTheme = null);
    }
    const e = document.createElement("link");
    e.id = "theme", e.rel = "stylesheet", e.href = this.themes[t], document.head.appendChild(e), this.currentTheme = { name: t, href: this.themes[t] };
  }
  /**
   * @param {MediaQueryListEvent | MediaQueryList} ev
   */
  mediaChangeHandler(t) {
    t.matches ? document.body.setAttribute("data-theme", "dark") : document.body.setAttribute("data-theme", "light");
  }
  /**
   * @param {HTMLElement} element
   */
  removeMode(t = document.body) {
    t.removeAttribute("data-theme");
  }
  /**
   * @param {string} mode
   * @param {HTMLElement} element
   */
  setMode(t, e = document.body) {
    switch (t) {
      case "dark":
        e.setAttribute("data-theme", t);
        break;
      case "light":
        e.setAttribute("data-theme", t);
        break;
    }
  }
  _removeMedia() {
    s(this, p) && (s(this, p).removeEventListener("change", this.mediaChangeHandler), l(this, p, null));
  }
}
p = new WeakMap();
const U = class U extends HTMLElement {
  constructor() {
    super(), this.ui = new Qe();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue 
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, o) {
    switch (t) {
      case "auto":
        o !== null ? this.ui.enableAutoMode() : this.ui.disableAutoMode();
        break;
      case "mode":
        o !== null ? this.ui.setMode(o) : this.ui.removeMode();
        break;
    }
  }
};
r(U, "register", () => customElements.define("ui-theme-handler", U)), r(U, "observedAttributes", ["auto", "mode"]);
let ut = U;
const Ge = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AppBar: K,
  Button: Q,
  Container: F,
  Dialog: _,
  FlexGrid: st,
  FlexGridItem: tt,
  FlexGridRow: et,
  IconButton: G,
  Label: ct,
  Lang: ot,
  LangType: rt,
  Primary: ht,
  Secondary: dt,
  Select: it,
  SelectOption: q,
  StackLayout: at,
  StackLayoutPage: nt,
  Store: lt,
  ThemeHandler: ut,
  svg: g
}, Symbol.toStringTag, { value: "Module" }));
async function Fe() {
  K.register(), G.register(), Q.register(), F.register(), tt.register(), et.register(), st.register(), q.register(), it.register(), rt.register(), ot.register(), nt.register(), at.register(), lt.register(), dt.register(), ht.register(), ct.register(), ut.register(), _.register();
}
async function _e() {
  g.BackArrowNavigation.register(), g.ChevronDown.register(), g.Close.register(), g.DeleteRecycleBin.register(), g.Edit2.register(), g.PDFDocument.register(), g.Settings.register(), g.TodayOutline.register();
}
const us = {
  js: qe,
  wc: Ge,
  define: Fe,
  defineSVG: _e
};
export {
  us as default
};
