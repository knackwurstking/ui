var kt = Object.defineProperty;
var bt = (o) => {
  throw TypeError(o);
};
var Ct = (o, t, e) => t in o ? kt(o, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : o[t] = e;
var r = (o, t, e) => Ct(o, typeof t != "symbol" ? t + "" : t, e), xt = (o, t, e) => t.has(o) || bt("Cannot " + e);
var h = (o, t, e) => (xt(o, t, "read from private field"), e ? e.call(o) : t.get(o)), mt = (o, t, e) => t.has(o) ? bt("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(o) : t.set(o, e);
const ft = {
  onDragStart: null,
  onDragging: null,
  onDragEnd: null
};
function Rt(o, t = {}) {
  t = {
    ...ft,
    ...t
  };
  const e = () => {
    const n = [...o.parentNode.children].indexOf(o);
    o.draggable = !0, o.ondragstart = (l) => {
      l.dataTransfer.effectAllowed = "move", l.dataTransfer.dropEffect = "move", l.dataTransfer.setData(
        "text/plain",
        n.toString()
      ), t.onDragStart && t.onDragStart(n);
    }, o.ondragover = (l) => (l.preventDefault(), !1), o.ondragenter = (l) => {
      l.preventDefault(), t.onDragging && t.onDragging(n);
    }, o.ondrop = (l) => {
      l.preventDefault(), l.dataTransfer.dropEffect = "move";
      const K = parseInt(
        l.dataTransfer.getData("text/plain"),
        10
      );
      t.onDragEnd && t.onDragEnd(K, n);
    };
  }, i = () => {
    o.draggable = !1, o.ondragstart = null, o.ondragover = null, o.ondragenter = null, o.ondrop = null;
  };
  return e(), {
    /**
     * @param {DraggableOptions} _options
     */
    update(s) {
      t = {
        ...ft,
        ...s
      }, i(), e();
    },
    destroy: i
  };
}
var c;
class d {
  constructor() {
    /**
     * @type {any}
     */
    mt(this, c, {});
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  on(t, e) {
    if (typeof e != "function")
      throw `invalid event listener passed for "${t.toString()}" event!`;
    return h(this, c)[t] || (h(this, c)[t] = []), h(this, c)[t].push(e), () => {
      this.off(t, e);
    };
  }
  // }}}
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>)} listener
   */
  off(t, e) {
    if (!h(this, c)[t])
      throw `no listeners found for ${t.toString()}, there is nothing to delete`;
    let i = !1, s = 0;
    for (const n of h(this, c)[t])
      n === e && (h(this, c)[t].splice(s, 1), i = !0), s++;
    if (!i)
      throw `listener not found for ${t.toString()}, there is nothing to delete`;
    return this;
  }
  // }}}
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   */
  dispatch(t, e) {
    if (e === void 0) throw "data is undefined!";
    if (h(this, c)[t])
      for (const i of h(this, c)[t])
        i(e);
    return this;
  }
  // }}}
}
c = new WeakMap();
function vt(o, t) {
  const e = document.createElement("div");
  e.classList.add("ripple"), e.style.position = "absolute", e.style.color = "inherit", e.style.borderRadius = "50%", e.style.pointerEvents = "none", e.style.width = "100px", e.style.height = "100px", e.style.marginTop = "-50px", e.style.marginLeft = "-50px", e.style.opacity = `${t.opacity}`, e.style.backgroundColor = t.color, e.style.transform = "scale(0) translate(0, 0)", e.style.transition = `transform ${t.spreadDuration} ${t.spreadTiming} 0s,opacity ${t.clearDuration} ${t.clearTiming} 0s`, o.currentTarget.appendChild(e);
  const i = o.currentTarget.getBoundingClientRect();
  t.centered ? (e.style.top = `${i.height / 2}px`, e.style.left = `${i.width / 2}px`) : (e.style.top = `${o.clientY - i.top}px`, e.style.left = `${o.clientX - i.left}px`);
  const s = Math.max(i.width, i.height) * 0.02;
  return e.style.transform = `scale(${s}) translate(0, 0)`, e;
}
function wt(o) {
  o && (o.addEventListener("transitionend", (t) => {
    t.propertyName === "opacity" && o.remove();
  }), o.style.opacity = "0");
}
const yt = {
  color: "var(--ui-ripple-color, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  useClick: !1
};
function u(o, t = {}) {
  t = { ...yt, ...t };
  let e;
  const i = (n) => {
    e = vt(n, t);
  }, s = () => {
    wt(e);
  };
  return o.classList.add("ripple-container"), o.style.overflow = "hidden", t.useClick === !0 ? o.addEventListener("click", (n) => {
    e = vt(n, t), wt(e);
  }) : (o.addEventListener("pointerdown", i), o.addEventListener("pointerup", s), o.addEventListener("pointerleave", s)), () => {
    o.classList.remove("ripple-container"), o.removeEventListener("pointerdown", i), o.removeEventListener("pointerup", s), o.removeEventListener("pointerleave", s);
  };
}
function At() {
  return /(android)/i.test(navigator.userAgent);
}
const a = String.raw;
class g {
  constructor() {
    this.callbacks = [];
  }
  /**
   * @param {(() => void|Promise<void>)[]} cb
   */
  add(...t) {
    this.callbacks.push(...t);
  }
  run() {
    for (let t = 0; t < this.callbacks.length; t++)
      if (this.callbacks[t] !== null)
        try {
          this.callbacks[t](), this.callbacks[t] = null;
        } catch (e) {
          console.error("cleanup error:", e);
        }
    this.callbacks = this.callbacks.filter((t) => t !== null);
  }
}
const Mt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CleanUp: g,
  Events: d,
  createDraggable: Rt,
  createRipple: u,
  defaultRippleOptions: yt,
  html: a,
  isAndroid: At
}, Symbol.toStringTag, { value: "Module" })), H = class H extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get leftSlot() {
        return [...this.root.querySelectorAll('[slot="left"]')];
      },
      get centerSlot() {
        return [...this.root.querySelectorAll('[slot="center"]')];
      },
      get rightSlot() {
        return [...this.root.querySelectorAll('[slot="right"]')];
      },
      get position() {
        return this.root.getAttribute("position");
      },
      set position(t) {
        if (!t) {
          this.root.removeAttribute("position");
          return;
        }
        this.root.setAttribute("position", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex !important;
                    position: absolute !important;
                    z-index: 100;
                    background-color: var(--ui-backdrop-bgColor);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                    overflow: hidden;
                    user-select: none;
                }

                :host([position="top"]) {
                    top: 0;
                    left: 0;
                    right: 0;
                    height: var(--ui-app-bar-height);
                    border-bottom: 1px solid var(--ui-borderColor);
                    padding-left: var(--ui-spacing);
                    padding-right: var(--ui-spacing);
                }

                :host > ui-flex-grid-row {
                    width: 100%;
                    height: 100%;
                    align-items: center;
                    justify-content: space-between;
                }

                :host > ui-flex-grid-row > * {
                    height: 100%;
                }

                :host > ui-flex-grid-row > *:nth-child(1),
                :host > ui-flex-grid-row > *:nth-child(3) {
                    width: fit-content;
                }

                :host > ui-flex-grid-row > [slot="left"] {
                    margin-left: 0 !important;
                }

                :host > ui-flex-grid-row > [slot="center"] {
                    width: 100%;
                }

                :host > ui-flex-grid-row > [slot="right"] {
                    margin-right: 0 !important;
                    justify-content: flex-end;
                }
            </style>

            <ui-flex-grid-row gap="0.25rem">
                <ui-flex-grid-row gap="0.25rem">
                    <slot name="left"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
                    <slot name="center"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row gap="0.25rem">
                    <slot name="right"></slot>
                </ui-flex-grid-row>
            </ui-flex-grid-row>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r(H, "register", () => {
  customElements.get("ui-app-bar") || customElements.define("ui-app-bar", H);
});
let Z = H;
const q = class q extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /**
       * @returns {T}
       */
      get child() {
        return this.root.querySelector("*");
      },
      /**
       * @param {string | null} [value]
       */
      show(t = null) {
        this.root.style.display = t;
      },
      hide() {
        this.root.style.display = "none";
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    flex: 1;
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r(q, "register", () => {
  customElements.get("ui-app-bar-item") || customElements.define("ui-app-bar-item", q);
});
let X = q;
const b = class b extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.removeRippleCallback = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIButtonEvents>}
       */
      events: new d(),
      get noripple() {
        return this.root.hasAttribute("noripple");
      },
      set noripple(t) {
        if (!t) {
          this.root.removeAttribute("noripple");
          return;
        }
        this.root.setAttribute("noripple", "");
      },
      get color() {
        return this.root.getAttribute("color");
      },
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get variant() {
        return this.root.getAttribute("variant");
      },
      set variant(t) {
        if (!t) {
          this.root.removeAttribute("variant");
          return;
        }
        this.root.setAttribute("variant", t);
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    position: relative !important;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2.5);
                    border: 1px solid currentColor;
                    border-radius: var(--ui-radius);
                    overflow: hidden;
                    text-transform: capitalize;
                    cursor: pointer;
                    outline: none;
                    user-select: none;
                    font-size: 1.1rem;
                    font-weight: 450;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-button-fontVariation);
                }

                :host([variant="full"]) {
                    border: none;
                }

                :host([variant="full"][color="primary"]) {
                    background-color: var(--ui-primary-bgColor);
                    color: var(--ui-primary-color);
                }

                :host([variant="full"][color="secondary"]) {
                    background-color: var(--ui-secondary-bgColor);
                    color: var(--ui-secondary-color);
                }

                :host([variant="full"][color="destructive"]) {
                    background-color: var(--ui-destructive-bgColor);
                    color: var(--ui-destructive-color);
                }

                :host([variant="outline"]) {
                    border-color: currentColor;
                    background-color: transparent;
                }

                :host([variant="outline"][color="primary"]) {
                    color: var(--ui-primary-bgColor);
                }

                :host([variant="outline"][color="secondary"]) {
                    color: var(--ui-secondary-bgColor);
                }

                :host([variant="outline"][color="destructive"]) {
                    color: var(--ui-destructive-bgColor);
                }

                :host([variant="ghost"]) {
                    border-color: transparent;
                    background-color: transparent;
                    font-weight: 900;
                }

                :host([variant="ghost"][color="primary"]) {
                    color: var(--ui-primary-bgColor);
                }

                :host([variant="ghost"][color="secondary"]) {
                    color: var(--ui-secondary-bgColor);
                }

                :host([variant="ghost"][color="destructive"]) {
                    color: var(--ui-destructive-bgColor);
                }

                :host([disabled]),
                :host([disabled]:hover),
                :host([disabled]:active) {
                    background-color: transparent;
                    opacity: 0.25;
                    cursor: default;
                    pointer-events: none;
                }
            </style>

            <slot></slot>
        `, typeof this.removeRippleCallback != "function" && (this.removeRippleCallback = u(
      this,
      { centered: !0 }
    )), this.addEventListener("click", () => {
      this.ui.events.dispatch("click", this);
    });
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "noripple":
        i !== null ? typeof this.removeRippleCallback == "function" && (this.removeRippleCallback(), this.removeRippleCallback = null) : typeof this.removeRippleCallback != "function" && (this.removeRippleCallback = u(
          this,
          { centered: !0 }
        ));
        break;
    }
  }
};
r(b, "register", () => {
  customElements.get("ui-button") || customElements.define("ui-button", b);
}), r(b, "observedAttributes", ["noripple"]);
let B = b;
const m = class m extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.removeRippleCallback = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIIconButtonEvents>}
       */
      events: new d(),
      get noripple() {
        return this.root.hasAttribute("noripple");
      },
      set noripple(t) {
        if (!t) {
          this.root.removeAttribute("noripple");
          return;
        }
        this.root.setAttribute("noripple", "");
      },
      get color() {
        return this.root.getAttribute("color");
      },
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get ghost() {
        return this.root.hasAttribute("ghost");
      },
      set ghost(t) {
        if (!t) {
          this.root.removeAttribute("ghost");
          return;
        }
        this.root.setAttribute("ghost", "");
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    position: relative;
                    width: 2.5rem;
                    height: 2.5rem;
                    padding: calc(var(--ui-spacing) / 2);
                    border: 1px solid currentColor;
                    border-radius: var(--ui-radius);
                    outline: none;
                    overflow: hidden;
                    cursor: pointer;
                    user-select: none;
                    font-size: 1.1rem;
                    font-weight: 450;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-button-fontVariation);
                }

                :host([ghost]) {
                    border-color: transparent !important;
                    box-shadow: none;
                    font-weight: 900;
                }

                :host([color="primary"]) {
                    color: var(--ui-primary-bgColor);
                    border-color: var(--ui-primary-bgColor);
                }

                :host([color="secondary"]) {
                    color: var(--ui-secondary-bgColor);
                    border-color: var(--ui-secondary-bgColor);
                }

                :host([color="destructive"]) {
                    color: var(--ui-destructive-bgColor);
                    border-color: var(--ui-destructive-bgColor);
                }

                /* :disabled */

                :host([disabled]),
                :host([disabled]:hover),
                :host([disabled]:active) {
                    opacity: 0.25;
                    cursor: default;
                    pointer-events: none;
                }

                ui-svg {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
            </style>

            <ui-svg>
                <slot></slot>
            </ui-svg>
        `, typeof this.removeRippleCallback != "function" && (this.removeRippleCallback = u(
      this,
      { centered: !0 }
    )), this.addEventListener("click", () => {
      this.ui.events.dispatch("click", this);
    });
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "noripple":
        i !== null ? typeof this.removeRippleCallback == "function" && (this.removeRippleCallback(), this.removeRippleCallback = null) : typeof this.removeRippleCallback != "function" && (this.removeRippleCallback = u(
          this,
          { centered: !0 }
        ));
        break;
    }
  }
};
r(m, "register", () => {
  customElements.get("ui-icon-button") || customElements.define("ui-icon-button", m);
}), r(m, "observedAttributes", ["noripple"]);
let Q = m;
const z = class z extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    width: 100%;
                    max-width: 65rem;
                    margin: 0 auto !important;
                    padding: var(--ui-spacing);
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r(z, "register", () => {
  customElements.get("ui-container") || customElements.define("ui-container", z);
});
let W = z;
const Et = a`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M7 17L16.8995 7.10051"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M7 7.00001L16.8995 16.8995"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, f = class f extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRenderCleanUp = new g(), this.ui = {
      root: this,
      /** @type {Events<T>} */
      events: new d(),
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        this.root.setAttribute(
          "title",
          t || ""
        );
      },
      get fullscreen() {
        return this.root.hasAttribute("fullscreen");
      },
      set fullscreen(t) {
        if (!t) {
          this.root.removeAttribute("fullscreen");
          return;
        }
        this.root.setAttribute("fullscreen", "");
      },
      /**
       * @param {boolean} modal
       * @param {boolean} [inert] - This will prevent the autofocus on input elements (default: true)
       */
      open(t = !1, e = !0) {
        const i = this.root.shadowRoot.querySelector("dialog"), s = i.inert;
        i.inert = e, t ? i.showModal() : i.show(), this.events.dispatch("open", null), i.inert = s;
      },
      close() {
        this.events.dispatch("close", null), this.root.shadowRoot.querySelector("dialog").close();
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRenderCleanUp.run(), this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host dialog * {
                    box-sizing: border-box;
                }

                dialog {
                    position: fixed !important;

                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);

                    max-width: 100%;
                    max-height: 100%;

                    margin: 0;
                    padding: 0;

                    border: none;
                    outline: none;

                    background-color: transparent;

                    -ms-overflow-style: none;
                    scrollbar-width: none;

                    z-index: 999;
                }

                dialog::-webkit-scrollbar {
                    display: none;
                }

                dialog::backdrop {
                    background-color: var(--ui-backdrop-bgColor);
                    backdrop-filter: var(--ui-backdropFilter);
                }

                dialog > .container {
                    background-color: var(--ui-bgColor);
                    color: var(--ui-color);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    padding: var(--ui-spacing);

                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;

                    position: relative;
                }

                :host([fullscreen]) dialog {
                    width: 100%;
                    height: 100%;
                }

                :host([fullscreen]) dialog > .container {
                    width: calc(100% - var(--ui-spacing) * 2);
                    height: calc(
                        100% -
                            (
                                env(safe-area-inset-top, 0) +
                                    env(safe-area-inset-bottom, 0) +
                                    (var(--ui-spacing) * 2)
                            )
                    );

                    margin: var(--ui-spacing);
                    margin-top: calc(env(safe-area-inset-top, 0) + var(--ui-spacing));
                    margin-bottom: calc(
                        env(safe-area-inset-bottom, 0) + var(--ui-spacing)
                    );
                }

                /*
                * Header Styles
                */

                .header {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;

                    border-top-right-radius: var(--ui-radius);
                    border-top-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-header-height);
                }

                .header h4 {
                    margin: auto 0;
                }

                :host([fullscreen]) .header {
                    z-index: 15;
                    position: absolute;
                    top: var(--ui-spacing);
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                /*
                * Content Styles
                */

                .content {
                    padding: var(--ui-spacing);
                    height: fit-content;
                    min-width: fit-content;
                    width: 100%;
                }

                :host([fullscreen]) .content {
                    z-index: 10;
                    position: absolute;
                    top: calc(var(--ui-dialog-header-height) + var(--ui-spacing));
                    bottom: calc(var(--ui-dialog-footer-height) + var(--ui-spacing));
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    padding: unset;
                    height: unset;
                    width: unset;
                    min-width: unset;
                }

                /*
                * Footer Styles
                */

                .footer {
                    margin-top: var(--ui-spacing);
                    border-bottom-right-radius: var(--ui-radius);
                    border-bottom-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-footer-height);
                }

                :host([fullscreen]) .footer {
                    z-index: 15;
                    position: absolute;
                    right: var(--ui-spacing);
                    bottom: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                .footer ui-flex-grid-row {
                    height: 100%;
                    flex-wrap: nowrap;
                    justify-content: flex-end;
                    align-items: center;
                }
            </style>

            <dialog>
                <div class="container">
                    <div class="header">
                        <span style="white-space: nowrap;">
                            <h3 name="title"></h3>
                        </span>

                        <ui-icon-button
                            style="width: var(--ui-dialog-header-height); height: 100%;"
                            ghost
                        >
                            ${Et}
                        </ui-icon-button>
                    </div>

                    <div class="content">
                        <slot></slot>
                    </div>

                    <div class="footer">
                        <ui-flex-grid-row gap="calc(var(--ui-spacing) / 2)">
                            <slot name="actions"></slot>
                        </ui-flex-grid-row>
                    </div>
                </div>
            </dialog>
        `;
    const t = this.shadowRoot.querySelector(".header ui-icon-button"), e = () => this.ui.close();
    t.addEventListener("click", e);
    const i = this.shadowRoot.querySelector("dialog"), s = (n) => n.preventDefault();
    i.addEventListener("cancel", s), this.shadowRenderCleanUp.add(() => {
      t.removeEventListener("click", e), i.removeEventListener("cancel", s);
    });
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        const s = this.shadowRoot.querySelector('[name="title"]');
        s.innerHTML = i || "";
        break;
    }
  }
};
r(f, "register", () => {
  customElements.get("ui-dialog") || customElements.define("ui-dialog", f);
}), r(f, "observedAttributes", ["title"]);
let G = f;
const v = class v extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /**
       * @type {Events<UIDrawerEvents>}
       */
      events: new d(),
      get open() {
        return this.root.hasAttribute("open");
      },
      set open(t) {
        if (!t) {
          this.root.removeAttribute("open");
          return;
        }
        this.root.setAttribute("open", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;

                    position: absolute !important;
                    z-index: 150;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;

                    overflow: hidden;

                    transition: left 0s ease 0.5s;
                }

                :host([open]) {
                    background-color: var(--ui-backdrop-bgColor);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);

                    left: 0;

                    transition: none;
                }

                aside {
                    position: absolute;
                    z-index: 150;
                    top: 0;
                    left: -100%;
                    width: var(--ui-drawer-width, fit-content);
                    max-width: 100%;
                    height: 100%;

                    overflow-x: hidden;
                    overflow-y: auto;
                    scroll-behavior: smooth;

                    -ms-overflow-style: none;
                    scrollbar-width: none;

                    background-color: var(--ui-card-bgColor);
                    color: var(--ui-card-color);

                    /*
                    background-color: var(--ui-backdrop-bgColor);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                    */

                    border-right: 1px solid var(--ui-card-borderColor);

                    transition: left 0.5s ease;
                }

                aside::-webkit-scrollbar {
                    display: none;
                }

                :host([open]) aside {
                    left: 0;
                }
            </style>

            <aside>
                <slot></slot>
            </aside>
        `, this.shadowRoot.querySelector("aside").addEventListener("click", (t) => t.stopPropagation()), this.addEventListener("click", () => this.ui.open = !1);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "open":
        i !== null ? this.ui.events.dispatch("open", this) : this.ui.events.dispatch("close", this);
        break;
    }
  }
};
r(v, "register", () => {
  customElements.get("ui-drawer") || customElements.define("ui-drawer", v);
}), r(v, "observedAttributes", ["open"]);
let _ = v;
const w = class w extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        if (!t) {
          this.root.removeAttribute("title");
          return;
        }
        this.root.setAttribute("title", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                ul {
                    list-style: none;
                    padding: var(--ui-spacing);
                    overflow: hidden;
                }

                ui-drawer-group-item:not(.visible) {
                    display: none;
                }
            </style>

            <ul>
                <ui-drawer-group-item class="ui-drawer-group-title">
                </ui-drawer-group-item>

                <slot></slot>
            </ul>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.setGroupTitle(i);
        break;
    }
  }
  /**
   * @param {string | null} title
   */
  setGroupTitle(t) {
    let e = this.shadowRoot.querySelector(
      ".ui-drawer-group-title"
    );
    if (!t) {
      e.classList.remove("visible");
      return;
    }
    e.classList.add("visible"), e.innerHTML = `
            <span
                style="
                    font-size: 1.5rem;
                    font-weight: 600;
                    font-variation-settings: var(--ui-heading-fontVariation);
                "
            >
                ${t}
            </span>
        `;
  }
};
r(w, "register", () => {
  customElements.get("ui-drawer-group") || customElements.define("ui-drawer-group", w);
}), r(w, "observedAttributes", ["title"]);
let I = w;
const $ = class $ extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                li {
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 1.5);
                    display: flex;
                    flex-direction: row;
                    flex-wrap: nowrap;
                }

                ::slotted(*) {
                    width: 100%;
                }
            </style>

            <li>
                <slot></slot>
            </li>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r($, "register", () => {
  customElements.get("ui-drawer-group-item") || customElements.define("ui-drawer-group-item", $);
});
let U = $;
const y = class y extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get flex() {
        return this.root.getAttribute("flex");
      },
      set flex(t) {
        if (!t) {
          this.root.removeAttribute("flex");
          return;
        }
        this.root.setAttribute("flex", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style name="flex">
                :host {
                    flex: 1;
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "flex":
        const s = this.shadowRoot.querySelector('style[name="flex"]');
        s.textContent = `
                    :host {
                        flex: ${i || 1};
                    }
                `;
        break;
    }
  }
};
r(y, "register", () => {
  customElements.get("ui-flex-grid-item") || customElements.define("ui-flex-grid-item", y);
}), r(y, "observedAttributes", ["flex"]);
let tt = y;
const k = class k extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get gap() {
        return this.root.getAttribute("gap");
      },
      set gap(t) {
        if (!t) {
          this.root.removeAttribute("gap");
          return;
        }
        this.root.setAttribute("gap", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                :host {
                    display: flex !important;
                    flex-flow: row nowrap;
                    position: relative !important;
                    width: 100%;
                }
            </style>

            <style name="gap">
                :host > ::slotted(*) {
                    margin: 0 0 !important;
                }
            </style>

            <style>
                :host > ::slotted(*:first-child) {
                    margin-left: 0 !important;
                }

                :host > ::slotted(*:last-child) {
                    margin-right: 0 !important;
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "gap":
        const s = this.shadowRoot.querySelector('style[name="gap"]');
        s.textContent = `
                    :host > ::slotted(*) {
                        margin: 0 ${i || 0} !important;
                    }
                `;
        break;
    }
  }
};
r(k, "register", () => {
  customElements.get("ui-flex-grid-row") || customElements.define("ui-flex-grid-row", k);
}), r(k, "observedAttributes", ["gap"]);
let et = k;
const C = class C extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get gap() {
        return this.root.getAttribute("gap");
      },
      set gap(t) {
        if (!t) {
          this.root.removeAttribute("gap");
          return;
        }
        this.root.setAttribute("gap", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                :host {
                    display: flex !important;
                    flex-flow: column nowrap;
                    position: relative !important;
                    width: 100%;
                    height: fit-content;
                }
            </style>

            <style name="gap">
                :host > ::slotted(*) {
                    margin: 0 0 !important;
                }
            </style>

            <style>
                :host > ::slotted(*:first-child) {
                    margin-top: 0 !important;
                }

                :host > ::slotted(*:last-child) {
                    margin-bottom: 0 !important;
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "gap":
        const s = this.shadowRoot.querySelector('style[name="gap"]');
        s.textContent = `
                    :host > ::slotted(*) {
                        margin: ${i} 0 !important;
                    }
                `;
        break;
    }
  }
};
r(C, "register", () => {
  customElements.get("ui-flex-grid") || customElements.define("ui-flex-grid", C);
}), r(C, "observedAttributes", ["gap"]);
let it = C;
const j = class j extends HTMLElement {
  constructor() {
    super();
    r(this, "shadowCSS", () => `
        :host {
            font-size: 1.1rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-text-primary-fontVariation);
        }
    `);
    r(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new g()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
r(j, "register", () => {
  customElements.get("ui-primary") || customElements.define("ui-primary", j);
});
let M = j;
const V = class V extends HTMLElement {
  constructor() {
    super();
    r(this, "shadowCSS", () => `
        :host {
            font-size: 0.9rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-text-secondary-fontVariation);
        }
    `);
    r(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new g()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
r(V, "register", () => {
  customElements.get("ui-secondary") || customElements.define("ui-secondary", V);
});
let p = V;
const x = class x extends HTMLElement {
  constructor() {
    super();
    r(this, "shadowCSS", () => `
        * {
            box-sizing: border-box;
        }

        :host {
            position: relative !important;
            display: flex !important;
            flex-direction: row;
            width: 100%;
            padding: var(--ui-spacing);
            border-radius: var(--ui-radius);
        }

        :host > .text {
            display: flex;
            flex: 1;
            flex-direction: column;
            justify-content: center;
            margin-right: var(--ui-spacing);
        }

        :host > .input {
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
    `);
    r(this, "shadowTemplate", () => a`
        <span class="text">
            <ui-primary></ui-primary>
            <ui-secondary></ui-secondary>
        </span>

        <span class="input">
            <slot name="input"></slot>
            <slot></slot>
        </span>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new g(),
      /** @private */
      running: !1,
      /**
       * @private
       * @type {(() => void|Promise<void>) | null}
       */
      removeRipple: null,
      /** @private */
      onClick: async () => {
        this.ui.getInputSlot().forEach((e) => e.click());
      },
      /** @private */
      onInputClick: async (e) => {
        e.stopPropagation();
      },
      getPrimary() {
        return this.root.getAttribute("primary");
      },
      /**
       * @param {string | null} value
       */
      setPrimary(e) {
        if (e === null) {
          this.root.removeAttribute("primary");
          return;
        }
        this.root.setAttribute("primary", e);
      },
      getSecondary() {
        return this.root.getAttribute("secondary");
      },
      /**
       * @param {string | null} value
       */
      setSecondary(e) {
        if (e === null) {
          this.root.removeAttribute("secondary");
          return;
        }
        this.root.setAttribute("secondary", e);
      },
      /**
       * @returns {HTMLElement[]}
       */
      getInputSlot() {
        return [...this.root.querySelectorAll('[slot="input"]')];
      },
      enableRipple() {
        this.removeRipple || (this.removeRipple = u(this.root), this.root.style.cursor = "pointer", this.startInputHandling());
      },
      disableRipple() {
        this.removeRipple && this.removeRipple(), this.stopInputHandling();
      },
      /** @private */
      startInputHandling() {
        this.running || (this.root.addEventListener("click", this.onClick), this.getInputSlot().forEach((e) => {
          e.addEventListener("click", this.onInputClick);
        }), this.running = !0);
      },
      /**
       * @private
       */
      stopInputHandling() {
        this.root.removeEventListener("click", this.onClick), this.getInputSlot().forEach((e) => {
          e.removeEventListener("click", this.onInputClick);
        }), this.running = !1;
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "ripple":
        s !== null ? this.ui.enableRipple() : this.ui.disableRipple();
        break;
      case "primary":
        this.shadowRoot.querySelector("ui-primary").innerHTML = s || "";
        break;
      case "secondary":
        this.shadowRoot.querySelector("ui-secondary").innerHTML = s || "";
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
r(x, "register", () => {
  M.register(), p.register(), customElements.get("ui-label") || customElements.define("ui-label", x);
}), r(x, "observedAttributes", ["ripple", "secondary", "primary"]);
let ot = x;
const R = class R extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new d(),
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        if (!t) {
          this.root.removeAttribute("title");
          return;
        }
        this.root.setAttribute("title", t);
      },
      get type() {
        return this.root.getAttribute("type");
      },
      set type(t) {
        if (!t) {
          this.root.removeAttribute("type");
          return;
        }
        this.root.setAttribute("type", t);
      },
      get value() {
        return this.root.shadowRoot.querySelector("input").value;
      },
      set value(t) {
        this.root.shadowRoot.querySelector("input").value = t;
      },
      get placeholder() {
        return this.root.getAttribute("placeholder");
      },
      set placeholder(t) {
        if (!t) {
          this.root.removeAttribute("placeholder");
          return;
        }
        this.root.setAttribute("placeholder", t);
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get min() {
        return this.root.shadowRoot.querySelector("input").min;
      },
      set min(t) {
        this.root.shadowRoot.querySelector("input").min = t;
      },
      get max() {
        return this.root.shadowRoot.querySelector("input").max;
      },
      set max(t) {
        this.root.shadowRoot.querySelector("input").max = t;
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                input {
                    width: 100%;
                    display: block;
                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
                    border: none !important;
                    border-radius: inherit;
                    outline: none !important;
                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                    accent-color: var(--ui-primary-bgColor);
                    background-color: transparent !important;
                }

                .container {
                    width: 100%;
                    border: none;
                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);
                    transition: border-color 0.25s linear;
                }

                .container:has(input:focus) {
                    border-color: var(--ui-primary-bgColor);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive-bgColor);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }
            </style>

            <div class="container">
                <slot name="title"></slot>
                <input />
            </div>
        `;
    const t = this.shadowRoot.querySelector("input");
    t.type = this.getAttribute("type") || "text", t.oninput = () => {
      this.ui.events.dispatch("input", t.value);
    }, t.onchange = () => {
      this.ui.events.dispatch("change", t.value);
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.setTitle(i);
        break;
      case "type":
        this.setType(i);
        break;
      case "value":
        this.setValue(i);
        break;
      case "placeholder":
        this.setPlaceholder(i);
        break;
      case "invalid":
        this.setInvalid(i);
        break;
      case "min":
        this.setMin(i);
        break;
      case "max":
        this.setMax(i);
        break;
    }
  }
  /**
   * @param {string | null} title
   */
  setTitle(t) {
    let e = this.querySelector('[slot="title"]');
    !t && e && this.removeChild(e), t && (e || (e = new p(), e.slot = "title", this.appendChild(e)), e.innerHTML = t);
  }
  /**
   * @param {string | null} type
   */
  setType(t) {
    this.shadowRoot.querySelector("input").type = t !== null ? t : "";
  }
  /**
   * @param {string | null} value
   */
  setValue(t) {
    this.shadowRoot.querySelector("input").value = t;
  }
  /**
   * @param {string | null} placeholder
   */
  setPlaceholder(t) {
    this.shadowRoot.querySelector("input").placeholder = t || "";
  }
  /**
   * @param {string | null} invalid
   */
  setInvalid(t) {
    this.shadowRoot.querySelector("input").ariaInvalid = t;
  }
  /**
   * @param {string | null} min
   */
  setMin(t) {
    this.shadowRoot.querySelector("input").min = t;
  }
  /**
   * @param {string | null} max
   */
  setMax(t) {
    this.shadowRoot.querySelector("input").max = t;
  }
};
r(R, "register", () => {
  customElements.get("ui-input") || customElements.define("ui-input", R);
}), r(R, "observedAttributes", [
  "title",
  "type",
  "value",
  "placeholder",
  "invalid",
  "min",
  "max"
]);
let rt = R;
const St = a`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M17 9.5L12 14.5L7 9.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, P = class P extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get value() {
        return this.root.getAttribute("value");
      },
      set value(t) {
        if (!t) {
          this.root.removeAttribute("value");
          return;
        }
        this.root.setAttribute("value", t);
      },
      get selected() {
        return this.root.hasAttribute("selected");
      },
      set selected(t) {
        if (!t) {
          this.root.removeAttribute("selected");
          return;
        }
        this.root.setAttribute("selected", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                :host {
                    display: none;
                    align-items: center;

                    padding: var(--ui-spacing);
                    padding-right: 2.5rem;

                    height: calc(1em * var(--ui-lineHeight) + var(--ui-spacing) * 2);

                    white-space: nowrap;
                    text-overflow: ellipsis;

                    transition:
                        background-color 0.25s linear,
                        color 0.25s linear;

                    overflow: hidden;
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
};
r(P, "register", () => {
  customElements.get("ui-select-option") || customElements.define("ui-select-option", P);
});
let T = P;
const D = class D extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /**
       *  @type {Events<UISelectEvents>}
       */
      events: new d(),
      get open() {
        return this.root.hasAttribute("open");
      },
      set open(t) {
        if (!t) {
          this.root.removeAttribute("open");
          return;
        }
        this.root.setAttribute("open", "");
      },
      /**
       * @returns {UISelectOption[]}
       */
      options() {
        return [...this.root.children].filter(
          (t) => t instanceof T
        );
      },
      /**
       * @returns {UISelectOption | null}
       */
      selected() {
        try {
          return this.options().find(
            (t) => t.ui.selected
          ) || null;
        } catch {
          return null;
        }
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    --ui-bgColor: "transparent";
                    --items-length: 0;

                    position: relative !important;
                    display: block !important;

                    width: 100%;
                    height: calc(1em * var(--ui-lineHeight) + var(--ui-spacing) * 2);
                    transition: height 0.25s ease;

                    background-color: var(--ui-bgColor);
                    color: var(--ui-color);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    line-height: 1.15;

                    overflow: hidden;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-select-fontVariation);
                }

                .options {
                    cursor: pointer;
                    display: none;
                    display: flex;
                    flex-direction: column;
                    min-height: 100%;
                }

                .icon {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 2.5rem;
                    height: 100%;
                    color: var(--ui-primary-bgColor);
                }

                ::slotted(ui-select-option) {
                    display: flex;
                }

                :host(.open) {
                    height: calc(
                        (1em * var(--ui-lineHeight) + var(--ui-spacing) * 2) *
                            var(--items-length)
                    );
                }

                :host(.open) .options {
                    display: block;
                }

                :host(.open) .icon {
                    display: none;
                }

                :host(.open) ::slotted(ui-select-option[selected]) {
                    background-color: var(--ui-primary-bgColor);
                    color: var(--ui-primary-color);
                }

                :host(.open) ::slotted(ui-select-option:not([selected]):hover) {
                    background-color: hsla(var(--ui-color-hsl), 0.1);
                }

                :host(:not(.open))
                    .options:has(> ::slotted(ui-select-option[selected])) {
                    display: block;
                }

                :host(:not(.open)) ::slotted(ui-select-option:not([selected])) {
                    display: none;
                }
            </style>

            <div class="options">
                <div class="icon"><ui-svg>${St}</ui-svg></div>

                <slot></slot>
            </div>
        `;
    const t = (i) => {
      const s = async (n) => {
        (n.composedPath() || []).forEach((l) => {
          l instanceof T && ([...this.querySelectorAll("ui-select-option")].forEach(
            (K) => K.removeAttribute("selected")
          ), l.setAttribute("selected", ""), this.ui.events.dispatch("change", l));
        });
      };
      this.classList.toggle("open") ? (i.stopPropagation(), this.addEventListener("click", s)) : setTimeout(
        () => this.removeEventListener("click", s)
      );
    };
    this.shadowRoot.querySelector(".options").addEventListener("click", t), this.style.setProperty(
      "--items-length",
      this.querySelectorAll("ui-select-option").length.toString()
    );
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r(D, "register", () => {
  customElements.get("ui-select") || customElements.define("ui-select", D);
});
let st = D;
const Lt = a`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <g clip-path="url(#clip0_15_152)">
                <rect width="24" height="24" fill="none"></rect>
                <circle
                    cx="10.5"
                    cy="10.5"
                    r="6.5"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path
                    d="M19.6464 20.3536C19.8417 20.5488 20.1583 20.5488 20.3536 20.3536C20.5488 20.1583 20.5488 19.8417 20.3536 19.6464L19.6464 20.3536ZM20.3536 19.6464L15.3536 14.6464L14.6464 15.3536L19.6464 20.3536L20.3536 19.6464Z"
                    fill="currentColor"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_15_152">
                    <rect width="24" height="24" fill="none"></rect>
                </clipPath>
            </defs>
        </g>
    </svg>
`, A = class A extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new d(),
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      },
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        if (!t) {
          this.root.removeAttribute("title");
          return;
        }
        this.root.setAttribute("title", t);
      },
      get value() {
        return this.root.shadowRoot.querySelector("input").value;
      },
      set value(t) {
        this.root.shadowRoot.querySelector("input").value = t;
      },
      get placeholder() {
        return this.root.getAttribute("placeholder");
      },
      set placeholder(t) {
        if (!t) {
          this.root.removeAttribute("placeholder");
          return;
        }
        this.root.setAttribute("placeholder", t);
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get nosubmit() {
        return this.root.hasAttribute("nosubmit");
      },
      set nosubmit(t) {
        if (!t) {
          this.root.removeAttribute("nosubmit");
          return;
        }
        this.root.setAttribute("nosubmit", "");
      },
      get storage() {
        return this.root.hasAttribute("storage");
      },
      set storage(t) {
        if (!t) {
          this.root.removeAttribute("storage");
          return;
        }
        this.root.setAttribute("storage", "");
      },
      get storageprefix() {
        return this.root.getAttribute("storageprefix");
      },
      set storageprefix(t) {
        if (!t) {
          this.root.removeAttribute("storageprefix");
          return;
        }
        this.root.setAttribute("storageprefix", t);
      },
      get storagekey() {
        return this.root.getAttribute("storagekey");
      },
      set storagekey(t) {
        if (!t) {
          this.root.removeAttribute("storagekey");
          return;
        }
        this.root.setAttribute("storagekey", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                input {
                    width: 100%;
                    display: block;
                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
                    border: none !important;
                    border-radius: inherit;
                    outline: none !important;
                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                    accent-color: var(--ui-primary-bgColor);
                    background-color: transparent !important;
                }

                :host(:not([nosubmit])) input {
                    width: calc(100% - 2rem);
                }

                .container {
                    position: relative;
                    width: 100%;
                    border: none;
                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);
                    transition: border-color 0.25s linear;
                    background-color: var(--ui-backdrop-bgColor);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                }

                .container:has(input:focus) {
                    border-color: var(--ui-primary-bgColor);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive-bgColor);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }

                ui-icon-button {
                    position: absolute;
                    top: 0;
                    right: 0;
                    height: 100%;
                    border-top-left-radius: 0;
                    border-bottom-left-radius: 0;
                }
            </style>

            <div class="container">
                <slot name="title"></slot>
                <input type="search" />
                <ui-icon-button name="submit" ghost>${Lt}</ui-icon-button>
            </div>
        `;
    const t = this.shadowRoot.querySelector('[name="submit"]'), e = this.shadowRoot.querySelector("input");
    e.type = "search", e.addEventListener("keydown", async (s) => {
      this.ui.nosubmit || s.key === "Enter" && t.click();
    });
    let i = null;
    e.addEventListener("input", async () => {
      this.ui.storage && (i !== null && clearTimeout(i), i = setTimeout(() => {
        localStorage.setItem(
          this.ui.storageprefix + this.ui.storagekey,
          e.value
        ), i = null;
      }, 250)), this.ui.events.dispatch("input", e.value);
    }), e.addEventListener("change", async () => {
      this.ui.events.dispatch("change", e.value);
    }), this.shadowRoot.querySelector("ui-icon-button").addEventListener("click", () => {
      this.ui.events.dispatch("submit", e.value);
    });
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.setTitle(i);
        break;
      case "value":
        this.setValue(i);
        break;
      case "placeholder":
        this.setPlaceholder(i);
        break;
      case "invalid":
        this.setInvalid(i);
        break;
      case "nosubmit":
        this.setNoSubmit(i);
        break;
      case "storagekey":
        this.setStorageKey(i);
        break;
    }
  }
  /**
   * @param {string | null} title
   */
  setTitle(t) {
    let e = this.querySelector('[slot="title"]');
    !t && e && this.removeChild(e), t && (e || (e = new p(), e.slot = "title", this.appendChild(e)), e.innerHTML = t);
  }
  /**
   * @param {string | null} value
   */
  setValue(t) {
    this.shadowRoot.querySelector("input").value = t;
  }
  /**
   * @param {string | null} placeholder
   */
  setPlaceholder(t) {
    this.shadowRoot.querySelector("input").placeholder = t || "";
  }
  /**
   * @param {string | null} invalid
   */
  setInvalid(t) {
    this.shadowRoot.querySelector("input").ariaInvalid = t;
  }
  /**
   * @param {string | null} nosubmit
   */
  setNoSubmit(t) {
    const e = this.shadowRoot.querySelector('[name="submit"]');
    if (t === null) {
      e.style.display = null;
      return;
    }
    e.style.display = "none";
  }
  /**
   * @param {string | null} value
   */
  setStorageKey(t) {
    if (!this.ui.storage) return;
    const e = this.shadowRoot.querySelector("input");
    e.value = localStorage.getItem(
      this.ui.storageprefix + t
    ) || "";
  }
};
r(A, "register", () => {
  customElements.get("ui-search") || customElements.define("ui-search", A);
}), r(A, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "nosubmit",
  "storage",
  "storageprefix",
  "storagekey"
]);
let nt = A;
const E = class E extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      /**
       * @type {{
       *  [key: string]: {
       *      [key: string]: string;
       *  };
       * }}
       */
      data: {},
      /**
       * @type {Events<{ "change": import(".").UILangType}>}
       */
      events: new d(),
      get current() {
        return this.root.getAttribute("current");
      },
      set current(t) {
        if (!t) {
          this.root.removeAttribute("current");
          return;
        }
        this.root.setAttribute("current", t);
      },
      /** @returns {import(".").UILangType} */
      fallback() {
        return this.root.querySelector("ui-lang-type[fallback]");
      },
      /**
       * @param {string} group
       * @param {string} key
       */
      get(t, e) {
        var i, s;
        return ((s = (i = this.data) == null ? void 0 : i[t]) == null ? void 0 : s[e]) || null;
      }
    }, this.shadowRender();
  }
  shadowRender() {
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "current":
        i !== null && this.setCurrent(i);
        break;
    }
  }
  /**
   * @private
   * @param {string} name
   */
  async setCurrent(t) {
    const e = this.querySelector(`ui-lang-type[name="${t}"]`) || this.ui.fallback();
    if (e) {
      if (!e.ui.getHref()) throw "Missing href attribute!";
      try {
        this.data = (await fetch(e.ui.getHref())).json();
      } catch (i) {
        console.error(i);
      }
      this.ui.events.dispatch("change", e);
    }
  }
};
r(E, "register", () => {
  customElements.get("ui-lang") || customElements.define("ui-lang", E);
}), r(E, "observedAttributes", ["current"]);
let at = E;
const F = class F extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      get name() {
        return this.root.getAttribute("name");
      },
      set name(t) {
        if (!t) {
          this.root.removeAttribute("name");
          return;
        }
        this.root.setAttribute("name", t);
      },
      get href() {
        return this.root.getAttribute("href");
      },
      set href(t) {
        if (!t) {
          this.root.removeAttribute("href");
          return;
        }
        this.root.setAttribute("href", t);
      },
      get fallback() {
        return this.root.hasAttribute("fallback");
      },
      set fallback(t) {
        if (!t) {
          this.root.removeAttribute("fallback");
          return;
        }
        this.root.setAttribute("fallback", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r(F, "register", () => {
  customElements.get("ui-lang-type") || customElements.define("ui-lang-type", F);
});
let lt = F;
const O = class O extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                :host {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                }

                .background {
                    z-index: 999;
                    position: absolute;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                    background-color: var(--ui-backdrop-bgColor);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                }

                .spinner {
                    z-index: 1000;
                    content: "";
                    box-sizing: border-box;
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    width: 2.5rem;
                    height: 2.5rem;
                    margin-top: -1.25rem;
                    margin-left: -1.25rem;
                    border-radius: 50%;
                    border: 2px solid var(--ui-borderColor);
                    border-top-color: var(--ui-primary-bgColor);
                    animation: spinner 0.6s linear infinite;
                }

                @keyframes spinner {
                    to {
                        transform: rotate(360deg);
                    }
                }
            </style>

            <div class="background"></div>
            <div class="spinner"></div>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r(O, "register", () => {
  customElements.get("ui-spinner") || customElements.define("ui-spinner", O);
});
let ct = O;
const N = class N extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get name() {
        return this.root.getAttribute("name");
      },
      set name(t) {
        if (!t) {
          this.root.removeAttribute("name");
          return;
        }
        this.root.setAttribute("name", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                :host {
                    display: block !important;
                    position: absolute !important;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    opacity: 0;
                    animation: fade-in 0.5s;
                    transition: opacity 0.5s ease;
                }

                :host(:last-child) {
                    opacity: 1;
                }

                @keyframes fade-in {
                    0% {
                        opacity: 0;
                    }
                    100% {
                        opacity: 1;
                    }
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
r(N, "register", () => {
  customElements.get("ui-stack-layout-page") || customElements.define("ui-stack-layout-page", N);
});
let dt = N;
const Y = class Y extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.pages = {}, this.stack = [], this.onpopstate = () => this.goBack(), this.ui = {
      root: this,
      /**
       * @type {Events<{
       *  "change": {
       *      oldPage: UIStackLayoutPage | null,
       *      newPage: UIStackLayoutPage | null
       *  }
       * }>}
       */
      events: new d(),
      lock: !1,
      size() {
        return this.root.stack.length;
      },
      clear() {
        for (; this.size() > 0; )
          this.root.removeChild(this.root.stack.pop());
      },
      goBack() {
        if (!(!this.size() || this.lock)) {
          if (this.root.onpopstate !== null) {
            history.back();
            return;
          }
          this.root.goBack();
        }
      },
      /**
       * @param {string} pageName
       * @param {() => (UIStackLayoutPage)} cb
       */
      register(t, e) {
        this.root.pages[t] = e;
      },
      /**
       * @param {string} pageName
       */
      unregister(t) {
        delete this.root.pages[t];
      },
      /**
       * @param {string} pageName
       * @param {((page: UIStackLayoutPage) => void|Promise<void>) | null} [cb]
       * @param {boolean} [keepOldPage]
       */
      set(t, e = null, i = !1) {
        if (this.lock) return;
        const s = this.root.pages[t]();
        this.root.stack.push(this.root.appendChild(s)), typeof e == "function" && setTimeout(() => e(s));
        let n = null;
        this.size() > 1 && !i && (n = this.root.stack[this.root.stack.length - 2], n.parentElement.removeChild(n)), this.root.dispatchChangeEvent(n), this.root.onpopstate !== null && history.pushState(null, document.title, location.href);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>
                :host {
                    display: block !important;
                    position: relative !important;
                    width: 100%;
                    height: 100%;
                }
            </style>

            <slot></slot>
        `;
  }
  connectedCallback() {
    window.addEventListener("popstate", this.onpopstate);
  }
  disconnectedCallback() {
    window.removeEventListener("popstate", this.onpopstate);
  }
  goBack() {
    const t = this.removeChild(this.stack.pop());
    console.debug(t, this.stack), this.stack.length > 0 && (this.stack[this.stack.length - 1].parentElement || this.appendChild(
      this.stack[this.stack.length - 1]
    )), this.dispatchChangeEvent(t);
  }
  /**
   * @param {UIStackLayoutPage} oldChild
   */
  async dispatchChangeEvent(t) {
    this.ui.events.dispatch("change", {
      newPage: this.stack[this.stack.length - 1] || null,
      oldPage: t || this.stack[this.stack.length - 2] || null
    });
  }
};
r(Y, "register", () => {
  customElements.get("ui-stack-layout") || customElements.define("ui-stack-layout", Y);
});
let ht = Y;
const S = class S extends HTMLElement {
  constructor() {
    super(), this.ui = {
      /** @private */
      root: this,
      /**
       * @type {boolean}
       */
      useStorage: !1,
      /**
       * @type {string | null}
       */
      storagePrefix: null,
      /**
       * @type {any}
       */
      stores: {},
      /**
       * @type {Events<T>}
       */
      events: new d(),
      /**
       * @template {keyof T} K
       * @param {K} key
       * @returns {T[K]}
       */
      get(t) {
        return this.stores[t];
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {T[K]} data
       * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
       * `this.enableLocalStorage` flag needs to be set to `true` for this to work
       */
      set(t, e, i = !1) {
        if (i && this.storagePrefix) {
          const s = JSON.parse(
            localStorage.getItem(
              (this.storagePrefix || "") + t.toString()
            ) || "null"
          );
          this.stores[t] = s ?? e;
        } else
          this.stores[t] = e;
        this.useStorage && localStorage.setItem(
          (this.storagePrefix || "") + t.toString(),
          JSON.stringify(this.stores[t])
        ), this.events.dispatch(t, this.stores[t]);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => any} callback
       */
      update(t, e) {
        if (typeof e != "function")
          throw "callback is not a function";
        this.set(t, e(this.stores[t]));
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => void|Promise<void>} callback
       * @param {boolean} [trigger] - this will run the callback first
       * @returns {() => void} clean up function
       */
      on(t, e, i = !1) {
        if (typeof e != "function")
          throw "callback is not a function";
        return i && e(this.get(t)), this.events.on(t, e);
      }
    };
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "use-storage":
        this.ui.useStorage = i !== null;
        break;
      case "storage-prefix":
        this.ui.storagePrefix = i;
        break;
    }
  }
};
r(S, "register", () => {
  customElements.get("ui-store") || customElements.define("ui-store", S);
}), r(S, "observedAttributes", ["use-storage", "storage-prefix"]);
let ut = S;
const L = class L extends HTMLElement {
  constructor() {
    super(), this.ui = {
      /**
       * @private
       * @type {MediaQueryList | null}
       */
      media: null,
      /**
       * @type {{ name: string; href: string } | null}
       */
      currentTheme: null,
      /**
       * @type {{ [key: string]: string }}
       */
      themes: {},
      /**
       * @param {HTMLElement} [element]
       */
      getMode(t = document.body) {
        return t.getAttribute("data-theme");
      },
      /**
       * @param {UIThemeHandlerMode} mode
       * @param {HTMLElement} [element]
       */
      setMode(t, e = document.body) {
        switch (t) {
          case "dark":
            e.setAttribute("data-theme", t);
            break;
          case "light":
            e.setAttribute("data-theme", t);
            break;
          default:
            e.removeAttribute("data-theme");
        }
      },
      /**
       * @private
       * @param {MediaQueryListEvent | MediaQueryList} ev
       */
      mediaChangeHandler: (t) => {
        t.matches ? document.body.setAttribute("data-theme", "dark") : document.body.setAttribute("data-theme", "light");
      },
      getAuto() {
        return !!this.media;
      },
      /**
       * @param {boolean} state
       * @param {HTMLElement} [element]
       */
      setAuto(t, e = document.body) {
        if (!t) {
          if (!this.media) return;
          this.media.removeEventListener(
            "change",
            this.mediaChangeHandler
          ), this.media = null;
          return;
        }
        if (this.setMode(null, e), this.media) {
          this.mediaChangeHandler(this.media);
          return;
        }
        this.media = window.matchMedia("(prefers-color-scheme: dark)"), this.media.addEventListener("change", this.mediaChangeHandler), this.mediaChangeHandler(this.media);
      },
      /**
       * @param {string} name
       * @param {string} href
       */
      addTheme(t, e) {
        this.themes[t] = e;
      },
      /**
       * @param {string} name
       */
      setTheme(t) {
        var i;
        if (!this.themes[t])
          throw `theme "${t}" is missing in this.themes`;
        if (((i = this.currentTheme) == null ? void 0 : i.name) == t)
          return;
        {
          const s = document.getElementById("theme");
          s && (document.head.removeChild(s), this.currentTheme = null);
        }
        const e = document.createElement("link");
        e.id = "theme", e.rel = "stylesheet", e.href = this.themes[t], document.head.appendChild(e), this.currentTheme = { name: t, href: this.themes[t] };
      }
    };
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "auto":
        this.ui.setAuto(i !== null);
        break;
      case "mode":
        this.ui.setMode(i);
        break;
    }
  }
};
r(L, "register", () => {
  customElements.get("ui-theme-handler") || customElements.define("ui-theme-handler", L);
}), r(L, "observedAttributes", ["auto", "mode"]);
let pt = L;
const J = class J extends HTMLElement {
  constructor() {
    super();
    r(this, "shadowCSS", () => `
        :host {
            width: 100%;
            height: 100%;
            color: inherit;
        }

        svg {
            width: 100%;
            height: 100%;
        }
    `);
    r(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new g()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
r(J, "register", () => {
  customElements.get("ui-svg") || customElements.define("ui-svg", J);
});
let gt = J;
function Ht() {
  X.register(), Z.register(), B.register(), Q.register(), W.register(), G.register(), U.register(), I.register(), _.register(), tt.register(), et.register(), it.register(), rt.register(), nt.register(), T.register(), st.register(), lt.register(), at.register(), ct.register(), ht.register(), dt.register(), ut.register(), gt.register(), ot.register(), M.register(), p.register(), pt.register();
}
export {
  Z as UIAppBar,
  X as UIAppBarItem,
  B as UIButton,
  W as UIContainer,
  G as UIDialog,
  _ as UIDrawer,
  I as UIDrawerGroup,
  U as UIDrawerGroupItem,
  it as UIFlexGrid,
  tt as UIFlexGridItem,
  et as UIFlexGridRow,
  Q as UIIconButton,
  rt as UIInput,
  ot as UILabel,
  at as UILang,
  lt as UILangType,
  M as UIPrimary,
  nt as UISearch,
  p as UISecondary,
  st as UISelect,
  T as UISelectOption,
  ct as UISpinner,
  ht as UIStackLayout,
  dt as UIStackLayoutPage,
  ut as UIStore,
  pt as UIThemeHandler,
  Mt as js,
  Ht as register
};
