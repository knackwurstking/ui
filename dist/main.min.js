var Vt = Object.defineProperty;
var qt = (o) => {
  throw TypeError(o);
};
var Yt = (o, t, e) => t in o ? Vt(o, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : o[t] = e;
var s = (o, t, e) => Yt(o, typeof t != "symbol" ? t + "" : t, e), Xt = (o, t, e) => t.has(o) || qt("Cannot " + e);
var f = (o, t, e) => (Xt(o, t, "read from private field"), e ? e.call(o) : t.get(o)), zt = (o, t, e) => t.has(o) ? qt("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(o) : t.set(o, e);
class Pt {
  constructor() {
    this.callbacks = [];
  }
  /**
   * @param {(() => void|Promise<void>)[]} cb
   */
  add(...t) {
    this.callbacks.push(...t);
  }
  run() {
    for (let t = 0; t < this.callbacks.length; t++)
      if (this.callbacks[t] !== null)
        try {
          this.callbacks[t](), this.callbacks[t] = null;
        } catch (e) {
          console.error("cleanup error:", e);
        }
    this.callbacks = this.callbacks.filter((t) => t !== null);
  }
}
function Bt(o, t, { onDragStart: e = null, onDragging: i = null, onDragEnd: r = null } = {}) {
  const l = () => {
    const h = [...o.children].indexOf(t);
    t.draggable = !0, t.ondragstart = (d) => {
      d.dataTransfer.effectAllowed = "move", d.dataTransfer.dropEffect = "move", e && e(h);
    }, t.ondragover = (d) => (d.preventDefault(), !1), t.ondragenter = (d) => {
      d.preventDefault(), [...o.children].forEach((m, Y) => {
        if (Y === h) {
          m.style.background = "var(--ui-primary-bgColor)", m.style.color = "var(--ui-primary-color)";
          return;
        }
        m.style.background = "inherit", m.style.color = "inherit";
      }), i && i(h);
    }, t.ondrop = (d) => {
      d.preventDefault(), d.dataTransfer.dropEffect = "move", r && r(h), [...o.children].forEach((m) => {
        m.style.background = "inherit", m.style.color = "inherit";
      });
    };
  }, u = () => {
    t.draggable = !1, t.ondragstart = null, t.ondragover = null, t.ondragenter = null, t.ondrop = null;
  };
  return l(), {
    /**
     * @param {DraggableNative_Options} options
     */
    update(c) {
      Object.hasOwn(c, "onDragStart") && (e = c.onDragStart), Object.hasOwn(c, "onDragging") && (i = c.onDragStart), Object.hasOwn(c, "onDragEnd") && (r = c.onDragEnd);
    },
    destroy: u
  };
}
function Zt(o, { onDragEnd: t = null, onDragStart: e = null } = {}) {
  let i = null, r = null, l = null, u = null, c = null, h = !1, d = null, m = null;
  const Y = (n) => {
    !i && Array.from(n.currentTarget.classList).includes("draggable") && (l = n.clientX, u = n.clientY, r = (/* @__PURE__ */ new Date()).getTime(), i = n.currentTarget, c || clearTimeout(c), c = setTimeout(() => {
      d = i.style.color, m = i.style.backgroundColor, i.style.color = "var(--ui-primary-color)", i.style.backgroundColor = "var(--ui-primary-bgColor)", o.classList.add("dragging"), h = !0, e && e();
    }, 200));
  }, Tt = (n) => {
    if (!r || !i) return;
    if (!h && (/* @__PURE__ */ new Date()).getTime() - r < 200) {
      const Mt = Math.abs(l - n.clientX), Ht = Math.abs(u - n.clientY);
      if ((Mt > Ht ? Mt : Ht) < 24)
        return;
      I();
      return;
    }
    n.preventDefault(), h || (h = !0, e && e());
    const v = !!n.targetTouches && n.targetTouches[0] || n;
    let p = document.elementFromPoint(v.clientX, v.clientY);
    for (; !p.classList.contains("draggable") && p.parentElement; )
      p = p.parentElement;
    p.classList.contains("draggable") && Ot(i, p);
  }, I = () => {
    c !== null && (clearTimeout(c), c = null), i && (i.style.color = d, i.style.backgroundColor = m, i = null), r = null, o.classList.remove("dragging"), h && (t && t(), h = !1);
  };
  function Ot(n, v) {
    Ft(n, v) ? o.insertBefore(n, v) : o.insertBefore(n, v.nextElementSibling);
  }
  function Ft(n, v) {
    let p = n.previousElementSibling;
    for (; p; ) {
      if (p === v)
        return !0;
      p = p.previousElementSibling;
    }
    return !1;
  }
  return (() => {
    Array.from(o.children).forEach(
      (n) => {
        n.classList.add("draggable"), n.onmousedown = Y, n.ontouchstart = Y, n.onmousemove = Tt, n.ontouchmove = Tt, n.onmouseup = I, n.ontouchend = I;
      }
    );
  })(), {
    /** @param {DraggableMobile_Options} options */
    update: (n) => {
      Object.hasOwn(n, "onDragStart") && (e = n.onDragStart), Object.hasOwn(n, "onDragEnd") && (t = n.onDragEnd);
    },
    destroy: () => {
      Array.from(o.children).forEach(
        (n) => {
          n.classList.remove("draggable"), n.onmousedown = null, n.ontouchstart = null, n.onmousemove = null, n.ontouchmove = null, n.onmouseup = null, n.ontouchend = null;
        }
      );
    }
  };
}
const Nt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createMobile: Zt,
  createNative: Bt
}, Symbol.toStringTag, { value: "Module" }));
var g;
class b {
  constructor() {
    /**
     * @type {any}
     */
    zt(this, g, {});
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  on(t, e) {
    if (typeof e != "function")
      throw `invalid event listener passed for "${t.toString()}" event!`;
    return f(this, g)[t] || (f(this, g)[t] = []), f(this, g)[t].push(e), () => {
      this.off(t, e);
    };
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>)} listener
   */
  off(t, e) {
    if (!f(this, g)[t])
      throw `no listeners found for ${t.toString()}, there is nothing to delete`;
    let i = !1, r = 0;
    for (const l of f(this, g)[t])
      l === e && (f(this, g)[t].splice(r, 1), i = !0), r++;
    if (!i)
      throw `listener not found for ${t.toString()}, there is nothing to delete`;
    return this;
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   */
  dispatch(t, e) {
    if (e === void 0) throw "data is undefined!";
    if (f(this, g)[t])
      for (const i of f(this, g)[t])
        i(e);
    return this;
  }
}
g = new WeakMap();
const jt = {
  color: "var(--ui-ripple-color, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  useClick: !1
};
function y(o, t = {}) {
  t = { ...jt, ...t };
  let e;
  const i = (c) => {
    e = tt(c, t);
  }, r = () => {
    et(e);
  }, l = () => {
    o.classList.add("ripple-container"), o.style.overflow = "hidden", t.useClick === !0 ? o.addEventListener("click", (c) => {
      e = tt(c, t), et(e);
    }) : (o.addEventListener("pointerdown", i), o.addEventListener("pointerup", r), o.addEventListener("pointerleave", r));
  }, u = () => {
    o.classList.remove("ripple-container"), o.removeEventListener("pointerdown", i), o.removeEventListener("pointerup", r), o.removeEventListener("pointerleave", r);
  };
  return l(), {
    update: (c) => {
      t = {
        ...t,
        ...c
      }, u(), l();
    },
    destroy: u
  };
}
function tt(o, t) {
  const e = document.createElement("div");
  e.classList.add("ripple"), e.style.position = "absolute", e.style.color = "inherit", e.style.borderRadius = "50%", e.style.pointerEvents = "none", e.style.width = "100px", e.style.height = "100px", e.style.marginTop = "-50px", e.style.marginLeft = "-50px", e.style.opacity = `${t.opacity}`, e.style.backgroundColor = t.color, e.style.transform = "scale(0) translate(0, 0)", e.style.transition = `transform ${t.spreadDuration} ${t.spreadTiming} 0s,opacity ${t.clearDuration} ${t.clearTiming} 0s`, o.currentTarget.appendChild(e);
  const i = o.currentTarget.getBoundingClientRect();
  if (t.centered)
    e.style.top = `${i.height / 2}px`, e.style.left = `${i.width / 2}px`;
  else {
    const l = !!o.targetTouches && o.targetTouches[0] || o;
    e.style.top = `${l.clientY - i.top}px`, e.style.left = `${l.clientX - i.left}px`;
  }
  const r = Math.max(i.width, i.height) * 0.02;
  return e.style.transform = `scale(${r}) translate(0, 0)`, e;
}
function et(o) {
  o && (o.addEventListener("transitionend", (t) => {
    t.propertyName === "opacity" && o.remove();
  }), o.style.opacity = "0");
}
const Gt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: y,
  defaultOptions: jt,
  start: tt,
  stop: et
}, Symbol.toStringTag, { value: "Module" }));
function _t() {
  return /(android)/i.test(navigator.userAgent);
}
const a = String.raw, St = String.raw;
function Ut(o) {
  return Object.entries(o).map(
    ([t, e]) => `${t.replace(/[A-Z]/g, (i) => `-${i.toLowerCase()}`)}:${e}`
  ).join(";") + ";";
}
const P = class P extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get leftSlot() {
        return [...this.root.querySelectorAll('[slot="left"]')];
      },
      get centerSlot() {
        return [...this.root.querySelectorAll('[slot="center"]')];
      },
      get rightSlot() {
        return [...this.root.querySelectorAll('[slot="right"]')];
      },
      get position() {
        return this.root.getAttribute("position");
      },
      set position(t) {
        if (!t) {
          this.root.removeAttribute("position");
          return;
        }
        this.root.setAttribute("position", t);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: flex !important;
          position: absolute !important;
          z-index: 100;
          background-color: var(--ui-backdrop-bgColor);
          -webkit-backdrop-filter: var(--ui-backdropFilter);
          backdrop-filter: var(--ui-backdropFilter);
          overflow: hidden;
          user-select: none;
        }

        :host([position="top"]) {
          top: 0;
          left: 0;
          right: 0;
          height: var(--ui-app-bar-height);
          border-bottom: 1px solid var(--ui-borderColor);
          padding-left: var(--ui-spacing);
          padding-right: var(--ui-spacing);
        }

        :host > ui-flex-grid-row {
          width: 100%;
          height: 100%;
          align-items: center;
          justify-content: space-between;
        }

        :host > ui-flex-grid-row > * {
          height: 100%;
        }

        :host > ui-flex-grid-row > *:nth-child(1),
        :host > ui-flex-grid-row > *:nth-child(3) {
          width: fit-content;
        }

        :host > ui-flex-grid-row > [slot="left"] {
          margin-left: 0 !important;
        }

        :host > ui-flex-grid-row > [slot="center"] {
          width: 100%;
        }

        :host > ui-flex-grid-row > [slot="right"] {
          margin-right: 0 !important;
          justify-content: flex-end;
        }
      </style>

      <ui-flex-grid-row gap="0.25rem">
        <ui-flex-grid-row gap="0.25rem">
          <slot name="left"></slot>
        </ui-flex-grid-row>

        <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
          <slot name="center"></slot>
        </ui-flex-grid-row>

        <ui-flex-grid-row gap="0.25rem">
          <slot name="right"></slot>
        </ui-flex-grid-row>
      </ui-flex-grid-row>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(P, "register", () => {
  customElements.get("ui-app-bar") || customElements.define("ui-app-bar", P);
});
let it = P;
const B = class B extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /**
       * @returns {T}
       */
      get child() {
        return this.root.querySelector("*");
      },
      /**
       * @param {string | null} [value]
       */
      show(t = null) {
        this.root.style.display = t;
      },
      hide() {
        this.root.style.display = "none";
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: flex;
          align-items: center;
          justify-content: center;
          flex: 1;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(B, "register", () => {
  customElements.get("ui-app-bar-item") || customElements.define("ui-app-bar-item", B);
});
let ot = B;
const k = class k extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ripple = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIButton_Events>}
       */
      events: new b(),
      get noripple() {
        return !this.root.removeRippleCallback;
      },
      set noripple(t) {
        if (!t) {
          if (this.root.removeRippleCallback) return;
          this.root.removeRippleCallback = y(this.root);
        }
        this.root.removeRippleCallback && (this.root.ripple.destroy(), this.root.removeRippleCallback = null);
      },
      get color() {
        return this.root.getAttribute("color");
      },
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get variant() {
        return this.root.getAttribute("variant");
      },
      set variant(t) {
        if (!t) {
          this.root.removeAttribute("variant");
          return;
        }
        this.root.setAttribute("variant", t);
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative !important;
          padding: var(--ui-spacing) calc(var(--ui-spacing) * 2.5);
          border: 1px solid currentColor;
          border-radius: var(--ui-radius);
          overflow: hidden;
          text-transform: capitalize;
          cursor: pointer;
          outline: none;
          user-select: none;
          font-size: 1.1rem;
          font-weight: 450;
          font-family: var(--ui-fontFamily);
          font-variation-settings: var(--ui-button-fontVariation);
        }

        :host([variant="full"]) {
          border: none;
        }

        :host([variant="full"][color="primary"]) {
          background-color: var(--ui-primary-bgColor);
          color: var(--ui-primary-color);
        }

        :host([variant="full"][color="secondary"]) {
          background-color: var(--ui-secondary-bgColor);
          color: var(--ui-secondary-color);
        }

        :host([variant="full"][color="destructive"]) {
          background-color: var(--ui-destructive-bgColor);
          color: var(--ui-destructive-color);
        }

        :host([variant="outline"]) {
          border-color: currentColor;
          background-color: transparent;
        }

        :host([variant="outline"][color="primary"]) {
          color: var(--ui-primary-bgColor);
        }

        :host([variant="outline"][color="secondary"]) {
          color: var(--ui-secondary-bgColor);
        }

        :host([variant="outline"][color="destructive"]) {
          color: var(--ui-destructive-bgColor);
        }

        :host([variant="ghost"]) {
          border-color: transparent;
          background-color: transparent;
          font-weight: 900;
        }

        :host([variant="ghost"][color="primary"]) {
          color: var(--ui-primary-bgColor);
        }

        :host([variant="ghost"][color="secondary"]) {
          color: var(--ui-secondary-bgColor);
        }

        :host([variant="ghost"][color="destructive"]) {
          color: var(--ui-destructive-bgColor);
        }

        :host([disabled]),
        :host([disabled]:hover),
        :host([disabled]:active) {
          background-color: transparent;
          opacity: 0.25;
          cursor: default;
          pointer-events: none;
        }
      </style>

      <slot></slot>
    `, typeof this.removeRippleCallback != "function" && (this.removeRippleCallback = y(this)), this.addEventListener("click", () => {
      this.ui.events.dispatch("click", this);
    });
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "noripple":
        this.ui.noripple = i !== null;
        break;
    }
  }
};
s(k, "register", () => {
  customElements.get("ui-button") || customElements.define("ui-button", k);
}), s(k, "observedAttributes", ["noripple"]);
let rt = k;
const x = class x extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ripple = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIIconButton_Events>}
       */
      events: new b(),
      get noripple() {
        return !this.root.removeRippleCallback;
      },
      set noripple(t) {
        if (!t) {
          if (this.root.removeRippleCallback) return;
          this.root.removeRippleCallback = y(this.root);
        }
        this.root.removeRippleCallback && (this.root.ripple.destroy(), this.root.removeRippleCallback = null);
      },
      get color() {
        return this.root.getAttribute("color");
      },
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get ghost() {
        return this.root.hasAttribute("ghost");
      },
      set ghost(t) {
        if (!t) {
          this.root.removeAttribute("ghost");
          return;
        }
        this.root.setAttribute("ghost", "");
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;
          position: relative;
          width: 2.5rem;
          height: 2.5rem;
          padding: calc(var(--ui-spacing) / 2);
          border: 1px solid currentColor;
          border-radius: var(--ui-radius);
          outline: none;
          overflow: hidden;
          cursor: pointer;
          user-select: none;
          font-size: 1.1rem;
          font-weight: 450;
          font-family: var(--ui-fontFamily);
          font-variation-settings: var(--ui-button-fontVariation);
          transition: color 0.5s linear;
        }

        :host([ghost]) {
          border-color: transparent !important;
          box-shadow: none;
          font-weight: 900;
        }

        :host([color="primary"]) {
          color: var(--ui-primary-bgColor);
          border-color: var(--ui-primary-bgColor);
        }

        :host([color="secondary"]) {
          color: var(--ui-secondary-bgColor);
          border-color: var(--ui-secondary-bgColor);
        }

        :host([color="destructive"]) {
          color: var(--ui-destructive-bgColor);
          border-color: var(--ui-destructive-bgColor);
        }

        /* :disabled */

        :host([disabled]),
        :host([disabled]:hover),
        :host([disabled]:active) {
          opacity: 0.25;
          cursor: default;
          pointer-events: none;
        }

        ui-svg {
          display: flex;
          align-items: center;
          justify-content: center;
        }
      </style>

      <ui-svg>
        <slot></slot>
      </ui-svg>
    `, typeof this.removeRippleCallback != "function" && (this.removeRippleCallback = y(this, { centered: !0 })), this.addEventListener("click", () => {
      this.ui.events.dispatch("click", this);
    });
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "noripple":
        this.ui.noripple = i !== null;
        break;
    }
  }
};
s(x, "register", () => {
  customElements.get("ui-icon-button") || customElements.define("ui-icon-button", x);
}), s(x, "observedAttributes", ["noripple"]);
let st = x;
const Z = class Z extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;
          width: 100%;
          max-width: 65rem;
          margin: 0 auto !important;
          padding: var(--ui-spacing);
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(Z, "register", () => {
  customElements.get("ui-container") || customElements.define("ui-container", Z);
});
let nt = Z;
const Jt = a`
  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
    <g
      id="SVGRepo_tracerCarrier"
      stroke-linecap="round"
      stroke-linejoin="round"
    ></g>
    <g id="SVGRepo_iconCarrier">
      <rect width="24" height="24" fill="none"></rect>
      <path
        d="M7 17L16.8995 7.10051"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
      ></path>
      <path
        d="M7 7.00001L16.8995 16.8995"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
      ></path>
    </g>
  </svg>
`, C = class C extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.flex = "1", this.ui = {
      root: this,
      get flex() {
        return this.root.flex;
      },
      set flex(t) {
        this.root.flex = t || "1";
        const e = this.root.shadowRoot.querySelector('style[name="flex"]');
        e.textContent = St`
          :host {
            flex: ${this.root.flex};
          }
        `;
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;
        }
      </style>

      <style name="flex">
        :host {
          flex: 1;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "flex":
        this.ui.flex = i;
        break;
    }
  }
};
s(C, "register", () => {
  customElements.get("ui-flex-grid-item") || customElements.define("ui-flex-grid-item", C);
}), s(C, "observedAttributes", ["flex"]);
let X = C;
const E = class E extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.gap = "0", this.ui = {
      root: this,
      get gap() {
        return this.root.gap;
      },
      set gap(t) {
        this.root.gap = t || "0";
        const e = this.root.shadowRoot.querySelector('style[name="gap"]');
        e.textContent = St`
          :host > ::slotted(*) {
            margin: 0 ${this.root.gap} !important;
          }
        `;
      },
      get justify() {
        return this.root.style.justifyContent;
      },
      set justify(t) {
        this.root.style.justifyContent = t;
      },
      get align() {
        return this.root.style.alignItems;
      },
      set align(t) {
        this.root.style.alignItems = t;
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: flex !important;
          flex-flow: row nowrap;
          position: relative !important;
          width: 100%;
        }
      </style>

      <style name="gap">
        :host > ::slotted(*) {
          margin: 0 0 !important;
        }
      </style>

      <style>
        :host > ::slotted(*:first-child) {
          margin-left: 0 !important;
        }

        :host > ::slotted(*:last-child) {
          margin-right: 0 !important;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "gap":
        this.ui.gap = i;
        break;
      case "justify":
        this.ui.justify = i;
        break;
      case "align":
        this.ui.align = i;
        break;
    }
  }
};
s(E, "register", () => {
  customElements.get("ui-flex-grid-row") || customElements.define("ui-flex-grid-row", E);
}), s(E, "observedAttributes", ["gap", "justify", "align"]);
let at = E;
const R = class R extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.gap = "0", this.ui = {
      root: this,
      get gap() {
        return this.root.gap;
      },
      set gap(t) {
        this.root.gap = t || "0";
        const e = this.root.shadowRoot.querySelector('style[name="gap"]');
        e.textContent = St`
          :host > ::slotted(*) {
            margin: ${this.root.gap} 0 !important;
          }
        `;
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: flex !important;
          flex-flow: column nowrap;
          position: relative !important;
          width: 100%;
          height: fit-content;
        }
      </style>

      <style name="gap">
        :host > ::slotted(*) {
          margin: 0 0 !important;
        }
      </style>

      <style>
        :host > ::slotted(*:first-child) {
          margin-top: 0 !important;
        }

        :host > ::slotted(*:last-child) {
          margin-bottom: 0 !important;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "gap":
        this.ui.gap = i;
        break;
    }
  }
};
s(R, "register", () => {
  customElements.get("ui-flex-grid") || customElements.define("ui-flex-grid", R);
}), s(R, "observedAttributes", ["gap"]);
let lt = R;
const A = class A extends HTMLElement {
  /**
   * @param {string} title
   */
  constructor(t) {
    super(), this.attachShadow({ mode: "open" }), this.shadowRenderCleanUp = new Pt(), this._title = t || "", this.ui = {
      root: this,
      /** @type {Events<T>} */
      events: new b(),
      get title() {
        return this.root.shadowRoot.querySelector('[name="title"]').innerHTML;
      },
      set title(e) {
        const i = this.root.shadowRoot.querySelector('[name="title"]');
        this.root._title = i.innerHTML = e || "";
      },
      get fullscreen() {
        return this.root.hasAttribute("fullscreen");
      },
      set fullscreen(e) {
        if (!e) {
          this.root.removeAttribute("fullscreen");
          return;
        }
        this.root.setAttribute("fullscreen", "");
      },
      get nofooter() {
        return this.root.hasAttribute("nofooter");
      },
      set nofooter(e) {
        if (!e) {
          this.root.removeAttribute("nofooter");
          return;
        }
        this.root.setAttribute("nofooter", "");
      },
      /**
       * @param {boolean} modal
       * @param {boolean} [inert] - This will prevent the autofocus on input elements (default: true)
       */
      open(e = !1, i = !0) {
        const r = this.root.shadowRoot.querySelector("dialog"), l = r.inert;
        r.inert = i, e ? r.showModal() : r.show(), this.events.dispatch("open", null), r.inert = l;
      },
      close() {
        this.events.dispatch("close", null), this.root.shadowRoot.querySelector("dialog").close();
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRenderCleanUp.run(), this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host dialog * {
                    box-sizing: border-box;
                }

                dialog {
                    position: fixed !important;

                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);

                    max-width: 100%;
                    max-height: 100%;

                    margin: 0;
                    padding: 0;

                    border: none;
                    outline: none;

                    background-color: transparent;

                    -ms-overflow-style: none;
                    scrollbar-width: none;

                    z-index: 999;
                }

                dialog::-webkit-scrollbar {
                    display: none;
                }

                dialog::backdrop {
                    background-color: var(--ui-backdrop-bgColor);
                    backdrop-filter: var(--ui-backdropFilter);
                }

                dialog > .container {
                    background-color: var(--ui-bgColor);
                    color: var(--ui-color);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    padding: var(--ui-spacing);

                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;

                    position: relative;
                }

                :host([fullscreen]) dialog {
                    width: 100%;
                    height: 100%;
                }

                :host([fullscreen]) dialog > .container {
                    width: calc(100% - var(--ui-spacing) * 2);
                    height: calc(
                        100% -
                            (
                                env(safe-area-inset-top, 0) +
                                    env(safe-area-inset-bottom, 0) +
                                    (var(--ui-spacing) * 2)
                            )
                    );

                    margin: var(--ui-spacing);
                    margin-top: calc(
                        env(safe-area-inset-top, 0) + var(--ui-spacing)
                    );
                    margin-bottom: calc(
                        env(safe-area-inset-bottom, 0) + var(--ui-spacing)
                    );
                }

                /*
         * Header Styles
         */

                .header {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;

                    border-top-right-radius: var(--ui-radius);
                    border-top-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-header-height);
                }

                .header h4 {
                    margin: auto 0;
                }

                :host([fullscreen]) .header {
                    z-index: 15;
                    position: absolute;
                    top: var(--ui-spacing);
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                /*
         * Content Styles
         */

                .content {
                    padding: var(--ui-spacing);
                    height: fit-content;
                    min-width: fit-content;
                    width: 100%;
                }

                :host([fullscreen]) .content {
                    z-index: 10;
                    position: absolute;
                    top: calc(
                        var(--ui-dialog-header-height) + var(--ui-spacing)
                    );
                    bottom: calc(
                        var(--ui-dialog-footer-height) + var(--ui-spacing)
                    );
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    padding: unset;
                    height: unset;
                    width: unset;
                    min-width: unset;
                }

                :host([nofooter]) .content {
                    bottom: var(--ui-spacing);
                }

                /*
         * Footer Styles
         */

                .footer {
                    margin-top: var(--ui-spacing);
                    border-bottom-right-radius: var(--ui-radius);
                    border-bottom-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-footer-height);
                }

                :host([fullscreen]) .footer {
                    z-index: 15;
                    position: absolute;
                    right: var(--ui-spacing);
                    bottom: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                .footer ui-flex-grid-row {
                    height: 100%;
                    flex-wrap: nowrap;
                    justify-content: flex-end;
                    align-items: center;
                }

                :host([nofooter]) .footer {
                    display: none;
                }
            </style>

            <dialog>
                <div class="container">
                    <div class="header">
                        <span style="white-space: nowrap;">
                            <h3 name="title"></h3>
                        </span>

                        <ui-icon-button
                            style="width: var(--ui-dialog-header-height); height: 100%;"
                            ghost
                        >
                            ${Jt}
                        </ui-icon-button>
                    </div>

                    <div class="content">
                        <slot></slot>
                    </div>

                    <div class="footer">
                        <ui-flex-grid-row gap="calc(var(--ui-spacing) / 2)">
                            <slot name="actions"></slot>
                        </ui-flex-grid-row>
                    </div>
                </div>
            </dialog>
        `, this.ui.title = this._title;
    const t = this.shadowRoot.querySelector(".header ui-icon-button"), e = () => this.ui.close();
    t.addEventListener("click", e);
    const i = this.shadowRoot.querySelector("dialog"), r = (l) => l.preventDefault();
    i.addEventListener("cancel", r), this.shadowRenderCleanUp.add(() => {
      t.removeEventListener("click", e), i.removeEventListener("cancel", r);
    });
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.ui.title = i;
        break;
    }
  }
  /**
   * @param {object} options
   * @param {string} [options.variant]
   * @param {string} [options.color]
   * @param {string} [options.flex]
   * @param {(() => void|Promise<void>) | null} [options.onClick]
   */
  static createAction({
    variant: t = "full",
    color: e = "primary",
    flex: i = "0",
    onClick: r = null
  }) {
    const l = new X();
    l.ui.flex = i, l.slot = "actions", l.innerHTML = a`
            <ui-button variant="${t}" color="${e}"></ui-button>
        `;
    let u;
    return r && (u = l.querySelector("ui-button"), u.ui.events.on("click", r)), {
      container: l,
      action: u
    };
  }
};
s(A, "register", () => {
  customElements.get("ui-dialog") || customElements.define("ui-dialog", A);
}), s(A, "observedAttributes", ["title"]);
let ct = A;
const J = class J extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /**
       * @type {Events<UIDrawer_Events>}
       */
      events: new b(),
      get open() {
        return this.root.hasAttribute("open");
      },
      set open(t) {
        if (!t) {
          this.root.removeAttribute("open"), this.events.dispatch("close", this.root);
          return;
        }
        this.root.setAttribute("open", ""), this.events.dispatch("open", this.root);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;

          position: absolute !important;
          z-index: 150;
          top: 0;
          left: -100%;
          width: 100%;
          height: 100%;

          overflow: hidden;

          transition: left 0s ease 0.5s;
        }

        :host([open]) {
          background-color: var(--ui-backdrop-bgColor);
          -webkit-backdrop-filter: var(--ui-backdropFilter);
          backdrop-filter: var(--ui-backdropFilter);

          left: 0;

          transition: none;
        }

        aside {
          position: absolute;
          z-index: 150;
          top: 0;
          left: -100%;
          width: var(--ui-drawer-width, fit-content);
          max-width: 100%;
          height: 100%;

          overflow-x: hidden;
          overflow-y: auto;
          scroll-behavior: smooth;

          -ms-overflow-style: none;
          scrollbar-width: none;

          background-color: var(--ui-card-bgColor);
          color: var(--ui-card-color);

          /*
                    background-color: var(--ui-backdrop-bgColor);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                    */

          border-right: 1px solid var(--ui-card-borderColor);

          transition: left 0.5s ease;
        }

        aside::-webkit-scrollbar {
          display: none;
        }

        :host([open]) aside {
          left: 0;
        }
      </style>

      <aside>
        <slot></slot>
      </aside>
    `, this.shadowRoot.querySelector("aside").addEventListener("click", (t) => t.stopPropagation()), this.addEventListener("click", () => this.ui.open = !1);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
};
s(J, "register", () => {
  customElements.get("ui-drawer") || customElements.define("ui-drawer", J);
});
let ut = J;
const $t = a`
  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
    <g
      id="SVGRepo_tracerCarrier"
      stroke-linecap="round"
      stroke-linejoin="round"
    ></g>
    <g id="SVGRepo_iconCarrier">
      <rect width="24" height="24" fill="none"></rect>
      <path
        d="M17 9.5L12 14.5L7 9.5"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
      ></path>
    </g>
  </svg>
`, L = class L extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get title() {
        return this.root.shadowRoot.querySelector(".title").innerHTML;
      },
      set title(t) {
        let e = this.root.shadowRoot.querySelector(".title");
        if (!t) {
          e.classList.remove("visible");
          return;
        }
        e.classList.add("visible"), e.innerHTML = a`
          <span
            style="
              font-size: 1.5rem;
              font-weight: 600;
              font-variation-settings: var(--ui-heading-fontVariation);
            "
          >
            ${t}
          </span>
        `;
      },
      get fold() {
        return this.root.hasAttribute("fold");
      },
      set fold(t) {
        if (!t) {
          this.root.removeAttribute("fold");
          return;
        }
        this.root.setAttribute("fold", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        ul {
          margin: 0;
          list-style: none;
          padding: var(--ui-spacing);
          overflow: hidden;
          border-bottom: 1px solid var(--ui-borderColor);
        }

        ui-drawer-group-item {
          display: flex;
          cursor: pointer;
        }

        .title:not(.visible) {
          display: none;
        }

        .icon {
          transition: transform 0.25s ease;
        }

        :host([fold]) .icon {
          transform: rotate(-90deg);
        }

        :host([fold]) ::slotted(*) {
          display: none !important;
        }
      </style>

      <ul>
        <ui-drawer-group-item
          style="position: relative; border-radius: var(--ui-radius);"
          role="button"
        >
          <ui-flex-grid-row>
            <ui-flex-grid-item class="title"></ui-flex-grid-item>

            <ui-flex-grid-item class="icon" flex="0">
              <ui-svg style="width: 2.5rem; height: 2.5rem;">
                ${$t}
              </ui-svg>
            </ui-flex-grid-item>
          </ui-flex-grid-row>
        </ui-drawer-group-item>

        <slot></slot>
      </ul>
    `;
    const t = this.shadowRoot.querySelector("ui-drawer-group-item");
    t.addEventListener("click", () => {
      this.ui.fold = !this.ui.fold;
    }), y(t);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.ui.title = i;
        break;
    }
  }
};
s(L, "register", () => {
  customElements.get("ui-drawer-group") || customElements.define("ui-drawer-group", L);
}), s(L, "observedAttributes", ["title"]);
let dt = L;
const D = class D extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;
          width: 100%;
        }

        li {
          padding: var(--ui-spacing) calc(var(--ui-spacing) * 1.5);
          display: flex;
          flex-direction: row;
          flex-wrap: nowrap;
          width: 100%;
        }

        ::slotted(*) {
          width: 100%;
        }
      </style>

      <li>
        <slot></slot>
      </li>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(D, "register", () => {
  customElements.get("ui-drawer-group-item") || customElements.define("ui-drawer-group-item", D);
});
let ht = D;
const S = class S extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      /**
       * @type {import("../ui-text").UILabel | null}
       */
      label: null,
      /**
       * @type {HTMLInputElement | null}
       */
      input: null,
      get primary() {
        return this.label.ui.primary;
      },
      set primary(t) {
        this.label.ui.primary = t;
      },
      get secondary() {
        return this.label.ui.secondary;
      },
      set secondary(t) {
        this.label.ui.secondary = t;
      },
      get value() {
        return this.input.value;
      },
      set value(t) {
        this.input.value = t;
      },
      get checked() {
        return this.input.checked;
      },
      set checked(t) {
        this.input.checked = t;
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <ui-label ripple>
        <input slot="input" type="checkbox"></input>
      </ui-label>
    `, this.ui.label = this.shadowRoot.querySelector("ui-label"), this.ui.input = this.shadowRoot.querySelector("input");
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "primary":
        this.ui.primary = i;
        break;
      case "secondary":
        this.ui.primary = i;
        break;
      case "value":
        this.ui.value = i;
        break;
      case "checked":
        this.ui.checked = i !== null;
        break;
    }
  }
};
s(S, "register", () => {
  customElements.get("ui-check") || customElements.define("ui-check", S);
}), s(S, "observedAttributes", ["primary", "secondary", "value", "checked"]);
let pt = S;
const T = class T extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ripple = null, this.running = !1, this.onClick = async () => {
      this.ui.inputSlot.forEach(
        (t) => t.click()
      );
    }, this.onInputClick = async (t) => {
      t.stopPropagation();
    }, this.ui = {
      root: this,
      get ripple() {
        return this.root.running;
      },
      set ripple(t) {
        if (!t) {
          this.root.disableRipple();
          return;
        }
        this.root.enableRipple();
      },
      get primary() {
        return this.root.shadowRoot.querySelector("ui-primary").innerHTML;
      },
      set primary(t) {
        this.root.shadowRoot.querySelector("ui-primary").innerHTML = t || "";
      },
      get secondary() {
        return this.root.shadowRoot.querySelector("ui-secondary").innerHTML;
      },
      set secondary(t) {
        this.root.shadowRoot.querySelector("ui-secondary").innerHTML = t || "";
      },
      get inputSlot() {
        return [...this.root.querySelectorAll('[slot="input"]')];
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          position: relative !important;
          display: flex !important;
          flex-direction: row;
          width: 100%;
          padding: var(--ui-spacing);
          border-radius: var(--ui-radius);
        }

        :host > .text {
          display: flex;
          flex: 1;
          flex-direction: column;
          justify-content: center;
          margin-right: var(--ui-spacing);
        }

        :host > .input {
          display: flex;
          align-items: center;
          justify-content: flex-end;
        }
      </style>

      <span class="text">
        <ui-primary></ui-primary>
        <ui-secondary></ui-secondary>
      </span>

      <span class="input">
        <slot name="input"></slot>
        <slot></slot>
      </span>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "ripple":
        this.ui.ripple = i !== null;
        break;
      case "primary":
        this.ui.primary = i;
        break;
      case "secondary":
        this.ui.secondary = i;
        break;
    }
  }
  enableRipple() {
    if (this.ripple || (this.ripple = y(this), this.style.cursor = "pointer", this.running)) return;
    this.addEventListener("click", this.onClick), [...this.querySelectorAll('[slot="input"]')].forEach((e) => {
      e.addEventListener("click", this.onInputClick);
    }), this.running = !0;
  }
  disableRipple() {
    this.running && (this.ripple && this.ripple.destroy(), this.removeEventListener("click", this.onClick), this.ui.inputSlot.forEach((t) => {
      t.removeEventListener("click", this.onInputClick);
    }), this.running = !1);
  }
};
s(T, "register", () => {
  customElements.get("ui-label") || customElements.define("ui-label", T);
}), s(T, "observedAttributes", ["ripple", "secondary", "primary"]);
let gt = T;
const K = class K extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        :host {
          font-size: 1.1rem;
          font-family: var(--ui-fontFamily);
          font-variation-settings: var(--ui-text-primary-fontVariation);
          overflow-wrap: anywhere;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(K, "register", () => {
  customElements.get("ui-primary") || customElements.define("ui-primary", K);
});
let bt = K;
const Q = class Q extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        :host {
          font-size: 0.9rem;
          font-family: var(--ui-fontFamily);
          font-variation-settings: var(--ui-text-secondary-fontVariation);
          overflow-wrap: anywhere;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(Q, "register", () => {
  customElements.get("ui-secondary") || customElements.define("ui-secondary", Q);
});
let w = Q;
const M = class M extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new b(),
      /** @type {HTMLInputElement | null} */
      input: null,
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        let e = this.root.querySelector('[slot="title"]');
        !t && e && this.root.removeChild(e), t && (e || (e = new w(), e.slot = "title", this.root.appendChild(e)), e.innerHTML = t);
      },
      get type() {
        return this.input.type;
      },
      set type(t) {
        this.input.type = t || "";
      },
      get value() {
        return this.input.value;
      },
      set value(t) {
        this.input.value = t;
      },
      get placeholder() {
        return this.input.placeholder;
      },
      set placeholder(t) {
        this.input.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get min() {
        return this.input.min;
      },
      set min(t) {
        this.input.min = t;
      },
      get max() {
        return this.input.max;
      },
      set max(t) {
        this.input.max = t;
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;
          position: relative;
          width: 100%;
          height: fit-content;
        }

        input {
          width: 100%;
          display: block;
          margin: 0;
          padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
          border: none !important;
          border-radius: inherit;
          outline: none !important;
          font-size: 0.9rem;
          font-family: var(--ui-fontFamily);
          font-variation-settings: var(--ui-input-fontVariation);
          accent-color: var(--ui-primary-bgColor);
          background-color: transparent !important;
        }

        .container {
          width: 100%;
          border: none;
          border: 1px solid var(--ui-borderColor);
          border-radius: var(--ui-radius);
          transition: border-color 0.25s linear;
        }

        .container:has(input:focus) {
          border-color: var(--ui-primary-bgColor);
        }

        :host([invalid]) .container {
          border-color: var(--ui-destructive-bgColor);
        }

        ::slotted([slot="title"]) {
          display: block;
          padding: 0 var(--ui-spacing);
          user-select: none;
          transform: translateY(calc(var(--ui-spacing) / 2));
        }
      </style>

      <div class="container">
        <slot name="title"></slot>
        <input />
      </div>
    `, this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = this.getAttribute("type") || "text", this.ui.input.oninput = () => {
      this.ui.events.dispatch("input", this.ui.input.value);
    }, this.ui.input.onchange = () => {
      this.ui.events.dispatch("change", this.ui.input.value);
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.ui.title = i;
        break;
      case "type":
        this.ui.type = i;
        break;
      case "value":
        this.ui.value = i;
        break;
      case "placeholder":
        this.ui.placeholder = i;
        break;
      case "invalid":
        this.ui.input.ariaInvalid = i !== null ? "" : null;
        break;
      case "min":
        this.ui.min = i;
        break;
      case "max":
        this.ui.max = i;
        break;
    }
  }
};
s(M, "register", () => {
  customElements.get("ui-input") || customElements.define("ui-input", M);
}), s(M, "observedAttributes", [
  "title",
  "type",
  "value",
  "placeholder",
  "invalid",
  "min",
  "max"
]);
let mt = M;
const Dt = a`
  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
    <g
      id="SVGRepo_tracerCarrier"
      stroke-linecap="round"
      stroke-linejoin="round"
    ></g>
    <g id="SVGRepo_iconCarrier">
      <g clip-path="url(#clip0_15_152)">
        <rect width="24" height="24" fill="none"></rect>
        <circle
          cx="10.5"
          cy="10.5"
          r="6.5"
          stroke="currentColor"
          stroke-linejoin="round"
        ></circle>
        <path
          d="M19.6464 20.3536C19.8417 20.5488 20.1583 20.5488 20.3536 20.3536C20.5488 20.1583 20.5488 19.8417 20.3536 19.6464L19.6464 20.3536ZM20.3536 19.6464L15.3536 14.6464L14.6464 15.3536L19.6464 20.3536L20.3536 19.6464Z"
          fill="currentColor"
        ></path>
      </g>
      <defs>
        <clipPath id="clip0_15_152">
          <rect width="24" height="24" fill="none"></rect>
        </clipPath>
      </defs>
    </g>
  </svg>
`, H = class H extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.storagekey = "", this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new b(),
      /** @type {HTMLInputElement | null} */
      input: null,
      /** @type {import("../ui-button").UIIconButton} */
      submit: this.querySelector('[name="submit"]'),
      get title() {
        return this.root.querySelector('[slot="title"]').innerHTML;
      },
      set title(t) {
        let e = this.root.querySelector('[slot="title"]');
        !t && e && this.root.removeChild(e), t && (e || (e = new w(), e.slot = "title", this.root.appendChild(e)), e.innerHTML = t);
      },
      get value() {
        return this.input.value;
      },
      set value(t) {
        this.input.value = t;
      },
      get placeholder() {
        return this.input.placeholder;
      },
      set placeholder(t) {
        this.input.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get nosubmit() {
        return this.submit.style.display === "none";
      },
      set nosubmit(t) {
        if (!t) {
          this.submit.style.display = null;
          return;
        }
        this.submit.style.display = "none";
      },
      get storage() {
        return this.root.hasAttribute("storage");
      },
      set storage(t) {
        if (!t) {
          this.root.removeAttribute("storage");
          return;
        }
        this.root.setAttribute("storage", "");
      },
      get storageprefix() {
        return this.root.getAttribute("storageprefix");
      },
      set storageprefix(t) {
        if (!t) {
          this.root.removeAttribute("storageprefix");
          return;
        }
        this.root.setAttribute("storageprefix", t);
      },
      get storagekey() {
        return this.root.storagekey;
      },
      set storagekey(t) {
        this.root.storagekey = t, this.storage && (this.value = localStorage.getItem(this.storageprefix + this.root.storagekey) || "", this.events.dispatch("storage", this.value));
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;
          position: relative;
          width: 100%;
          height: fit-content;
        }

        input {
          width: 100%;
          display: block;
          margin: 0;
          padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
          border: none !important;
          border-radius: inherit;
          outline: none !important;
          font-size: 0.9rem;
          font-family: var(--ui-fontFamily);
          font-variation-settings: var(--ui-input-fontVariation);
          accent-color: var(--ui-primary-bgColor);
          background-color: transparent !important;
        }

        :host(:not([nosubmit])) input {
          width: calc(100% - 2rem);
        }

        .container {
          position: relative;
          width: 100%;
          border: none;
          border: 1px solid var(--ui-borderColor);
          border-radius: var(--ui-radius);
          transition: border-color 0.25s linear;
          background-color: var(--ui-backdrop-bgColor);
          -webkit-backdrop-filter: var(--ui-backdropFilter);
          backdrop-filter: var(--ui-backdropFilter);
        }

        .container:has(input:focus) {
          border-color: var(--ui-primary-bgColor);
        }

        :host([invalid]) .container {
          border-color: var(--ui-destructive-bgColor);
        }

        ::slotted([slot="title"]) {
          display: block;
          padding: 0 var(--ui-spacing);
          user-select: none;
          transform: translateY(calc(var(--ui-spacing) / 2));
        }

        ui-icon-button {
          position: absolute;
          top: 0;
          right: 0;
          height: 100%;
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
      </style>

      <div class="container">
        <slot name="title"></slot>
        <input type="search" />
        <ui-icon-button name="submit" ghost>${Dt}</ui-icon-button>
      </div>
    `, this.ui.submit = this.shadowRoot.querySelector('[name="submit"]'), this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = "search", this.ui.input.addEventListener("keydown", async (e) => {
      this.ui.nosubmit || e.key === "Enter" && this.ui.submit.click();
    });
    let t = null;
    this.ui.input.addEventListener("input", async () => {
      this.ui.storage && (t !== null && clearTimeout(t), t = setTimeout(() => {
        localStorage.setItem(
          this.ui.storageprefix + this.ui.storagekey,
          this.ui.input.value
        ), t = null;
      }, 250)), this.ui.events.dispatch("input", this.ui.input.value);
    }), this.shadowRoot.querySelector("ui-icon-button").addEventListener("click", () => {
      this.ui.events.dispatch("submit", this.ui.input.value);
    });
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.ui.title = i;
        break;
      case "value":
        this.ui.value = i;
        break;
      case "placeholder":
        this.ui.placeholder = i;
        break;
      case "invalid":
        this.ui.input.ariaInvalid = i !== null ? "" : null;
        break;
      case "nosubmit":
        this.ui.nosubmit = i !== null;
        break;
      case "storagekey":
        this.ui.storagekey = i;
        break;
    }
  }
};
s(H, "register", () => {
  customElements.get("ui-search") || customElements.define("ui-search", H);
}), s(H, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "nosubmit",
  "storagekey"
]);
let ft = H;
const W = class W extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get value() {
        return this.root.getAttribute("value");
      },
      set value(t) {
        if (!t) {
          this.root.removeAttribute("value");
          return;
        }
        this.root.setAttribute("value", t);
      },
      get selected() {
        return this.root.hasAttribute("selected");
      },
      set selected(t) {
        if (!t) {
          this.root.removeAttribute("selected");
          return;
        }
        this.root.setAttribute("selected", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        :host {
          display: none;
          align-items: center;

          padding: var(--ui-spacing);
          padding-right: 2.5rem;

          height: calc(1em * var(--ui-lineHeight) + var(--ui-spacing) * 2);

          white-space: nowrap;
          text-overflow: ellipsis;

          transition:
            background-color 0.25s linear,
            color 0.25s linear;

          overflow: hidden;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
};
s(W, "register", () => {
  customElements.get("ui-select-option") || customElements.define("ui-select-option", W);
});
let V = W;
const q = class q extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.open = !1, this.ui = {
      root: this,
      /**
       *  @type {Events<UISelectEvents>}
       */
      events: new b(),
      get open() {
        return this.root.open;
      },
      set open(t) {
        this.root.open = t, t ? this.root.setAttribute("open", "") : this.root.removeAttribute("open"), this.root.style.setProperty(
          "--items-length",
          `${this.root.children.length || 1}`
        );
      },
      /**
       * @returns {UISelectOption[]}
       */
      options() {
        return [...this.root.children].filter(
          (t) => t instanceof V
        );
      },
      /**
       * @returns {UISelectOption | null}
       */
      selected() {
        try {
          return this.options().find(
            (t) => t.ui.selected
          ) || null;
        } catch {
          return null;
        }
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    --ui-bgColor: "transparent";

                    position: relative !important;
                    display: block !important;

                    width: 100%;
                    height: calc(
                        1em * var(--ui-lineHeight) + var(--ui-spacing) * 2
                    );
                    transition: height 0.25s ease;

                    background-color: var(--ui-bgColor);
                    color: var(--ui-color);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    line-height: 1.15;

                    overflow: hidden;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-select-fontVariation);
                }

                .options {
                    cursor: pointer;
                    display: none;
                    display: flex;
                    flex-direction: column;
                    min-height: 100%;
                }

                .icon {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 2.5rem;
                    height: 100%;
                    color: var(--ui-primary-bgColor);
                }

                ::slotted(ui-select-option) {
                    display: flex;
                }

                :host([open]) {
                    height: calc(
                        (1em * var(--ui-lineHeight) + var(--ui-spacing) * 2) *
                            var(--items-length)
                    );
                }

                :host([open]) .options {
                    display: block;
                }

                :host([open]) .icon {
                    display: none;
                }

                :host([open]) ::slotted(ui-select-option[selected]) {
                    background-color: var(--ui-primary-bgColor);
                    color: var(--ui-primary-color);
                }

                :host([open])
                    ::slotted(ui-select-option:not([selected]):hover) {
                    background-color: hsla(var(--ui-color-hsl), 0.1);
                }

                :host(:not([open]))
                    .options:has(> ::slotted(ui-select-option[selected])) {
                    display: block;
                }

                :host(:not([open]))
                    ::slotted(ui-select-option:not([selected])) {
                    display: none;
                }
            </style>

            <div class="options">
                <div class="icon"><ui-svg>${$t}</ui-svg></div>

                <slot></slot>
            </div>
        `;
    const t = (i) => {
      const r = async (l) => {
        (l.composedPath() || []).forEach((u) => {
          u instanceof V && ([...this.querySelectorAll("ui-select-option")].forEach(
            (c) => c.removeAttribute("selected")
          ), u.setAttribute("selected", ""), this.ui.events.dispatch("change", u));
        });
      };
      this.ui.open = !this.ui.open, this.ui.open ? (i.stopPropagation(), this.addEventListener("click", r)) : setTimeout(
        () => this.removeEventListener("click", r)
      );
    };
    this.shadowRoot.querySelector(".options").addEventListener("click", t);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} n
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "open":
        const r = i !== null;
        r !== this.ui.open && (this.ui.open = r);
        break;
    }
  }
};
s(q, "register", () => {
  customElements.get("ui-select") || customElements.define("ui-select", q);
}), s(q, "observedAttributes", ["open"]);
let vt = q;
const z = class z extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new b(),
      /** @type {HTMLTextAreaElement | null} */
      textarea: null,
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        let e = this.root.querySelector('[slot="title"]');
        !t && e && this.root.removeChild(e), t && (e || (e = new w(), e.slot = "title", this.root.appendChild(e)), e.innerHTML = t);
      },
      get value() {
        return this.textarea.value;
      },
      set value(t) {
        this.textarea.value = t;
      },
      get placeholder() {
        return this.textarea.placeholder;
      },
      set placeholder(t) {
        this.textarea.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get rows() {
        return this.textarea.rows;
      },
      set rows(t) {
        this.textarea.rows = t;
      },
      get cols() {
        return this.textarea.cols;
      },
      set cols(t) {
        this.textarea.cols = t;
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("textarea").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("textarea").blur();
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        * {
          box-sizing: border-box;
        }

        :host {
          display: block;
          position: relative;
          width: 100%;
          height: fit-content;
        }

        textarea {
          resize: none;
          width: 100%;
          display: block;
          margin: 0;
          padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
          border: none !important;
          border-radius: inherit;
          outline: none !important;
          font-size: 0.9rem;
          font-family: var(--ui-fontFamily);
          font-variation-settings: var(--ui-input-fontVariation);
          accent-color: var(--ui-primary-bgColor);
          background-color: transparent !important;
        }

        .container {
          width: 100%;
          height: 100%;
          border: none;
          border: 1px solid var(--ui-borderColor);
          border-radius: var(--ui-radius);
          transition: border-color 0.25s linear;
        }

        .container:has(textarea:focus) {
          border-color: var(--ui-primary-bgColor);
        }

        :host([invalid]) .container {
          border-color: var(--ui-destructive-bgColor);
        }

        ::slotted([slot="title"]) {
          display: block;
          padding: 0 var(--ui-spacing);
          user-select: none;
          transform: translateY(calc(var(--ui-spacing) / 2));
        }
      </style>

      <div class="container">
        <slot name="title"></slot>
        <textarea></textarea>
      </div>
    `, this.ui.textarea = this.shadowRoot.querySelector("textarea"), this.ui.textarea.oninput = () => {
      this.ui.events.dispatch("input", this.ui.textarea.value);
    }, this.ui.textarea.onchange = () => {
      this.ui.events.dispatch("change", this.ui.textarea.value);
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "title":
        this.ui.title = i;
        break;
      case "value":
        this.ui.value = i;
        break;
      case "placeholder":
        this.ui.placeholder = i;
        break;
      case "invalid":
        this.ui.textarea.ariaInvalid = i !== null ? "" : null;
        break;
      case "rows":
        this.ui.rows = i !== null ? parseFloat(i) : null;
        break;
      case "cols":
        this.ui.cols = i !== null ? parseFloat(i) : null;
        break;
    }
  }
};
s(z, "register", () => {
  customElements.get("ui-textarea") || customElements.define("ui-textarea", z);
}), s(z, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "rows",
  "cols"
]);
let yt = z;
const j = class j extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      /**
       * @type {{
       *  [key: string]: {
       *      [key: string]: string;
       *  };
       * }}
       */
      data: {},
      /**
       * @type {Events<{ "change": import(".").UILangType}>}
       */
      events: new b(),
      get current() {
        return this.root.getAttribute("current");
      },
      set current(t) {
        this.root.setCurrent(t || "");
      },
      /** @returns {import(".").UILangType} */
      fallback() {
        return this.root.querySelector("ui-lang-type[fallback]");
      },
      /**
       * @param {string} group
       * @param {string} key
       */
      get(t, e) {
        var i, r;
        return ((r = (i = this.data) == null ? void 0 : i[t]) == null ? void 0 : r[e]) || null;
      }
    }, this.shadowRender();
  }
  shadowRender() {
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "current":
        this.ui.current = i;
        break;
    }
  }
  /**
   * @private
   * @param {string} name
   */
  async setCurrent(t) {
    const e = this.querySelector(`ui-lang-type[name="${t}"]`) || this.ui.fallback();
    if (e) {
      if (!e.ui.href) throw "Missing href attribute!";
      try {
        this.ui.data = await (await fetch(e.ui.href)).json();
      } catch (i) {
        console.error(i);
      }
      this.ui.events.dispatch("change", e);
    }
  }
};
s(j, "register", () => {
  customElements.get("ui-lang") || customElements.define("ui-lang", j);
}), s(j, "observedAttributes", ["current"]);
let wt = j;
const N = class N extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      get name() {
        return this.root.getAttribute("name");
      },
      set name(t) {
        if (!t) {
          this.root.removeAttribute("name");
          return;
        }
        this.root.setAttribute("name", t);
      },
      get href() {
        return this.root.getAttribute("href");
      },
      set href(t) {
        if (!t) {
          this.root.removeAttribute("href");
          return;
        }
        this.root.setAttribute("href", t);
      },
      get fallback() {
        return this.root.hasAttribute("fallback");
      },
      set fallback(t) {
        if (!t) {
          this.root.removeAttribute("fallback");
          return;
        }
        this.root.setAttribute("fallback", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(N, "register", () => {
  customElements.get("ui-lang-type") || customElements.define("ui-lang-type", N);
});
let kt = N;
const $ = class $ extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {
      root: this,
      get nobg() {
        return this.root.hasAttribute("nobg");
      },
      set nobg(t) {
        const e = this.root.shadowRoot.querySelector(".background");
        if (!t) {
          e.style.display = null;
          return;
        }
        e.style.display = "none";
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        :host {
          position: absolute !important;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
        }

        .background {
          z-index: 999;
          position: absolute !important;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
          background-color: var(--ui-backdrop-bgColor);
          -webkit-backdrop-filter: var(--ui-backdropFilter);
          backdrop-filter: var(--ui-backdropFilter);
        }

        .spinner {
          z-index: 1000;
          content: "";
          box-sizing: border-box;
          position: absolute !important;
          top: 50%;
          left: 50%;
          width: 2.5rem;
          height: 2.5rem;
          margin-top: -1.25rem;
          margin-left: -1.25rem;
          border-radius: 50%;
          border: 2px solid var(--ui-borderColor);
          border-top-color: var(--ui-primary-bgColor);
          animation: spinner 0.6s linear infinite;
        }

        @keyframes spinner {
          to {
            transform: rotate(360deg);
          }
        }
      </style>

      <div class="background"></div>
      <div class="spinner"></div>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "nobg":
        this.ui.nobg = i !== null;
        break;
    }
  }
};
s($, "register", () => {
  customElements.get("ui-spinner") || customElements.define("ui-spinner", $);
}), s($, "observedAttributes", ["nobg"]);
let xt = $;
const O = class O extends HTMLElement {
  /**
   * @param {string} name
   */
  constructor(t) {
    super(), this.attachShadow({ mode: "open" }), this._name = t, this.ui = {
      root: this,
      get name() {
        return this.root._name;
      },
      set name(e) {
        this.name = e || "";
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        :host {
          display: block !important;
          position: absolute !important;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          opacity: 0;
          animation: fade-in 0.5s;
          transition: opacity 0.5s ease;
        }

        :host(:last-child) {
          opacity: 1;
        }

        @keyframes fade-in {
          0% {
            opacity: 0;
          }
          100% {
            opacity: 1;
          }
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} n
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "name":
        this.ui.name = i;
        break;
    }
  }
};
s(O, "register", () => {
  customElements.get("ui-stack-layout-page") || customElements.define("ui-stack-layout-page", O);
}), s(O, "observedAttributes", ["name"]);
let Ct = O;
const G = class G extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.pages = {}, this.stack = [], this.onpopstate = () => this.goBack(), this.ui = {
      root: this,
      /**
       * @type {Events<{
       *  "change": {
       *      oldPage: UIStackLayoutPage | null,
       *      newPage: UIStackLayoutPage | null
       *  }
       * }>}
       */
      events: new b(),
      lock: !1,
      size() {
        return this.root.stack.length;
      },
      clear() {
        for (; this.size() > 0; )
          this.root.removeChild(this.root.stack.pop());
      },
      goBack() {
        if (!(!this.size() || this.lock)) {
          if (this.root.onpopstate !== null) {
            history.back();
            return;
          }
          this.root.goBack();
        }
      },
      /**
       * @param {string} pageName
       * @param {() => (UIStackLayoutPage)} cb
       */
      register(t, e) {
        this.root.pages[t] = e;
      },
      /**
       * @param {string} pageName
       */
      unregister(t) {
        delete this.root.pages[t];
      },
      /**
       * @param {string} pageName
       * @param {((page: UIStackLayoutPage) => void|Promise<void>) | null} [cb]
       * @param {boolean} [keepOldPage]
       */
      set(t, e = null, i = !1) {
        if (this.lock) return;
        const r = this.root.pages[t]();
        this.root.stack.push(this.root.appendChild(r)), typeof e == "function" && e(r);
        let l = null;
        this.size() > 1 && !i && (l = this.root.stack[this.root.stack.length - 2], l.parentElement.removeChild(l)), this.root.dispatchChangeEvent(l), this.root.onpopstate !== null && history.pushState(null, document.title, location.href);
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        :host {
          display: block !important;
          position: relative !important;
          width: 100%;
          height: 100%;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
    window.addEventListener("popstate", this.onpopstate);
  }
  disconnectedCallback() {
    window.removeEventListener("popstate", this.onpopstate);
  }
  goBack() {
    const t = this.removeChild(this.stack.pop());
    this.stack.length > 0 && (this.stack[this.stack.length - 1].parentElement || this.appendChild(this.stack[this.stack.length - 1])), this.dispatchChangeEvent(t);
  }
  /**
   * @param {UIStackLayoutPage} oldChild
   */
  async dispatchChangeEvent(t) {
    this.ui.events.dispatch("change", {
      newPage: this.stack[this.stack.length - 1] || null,
      oldPage: t || this.stack[this.stack.length - 2] || null
    });
  }
};
s(G, "register", () => {
  customElements.get("ui-stack-layout") || customElements.define("ui-stack-layout", G);
});
let Et = G;
const _ = class _ extends HTMLElement {
  constructor() {
    super(), this.stores = {}, this.ui = {
      root: this,
      /**
       * @type {Events<T>}
       */
      events: new b(),
      get storage() {
        return this.root.hasAttribute("storage");
      },
      set storage(t) {
        if (!t) {
          this.root.removeAttribute("storage");
          return;
        }
        this.root.setAttribute("storage", "");
      },
      get storageprefix() {
        return this.root.getAttribute("storageprefix");
      },
      set storageprefix(t) {
        if (!t) {
          this.root.removeAttribute("storageprefix");
          return;
        }
        this.root.setAttribute("storageprefix", t);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @returns {T[K]}
       */
      get(t) {
        return this.root.stores[t];
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {T[K]} data
       * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
       * `this.enableLocalStorage` flag needs to be set to `true` for this to work
       */
      set(t, e, i = !1) {
        if (i && this.storageprefix) {
          const r = JSON.parse(
            localStorage.getItem((this.storageprefix || "") + t.toString()) || "null"
          );
          this.root.stores[t] = r ?? e;
        } else
          this.root.stores[t] = e;
        this.storage && localStorage.setItem(
          (this.storageprefix || "") + t.toString(),
          JSON.stringify(this.root.stores[t])
        ), this.events.dispatch(t, this.root.stores[t]);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => any} callback
       */
      update(t, e) {
        if (typeof e != "function")
          throw "callback is not a function";
        this.set(t, e(this.root.stores[t]));
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => void|Promise<void>} callback
       * @param {boolean} [trigger] - this will run the callback first
       * @returns {() => void} clean up function
       */
      on(t, e, i = !1) {
        if (typeof e != "function")
          throw "callback is not a function";
        return i && e(this.get(t)), this.events.on(t, e);
      }
    }, this.shadowRender();
  }
  shadowRender() {
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(_, "register", () => {
  customElements.get("ui-store") || customElements.define("ui-store", _);
});
let Rt = _;
const F = class F extends HTMLElement {
  constructor() {
    super(), this.mediaHandler = null, this.themes = {}, this.currentTheme = null, this.mode = "", this.ui = {
      root: this,
      get auto() {
        return !!this.root.media;
      },
      set auto(t) {
        this.root.setAuto(t);
      },
      get mode() {
        return this.root.mode;
      },
      set mode(t) {
        this.root.setMode(t);
      },
      /**
       * @param {string} themeName
       * @param {string} href
       */
      add(t, e) {
        this.root.themes[t] = e;
      },
      /**
       * @param {string} themeName
       */
      set(t) {
        var i;
        if (!this.root.themes[t])
          throw `theme "${t}" is missing in this.themes`;
        if (((i = this.root.currentTheme) == null ? void 0 : i.name) == t)
          return;
        {
          const r = document.getElementById("theme");
          r && (document.head.removeChild(r), this.root.currentTheme = null);
        }
        const e = document.createElement("link");
        e.id = "theme", e.rel = "stylesheet", e.href = this.root.themes[t], document.head.appendChild(e), this.root.currentTheme = {
          name: t,
          href: this.root.themes[t]
        };
      }
    }, this.shadowRender();
  }
  shadowRender() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, e, i) {
    switch (t) {
      case "auto":
        this.ui.auto = i !== null;
        break;
      case "mode":
        this.ui.mode = i;
        break;
    }
  }
  /**
   * @param {boolean} state
   * @param {HTMLElement} target
   */
  setAuto(t, e = document.body) {
    if (!t) {
      if (!this.media) return;
      this.media.removeEventListener("change", this.mediaHandler), this.media = null, this.mediaHandler = null;
      return;
    }
    if (this.setMode(null, e), this.media) {
      this.mediaHandler(this.media);
      return;
    }
    this.mediaHandler = (i) => {
      i.matches ? e.setAttribute("data-theme", "dark") : e.setAttribute("data-theme", "light");
    }, this.media = window.matchMedia("(prefers-color-scheme: dark)"), this.media.addEventListener("change", this.mediaHandler), this.mediaHandler(this.media);
  }
  /**
   * @param {string | null} value
   * @param {HTMLElement} target
   */
  setMode(t, e = document.body) {
    this.mode = t, this.mode ? e.setAttribute("data-theme", t) : e.removeAttribute("data-theme");
  }
};
s(F, "register", () => {
  customElements.get("ui-theme-handler") || customElements.define("ui-theme-handler", F);
}), s(F, "observedAttributes", ["auto", "mode"]);
let At = F;
const U = class U extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.ui = {}, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
      <style>
        :host {
          display: block;
          width: 100%;
          height: 100%;
          color: inherit;
        }

        ::slotted(svg) {
          width: 100%;
          height: 100%;
        }
      </style>

      <slot></slot>
    `;
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(U, "register", () => {
  customElements.get("ui-svg") || customElements.define("ui-svg", U);
});
let Lt = U;
function It() {
  ot.register(), it.register(), rt.register(), st.register(), nt.register(), ct.register(), ht.register(), dt.register(), ut.register(), X.register(), at.register(), lt.register(), pt.register(), mt.register(), ft.register(), V.register(), vt.register(), yt.register(), kt.register(), wt.register(), xt.register(), Et.register(), Ct.register(), Rt.register(), Lt.register(), gt.register(), bt.register(), w.register(), At.register();
}
export {
  Pt as CleanUp,
  b as Events,
  it as UIAppBar,
  ot as UIAppBarItem,
  rt as UIButton,
  pt as UICheck,
  nt as UIContainer,
  ct as UIDialog,
  ut as UIDrawer,
  dt as UIDrawerGroup,
  ht as UIDrawerGroupItem,
  lt as UIFlexGrid,
  X as UIFlexGridItem,
  at as UIFlexGridRow,
  st as UIIconButton,
  mt as UIInput,
  gt as UILabel,
  wt as UILang,
  kt as UILangType,
  bt as UIPrimary,
  ft as UISearch,
  w as UISecondary,
  vt as UISelect,
  V as UISelectOption,
  xt as UISpinner,
  Et as UIStackLayout,
  Ct as UIStackLayoutPage,
  Rt as UIStore,
  yt as UITextarea,
  At as UIThemeHandler,
  St as css,
  Nt as draggable,
  a as html,
  _t as isAndroid,
  It as register,
  Gt as ripple,
  Ut as styles
};
