var Ct = Object.defineProperty;
var bt = (r) => {
  throw TypeError(r);
};
var xt = (r, e, t) => e in r ? Ct(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var i = (r, e, t) => xt(r, typeof e != "symbol" ? e + "" : e, t), St = (r, e, t) => e.has(r) || bt("Cannot " + t);
var p = (r, e, t) => (St(r, e, "read from private field"), t ? t.call(r) : e.get(r)), ft = (r, e, t) => e.has(r) ? bt("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(r) : e.set(r, t);
const vt = {
  onDragStart: null,
  onDragging: null,
  onDragEnd: null
};
function At(r, e = {}) {
  e = {
    ...vt,
    ...e
  };
  const t = () => {
    const n = [...r.parentNode.children].indexOf(r);
    r.draggable = !0, r.ondragstart = (u) => {
      u.dataTransfer.effectAllowed = "move", u.dataTransfer.dropEffect = "move", u.dataTransfer.setData(
        "text/plain",
        n.toString()
      ), e.onDragStart && e.onDragStart(n);
    }, r.ondragover = (u) => (u.preventDefault(), !1), r.ondragenter = (u) => {
      u.preventDefault(), e.onDragging && e.onDragging(n);
    }, r.ondrop = (u) => {
      u.preventDefault(), u.dataTransfer.dropEffect = "move";
      const Z = parseInt(
        u.dataTransfer.getData("text/plain"),
        10
      );
      e.onDragEnd && e.onDragEnd(Z, n);
    };
  }, o = () => {
    r.draggable = !1, r.ondragstart = null, r.ondragover = null, r.ondragenter = null, r.ondrop = null;
  };
  return t(), {
    /**
     * @param {DraggableOptions} _options
     */
    update(s) {
      e = {
        ...vt,
        ...s
      }, o(), t();
    },
    destroy: o
  };
}
var c;
class d {
  constructor() {
    /**
     * @type {any}
     */
    ft(this, c, {});
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  on(e, t) {
    if (typeof t != "function")
      throw `invalid event listener passed for "${e.toString()}" event!`;
    return p(this, c)[e] || (p(this, c)[e] = []), p(this, c)[e].push(t), () => {
      this.off(e, t);
    };
  }
  // }}}
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>)} listener
   */
  off(e, t) {
    if (!p(this, c)[e])
      throw `no listeners found for ${e.toString()}, there is nothing to delete`;
    let o = !1, s = 0;
    for (const n of p(this, c)[e])
      n === t && (p(this, c)[e].splice(s, 1), o = !0), s++;
    if (!o)
      throw `listener not found for ${e.toString()}, there is nothing to delete`;
    return this;
  }
  // }}}
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   */
  dispatch(e, t) {
    if (t === void 0) throw "data is undefined!";
    if (p(this, c)[e])
      for (const o of p(this, c)[e])
        o(t);
    return this;
  }
  // }}}
}
c = new WeakMap();
function wt(r, e) {
  const t = document.createElement("div");
  t.classList.add("ripple"), t.style.position = "absolute", t.style.color = "inherit", t.style.borderRadius = "50%", t.style.pointerEvents = "none", t.style.width = "100px", t.style.height = "100px", t.style.marginTop = "-50px", t.style.marginLeft = "-50px", t.style.opacity = `${e.opacity}`, t.style.backgroundColor = e.color, t.style.transform = "scale(0) translate(0, 0)", t.style.transition = `transform ${e.spreadDuration} ${e.spreadTiming} 0s,opacity ${e.clearDuration} ${e.clearTiming} 0s`, r.currentTarget.appendChild(t);
  const o = r.currentTarget.getBoundingClientRect();
  e.centered ? (t.style.top = `${o.height / 2}px`, t.style.left = `${o.width / 2}px`) : (t.style.top = `${r.clientY - o.top}px`, t.style.left = `${r.clientX - o.left}px`);
  const s = Math.max(o.width, o.height) * 0.02;
  return t.style.transform = `scale(${s}) translate(0, 0)`, t;
}
function yt(r) {
  r && (r.addEventListener("transitionend", (e) => {
    e.propertyName === "opacity" && r.remove();
  }), r.style.opacity = "0");
}
const kt = {
  color: "var(--ui-ripple-color, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  useClick: !1
};
function J(r, e = {}) {
  e = { ...kt, ...e };
  let t;
  const o = (n) => {
    t = wt(n, e);
  }, s = () => {
    yt(t);
  };
  return r.classList.add("ripple-container"), r.style.overflow = "hidden", e.useClick === !0 ? r.addEventListener("click", (n) => {
    t = wt(n, e), yt(t);
  }) : (r.addEventListener("pointerdown", o), r.addEventListener("pointerup", s), r.addEventListener("pointerleave", s)), () => {
    r.classList.remove("ripple-container"), r.removeEventListener("pointerdown", o), r.removeEventListener("pointerup", s), r.removeEventListener("pointerleave", s);
  };
}
function Et() {
  return /(android)/i.test(navigator.userAgent);
}
const a = String.raw, h = String.raw;
class l {
  constructor() {
    this.callbacks = [];
  }
  /**
   * @param {(() => void|Promise<void>)[]} cb
   */
  add(...e) {
    this.callbacks.push(...e);
  }
  run() {
    for (let e = 0; e < this.callbacks.length; e++)
      if (this.callbacks[e] !== null)
        try {
          this.callbacks[e](), this.callbacks[e] = null;
        } catch (t) {
          console.error("cleanup error:", t);
        }
    this.callbacks = this.callbacks.filter((e) => e !== null);
  }
}
const Mt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CleanUp: l,
  Events: d,
  createDraggable: At,
  createRipple: J,
  css: h,
  defaultRippleOptions: kt,
  html: a,
  isAndroid: Et
}, Symbol.toStringTag, { value: "Module" })), g = class g extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRender(), this.ui = {
      root: this,
      get leftSlot() {
        return [...this.root.querySelectorAll('[slot="left"]')];
      },
      get centerSlot() {
        return [...this.root.querySelectorAll('[slot="center"]')];
      },
      get rightSlot() {
        return [...this.root.querySelectorAll('[slot="right"]')];
      },
      get position() {
        return this.root.getAttribute("position") || g.defaultAttr.position;
      },
      set position(e) {
        if (e === null && (e = g.defaultAttr.position), e === null) {
          this.root.removeAttribute("position");
          return;
        }
        this.root.setAttribute("position", e);
      }
    }, this.render();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = a`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex !important;
                    position: absolute !important;
                    z-index: 100;
                    background-color: var(--ui-backdrop-bgColor);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                    overflow: hidden;
                    user-select: none;
                }

                :host([position="top"]) {
                    top: 0;
                    left: 0;
                    right: 0;
                    height: var(--ui-app-bar-height);
                    border-bottom: 1px solid var(--ui-borderColor);
                }

                :host > ui-flex-grid-row {
                    width: 100%;
                    height: 100%;
                    align-items: center;
                    justify-content: space-between;
                }

                :host > ui-flex-grid-row > * {
                    height: 100%;
                }

                :host > ui-flex-grid-row > *:nth-child(1),
                :host > ui-flex-grid-row > *:nth-child(3) {
                    width: fit-content;
                }

                :host > ui-flex-grid-row > [slot="left"] {
                    margin-left: 0 !important;
                }

                :host > ui-flex-grid-row > [slot="center"] {
                    width: 100%;
                }

                :host > ui-flex-grid-row > [slot="right"] {
                    margin-right: 0 !important;
                    justify-content: flex-end;
                }
            </style>

            <ui-flex-grid-row gap="0.25rem">
                <ui-flex-grid-row gap="0.25rem">
                    <slot name="left"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
                    <slot name="center"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row gap="0.25rem">
                    <slot name="right"></slot>
                </ui-flex-grid-row>
            </ui-flex-grid-row>
        `;
    for (const [e, t] of Object.entries(g.defaultAttr))
      !this.hasAttribute(e) && t !== null && this.setAttribute(e, t);
  }
  render() {
  }
};
i(g, "register", () => {
  customElements.get("ui-app-bar") || customElements.define("ui-app-bar", g);
}), i(g, "defaultAttr", {
  position: "top"
});
let X = g;
const z = class z extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 1;
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      enable() {
        this.root.style.display = "flex";
      },
      disable() {
        this.root.style.display = "none";
      },
      /**
       * @returns {T}
       */
      getChild() {
        return this.root.querySelector("*");
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(z, "register", () => {
  customElements.get("ui-app-bar-item") || customElements.define("ui-app-bar-item", z);
});
let Q = z;
const w = class w extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            display: flex !important;
            align-items: center;
            justify-content: center;
            position: relative !important;
            padding: var(--ui-spacing) calc(var(--ui-spacing) * 2.5);
            border: 1px solid currentColor;
            border-radius: var(--ui-radius);
            overflow: hidden;
            text-transform: capitalize;
            cursor: pointer;
            outline: none;
            user-select: none;
            font-size: 1.1rem;
            font-weight: 450;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-button-fontVariation);
        }

        :host([variant="full"]) {
            border: none;
        }

        :host([variant="full"][color="primary"]) {
            background-color: var(--ui-primary-bgColor);
            color: var(--ui-primary-color);
        }

        :host([variant="full"][color="secondary"]) {
            background-color: var(--ui-secondary-bgColor);
            color: var(--ui-secondary-color);
        }

        :host([variant="full"][color="destructive"]) {
            background-color: var(--ui-destructive-bgColor);
            color: var(--ui-destructive-color);
        }

        :host([variant="outline"]) {
            border-color: currentColor;
            background-color: transparent;
        }

        :host([variant="outline"][color="primary"]) {
            color: var(--ui-primary-bgColor);
        }

        :host([variant="outline"][color="secondary"]) {
            color: var(--ui-secondary-bgColor);
        }

        :host([variant="outline"][color="destructive"]) {
            color: var(--ui-destructive-bgColor);
        }

        :host([variant="ghost"]) {
            border-color: transparent;
            background-color: transparent;
            font-weight: 900;
        }

        :host([variant="ghost"][color="primary"]) {
            color: var(--ui-primary-bgColor);
        }

        :host([variant="ghost"][color="secondary"]) {
            color: var(--ui-secondary-bgColor);
        }

        :host([variant="ghost"][color="destructive"]) {
            color: var(--ui-destructive-bgColor);
        }

        :host([disabled]),
        :host([disabled]:hover),
        :host([disabled]:active) {
            background-color: transparent;
            opacity: 0.25;
            cursor: default;
            pointer-events: none;
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.setAttribute("role", "button"), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      /**
       * @type {Events<UIButtonEvents>}
       */
      events: new d(),
      /**
       * @private
       * @type {(() => void) | null}
       */
      removeRipple: null,
      /**
       * @returns {UIButtonColor}
       */
      getColor() {
        return this.root.getAttribute("color");
      },
      /**
       * @param {UIButtonColor} value
       */
      setColor(t) {
        this.root.setAttribute("color", t);
      },
      /**
       * @returns {UIButtonVariant}
       */
      getVariant() {
        return this.root.getAttribute("variant");
      },
      /**
       * @param {UIButtonVariant} value
       */
      setVariant(t) {
        this.root.setAttribute("variant", t);
      },
      disable() {
        this.root.setAttribute("disabled", "");
      },
      enable() {
        this.root.removeAttribute("disabled");
      },
      enableRipple() {
        this.removeRipple || (this.removeRipple = J(this.root, { centered: !0 }), this.root.removeAttribute("no-ripple"));
      },
      disableRipple() {
        this.removeRipple && (this.removeRipple(), this.removeRipple = null, this.root.setAttribute("no-ripple", ""));
      }
    }, this.cleanup = new l(), this.shadowRender();
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple(), this.bindClickEvent();
  }
  disconnectedCallback() {
    this.ui.cleanup.run(), this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "no-ripple":
        s !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
      case "color":
        s !== null && (["primary", "secondary", "destructive"].includes(
          s
        ) ? this.style.color = null : this.style.color = s);
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
  /**
   * @private
   */
  bindClickEvent() {
    const t = async () => {
      this.ui.events.dispatch("click", this);
    };
    this.addEventListener("click", t), this.cleanup.add(() => {
      this.removeEventListener("click", t);
    });
  }
};
i(w, "register", () => {
  customElements.get("ui-button") || customElements.define("ui-button", w);
}), i(w, "observedAttributes", ["no-ripple", "color"]);
let W = w;
const y = class y extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            display: flex !important;
            align-items: center;
            justify-content: center;
            position: relative;
            width: 2rem;
            height: 2rem;
            padding: calc(var(--ui-spacing) / 2);
            border: 1px solid currentColor;
            border-radius: var(--ui-radius);
            outline: none;
            overflow: hidden;
            cursor: pointer;
            user-select: none;
            font-size: 1.1rem;
            font-weight: 450;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-button-fontVariation);
        }

        :host([ghost]) {
            border-color: transparent !important;
            box-shadow: none;
            font-weight: 900;
        }

        :host([color="primary"]) {
            color: var(--ui-primary-bgColor);
            border-color: var(--ui-primary-bgColor);
        }

        :host([color="secondary"]) {
            color: var(--ui-secondary-bgColor);
            border-color: var(--ui-secondary-bgColor);
        }

        :host([color="destructive"]) {
            color: var(--ui-destructive-bgColor);
            border-color: var(--ui-destructive-bgColor);
        }

        /* :disabled */

        :host([disabled]),
        :host([disabled]:hover),
        :host([disabled]:active) {
            opacity: 0.25;
            cursor: default;
            pointer-events: none;
        }
    `);
    i(this, "shadowTemplate", () => a` <ui-svg><slot></slot></ui-svg> `);
    this.attachShadow({ mode: "open" }), this.setAttribute("role", "button"), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      /**
       * @type {Events<UIIconButtonEvents>}
       */
      events: new d(),
      /**
       * @private
       * @type {(() => void) | null}
       */
      removeRipple: null,
      /**
       * @returns {UIIconButtonColor}
       */
      getColor() {
        return this.root.getAttribute("color");
      },
      /**
       * @param {UIIconButtonColor} value
       */
      setColor(t) {
        this.root.setAttribute("color", t);
      },
      /**
       * @returns {boolean}
       */
      getGhost() {
        return this.root.hasAttribute("ghost");
      },
      /**
       * @param {boolean} state
       */
      setGhost(t) {
        t ? this.root.setAttribute("ghost", "") : this.root.removeAttribute("ghost");
      },
      disable() {
        this.root.setAttribute("disabled", "");
      },
      enable() {
        this.root.removeAttribute("disabled");
      },
      enableRipple() {
        this.removeRipple || (this.removeRipple = J(this.root, { centered: !0 }), this.root.removeAttribute("no-ripple"));
      },
      disableRipple() {
        this.removeRipple && (this.removeRipple(), this.removeRipple = null, this.root.setAttribute("no-ripple", ""));
      }
    }, this.cleanup = new l(), this.shadowRender();
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple(), this.bindClickEvent();
  }
  disconnectedCallback() {
    this.ui.cleanup.run(), this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "no-ripple":
        s !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
      case "color":
        s !== null && (["primary", "secondary", "destructive"].includes(
          s
        ) ? this.style.color = null : this.style.color = s);
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
  /**
   * @private
   */
  bindClickEvent() {
    const t = async () => {
      this.ui.events.dispatch("click", this);
    };
    this.addEventListener("click", t), this.cleanup.add(() => {
      this.removeEventListener("click", t);
    });
  }
};
i(y, "register", () => {
  customElements.get("ui-icon-button") || customElements.define("ui-icon-button", y);
}), i(y, "observedAttributes", ["no-ripple", "color"]);
let B = y;
const q = class q extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            display: block;
            width: 100%;
            max-width: 65rem;
            margin: 0 auto !important;
            padding: var(--ui-spacing);
        }
    `);
    i(this, "shadowTemplate", () => a` <slot></slot> `);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new l()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(q, "register", () => {
  customElements.get("ui-container") || customElements.define("ui-container", q);
});
let _ = q;
const Tt = a`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M7 17L16.8995 7.10051"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M7 7.00001L16.8995 16.8995"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, P = class P extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host dialog * {
            box-sizing: border-box;
        }

        dialog {
            position: fixed !important;

            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);

            max-width: 100%;
            max-height: 100%;

            margin: 0;
            padding: 0;

            border: none;
            outline: none;

            background-color: transparent;

            -ms-overflow-style: none;
            scrollbar-width: none;

            z-index: 999;
        }

        dialog::-webkit-scrollbar {
            display: none;
        }

        dialog::backdrop {
            background-color: var(--ui-backdrop-bgColor);
            backdrop-filter: var(--ui-backdropFilter);
        }

        dialog > .container {
            background-color: var(--ui-bgColor);
            color: var(--ui-color);

            border: 1px solid var(--ui-borderColor);
            border-radius: var(--ui-radius);

            padding: var(--ui-spacing);

            display: flex;
            flex-direction: column;
            justify-content: space-between;

            position: relative;
        }

        :host([fullscreen]) dialog {
            width: 100%;
            height: 100%;
        }

        :host([fullscreen]) dialog > .container {
            width: calc(100% - var(--ui-spacing) * 2);
            height: calc(
                100% -
                    (
                        env(safe-area-inset-top, 0) +
                            env(safe-area-inset-bottom, 0) +
                            (var(--ui-spacing) * 2)
                    )
            );

            margin: var(--ui-spacing);
            margin-top: calc(env(safe-area-inset-top, 0) + var(--ui-spacing));
            margin-bottom: calc(
                env(safe-area-inset-bottom, 0) + var(--ui-spacing)
            );
        }

        /*
        * Header Styles
        */

        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;

            border-top-right-radius: var(--ui-radius);
            border-top-left-radius: var(--ui-radius);

            width: 100%;
            height: var(--ui-dialog-header-height);
        }

        .header h4 {
            margin: auto 0;
        }

        :host([fullscreen]) .header {
            z-index: 15;
            position: absolute;
            top: var(--ui-spacing);
            right: var(--ui-spacing);
            left: var(--ui-spacing);
            width: calc(100% - var(--ui-spacing) * 2);
        }

        /*
        * Content Styles
        */

        .content {
            padding: var(--ui-spacing);
            height: fit-content;
            min-width: fit-content;
            width: 100%;
        }

        :host([fullscreen]) .content {
            z-index: 10;
            position: absolute;
            top: calc(var(--ui-dialog-header-height) + var(--ui-spacing));
            bottom: calc(var(--ui-dialog-footer-height) + var(--ui-spacing));
            right: var(--ui-spacing);
            left: var(--ui-spacing);
            padding: unset;
            height: unset;
            width: unset;
            min-width: unset;
        }

        /*
         * Footer Styles
         */

        .footer {
            margin-top: var(--ui-spacing);
            border-bottom-right-radius: var(--ui-radius);
            border-bottom-left-radius: var(--ui-radius);

            width: 100%;
            height: var(--ui-dialog-footer-height);
        }

        :host([fullscreen]) .footer {
            z-index: 15;
            position: absolute;
            right: var(--ui-spacing);
            bottom: var(--ui-spacing);
            left: var(--ui-spacing);
            width: calc(100% - var(--ui-spacing) * 2);
        }

        .footer ui-flex-grid-row {
            height: 100%;
            flex-wrap: nowrap;
            justify-content: flex-end;
            align-items: center;
        }
    `);
    i(this, "shadowTemplate", () => a`
        <dialog>
            <div class="container">
                <div class="header">
                    <span style="white-space: nowrap;">
                        <h3 name="title"></h3>
                    </span>

                    <ui-icon-button
                        style="width: var(--ui-dialog-header-height); height: 100%;"
                        ghost
                    >
                        ${Tt}
                    </ui-icon-button>
                </div>

                <div class="content">
                    <slot></slot>
                </div>

                <div class="footer">
                    <ui-flex-grid-row gap="calc(var(--ui-spacing) / 2)">
                        <slot name="actions"></slot>
                    </ui-flex-grid-row>
                </div>
            </div>
        </dialog>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      shadowAttr: {
        title: ""
      },
      cleanup: new l(),
      /** @type {Events<T>} */
      events: new d(),
      /**
       * @private
       * @type {HTMLElement | null}
       */
      title: null,
      /**
       * @private
       * @type {HTMLDialogElement}
       */
      dialog: null,
      getFullscreen() {
        return this.root.hasAttribute("fullscreen");
      },
      /**
       * @param {boolean} state
       */
      setFullscreen(t) {
        t ? this.root.setAttribute("fullscreen", "") : this.root.removeAttribute("fullscreen");
      },
      getTitle() {
        var t;
        return ((t = this.title) == null ? void 0 : t.innerText) || "";
      },
      /**
       * @param {string} value
       */
      setTitle(t) {
        this.title.innerText = this.shadowAttr.title = t;
      },
      getDialogElement() {
        return this.dialog;
      },
      /**
       * @param {boolean} modal
       * @param {boolean} [inert] - This will prevent the autofocus on input elements (default: true)
       */
      open(t = !1, o = !0) {
        const s = this.dialog.inert;
        this.dialog.inert = o, t ? this.dialog.showModal() : this.dialog.show(), this.events.dispatch("open", null), this.dialog.inert = s;
      },
      close() {
        this.dialog.close(), this.events.dispatch("close", null);
      }
    }, this.cleanup = new l(), this.render({ ...this.ui.shadowAttr });
  }
  connectedCallback() {
    const t = this.shadowRoot.querySelector(".header ui-icon-button"), o = () => {
      this.ui.close();
    };
    t.addEventListener("click", o);
    const s = this.shadowRoot.querySelector("dialog"), n = (u) => {
      u.preventDefault();
    };
    s.addEventListener("cancel", n), this.cleanup.add(() => {
      t.removeEventListener("click", o), s.removeEventListener("cancel", n);
    });
  }
  disconnectedCallback() {
    this.ui.cleanup.run(), this.cleanup.run();
  }
  /**
   * @param {Object} options
   * @param {string} options.title
   */
  render({ title: t }) {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `, this.ui.dialog = this.shadowRoot.querySelector("dialog"), this.ui.title = this.shadowRoot.querySelector('[name="title"]'), this.ui.setTitle(t);
  }
};
i(P, "register", () => {
  customElements.get("ui-dialog") || customElements.define("ui-dialog", P);
});
let I = P;
const k = class k extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
            * {
                box-sizing: border-box;
            }

            :host {
                display: block;

                position: absolute !important;
                z-index: 150;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;

                overflow: hidden;

                transition: left 0s ease 0.5s;
            }

            :host([open]) {
                background-color: var(--ui-backdrop-bgColor);
                -webkit-backdrop-filter: var(--ui-backdropFilter);
                backdrop-filter: var(--ui-backdropFilter);

                left: 0;

                transition: none;
            }

            aside {
                position: absolute;
                z-index: 150;
                top: 0;
                left: -100%;
                width: 20rem; /* TODO: Get drawer width from attr (render) */
                max-width: 100%;
                height: 100%;

                overflow-x: hidden;
                overflow-y: auto;
                scroll-behavior: smooth;

                -ms-overflow-style: none;
                scrollbar-width: none;

                background-color: var(--ui-card-bgColor);
                color: var(--ui-card-color);

                /*
                background-color: var(--ui-backdrop-bgColor);
                -webkit-backdrop-filter: var(--ui-backdropFilter);
                backdrop-filter: var(--ui-backdropFilter);
                */

                border-right: 1px solid var(--ui-card-borderColor);

                transition: left 0.5s ease;
            }

            aside::-webkit-scrollbar {
                display: none;
            }

            :host([open]) aside {
                left: 0;
            }
        `);
    i(this, "shadowTemplate", () => a`
        <aside>
            <slot></slot>
        </aside>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      /**
       * @type {Events<UIDrawerEvents>}
       */
      events: new d(),
      getOpen() {
        return this.root.hasAttribute("open");
      },
      /**
       * @param {boolean} state
       */
      setOpen(t) {
        t ? this.root.setAttribute("open", "") : this.root.removeAttribute("open");
      }
    }, this.shadowRender();
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "open":
        s !== null ? this.ui.events.dispatch("open", this) : this.ui.events.dispatch("close", this);
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
    const t = this.shadowRoot.querySelector("aside");
    this.addEventListener("click", () => {
      this.ui.setOpen(!1);
    }), t.addEventListener("click", (o) => {
      o.stopPropagation();
    });
  }
};
i(k, "register", () => {
  customElements.get("ui-drawer") || customElements.define("ui-drawer", k);
}), i(k, "observedAttributes", ["open"]);
let U = k;
const C = class C extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        ul {
            list-style: none;
            padding: var(--ui-spacing);
            overflow: hidden;
        }

        ui-drawer-group-item:not(.visible) {
            display: none;
        }
    `);
    i(this, "shadowTemplate", () => a`
        <ul>
            <ui-drawer-group-item class="ui-drawer-group-title">
            </ui-drawer-group-item>

            <slot></slot>
        </ul>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      getTitle() {
        return this.root.getAttribute("title") || null;
      },
      /**
       * @param {string} value
       */
      setTitle(t) {
        let o = this.root.shadowRoot.querySelector(
          ".ui-drawer-group-title"
        );
        o.classList.add("visible"), o.innerHTML = `
                    <span
                        style="
                            font-size: 1.5rem;
                            font-weight: 600;
                            font-variation-settings: var(--ui-heading-fontVariation);
                        "
                    >
                        ${t}
                    </span>
                `;
      },
      removeTitle() {
        this.root.shadowRoot.querySelector(
          ".ui-drawer-group-title"
        ).classList.remove("visible");
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "title":
        s === "" ? this.removeAttribute("title") : s !== null ? this.ui.setTitle(s) : this.ui.removeTitle();
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(C, "register", () => {
  customElements.get("ui-drawer-group") || customElements.define("ui-drawer-group", C);
}), i(C, "observedAttributes", ["title"]);
let tt = C;
const j = class j extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        li {
            padding: var(--ui-spacing) calc(var(--ui-spacing) * 1.5);
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
        }

        ::slotted(*) {
            width: 100%;
        }
    `);
    i(this, "shadowTemplate", () => a`
        <li>
            <slot></slot>
        </li>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new l()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(j, "register", () => {
  customElements.get("ui-drawer-group-item") || customElements.define("ui-drawer-group-item", j);
});
let et = j;
const m = class m extends HTMLElement {
  constructor() {
    super();
    /**
     * @param {Object} options
     * @param {string} options.flex
     */
    i(this, "shadowCSS", ({ flex: t }) => h`
        :host {
            flex: ${t};
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      shadowAttr: {
        flex: m.defaultFlex
      },
      getFlex() {
        return this.shadowAttr.flex;
      },
      /**
       * @param {string | null} value
       */
      setFlex(t) {
        this.shadowAttr.flex = t || m.defaultFlex, this.root.shadowRender({ ...this.shadowAttr });
      }
    }, this.shadowRender({ ...this.ui.shadowAttr });
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "flex":
        this.ui.setFlex(s);
        break;
    }
  }
  /**
   * @param {Object} options
   * @param {string} options.flex
   */
  shadowRender({ flex: t }) {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS({ flex: t }).trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(m, "register", () => {
  customElements.get("ui-flex-grid-item") || customElements.define("ui-flex-grid-item", m);
}), i(m, "observedAttributes", ["flex"]), i(m, "defaultFlex", "1");
let it = m;
const b = class b extends HTMLElement {
  constructor() {
    super();
    /**
     * @param {Object} options
     * @param {string} options.gap
     */
    i(this, "shadowCSS", ({ gap: t }) => h`
        :host {
            display: flex !important;
            flex-flow: row nowrap;
            position: relative !important;
            width: 100%;
        }

        :host > ::slotted(*) {
            margin: 0 ${t} !important;
        }

        :host > ::slotted(*:first-child) {
            margin-left: 0 !important;
        }

        :host > ::slotted(*:last-child) {
            margin-right: 0 !important;
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      shadowAttr: {
        gap: b.defaultGap
      },
      getGap() {
        return this.shadowAttr.gap;
      },
      /**
       * @param {string | null} value
       */
      setGap(t) {
        this.shadowAttr.gap = t || b.defaultGap, this.root.shadowRender({ ...this.shadowAttr });
      }
    }, this.shadowRender({ ...this.ui.shadowAttr });
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "gap":
        this.ui.setGap(s);
        break;
    }
  }
  /**
   * @param {Object} options
   * @param {string} options.gap
   */
  shadowRender({ gap: t }) {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS({ gap: t }).trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(b, "register", () => {
  customElements.get("ui-flex-grid-row") || customElements.define("ui-flex-grid-row", b);
}), i(b, "observedAttributes", ["gap"]), i(b, "defaultGap", "0");
let st = b;
const f = class f extends HTMLElement {
  constructor() {
    super();
    /**
     * @param {Object} options
     * @param {string} options.gap
     */
    i(this, "shadowCSS", ({ gap: t }) => h`
        :host {
            display: flex !important;
            flex-flow: column nowrap;
            position: relative !important;
            width: 100%;
            height: fit-content;
        }

        :host > ::slotted(*) {
            margin: ${t} 0 !important;
        }

        :host > ::slotted(*:first-child) {
            margin-top: 0 !important;
        }

        :host > ::slotted(*:last-child) {
            margin-bottom: 0 !important;
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      /**
       * @private
       */
      root: this,
      cleanup: new l(),
      shadowAttr: {
        gap: f.defaultGap
      },
      getGap() {
        return this.shadowAttr.gap;
      },
      /**
       * @param {string | null} value
       */
      setGap(t) {
        this.shadowAttr.gap = t || f.defaultGap, this.root.shadowRender({ ...this.shadowAttr });
      }
    }, this.shadowRender({ ...this.ui.shadowAttr });
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "gap":
        this.ui.setGap(s);
        break;
    }
  }
  /**
   * @param {Object} options
   * @param {string} options.gap
   */
  shadowRender({ gap: t }) {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS({ gap: t }).trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(f, "register", () => {
  customElements.get("ui-flex-grid") || customElements.define("ui-flex-grid", f);
}), i(f, "observedAttributes", ["gap"]), i(f, "defaultGap", "0");
let ot = f;
const F = class F extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        :host {
            font-size: 1.1rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-text-primary-fontVariation);
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new l()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(F, "register", () => {
  customElements.get("ui-primary") || customElements.define("ui-primary", F);
});
let M = F;
const V = class V extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        :host {
            font-size: 0.9rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-text-secondary-fontVariation);
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new l()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(V, "register", () => {
  customElements.get("ui-secondary") || customElements.define("ui-secondary", V);
});
let v = V;
const x = class x extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            position: relative !important;
            display: flex !important;
            flex-direction: row;
            width: 100%;
            padding: var(--ui-spacing);
            border-radius: var(--ui-radius);
        }

        :host > .text {
            display: flex;
            flex: 1;
            flex-direction: column;
            justify-content: center;
            margin-right: var(--ui-spacing);
        }

        :host > .input {
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
    `);
    i(this, "shadowTemplate", () => a`
        <span class="text">
            <ui-primary></ui-primary>
            <ui-secondary></ui-secondary>
        </span>

        <span class="input">
            <slot name="input"></slot>
            <slot></slot>
        </span>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      /** @private */
      running: !1,
      /**
       * @private
       * @type {(() => void|Promise<void>) | null}
       */
      removeRipple: null,
      /** @private */
      onClick: async () => {
        this.ui.getInputSlot().forEach((t) => t.click());
      },
      /** @private */
      onInputClick: async (t) => {
        t.stopPropagation();
      },
      getPrimary() {
        return this.root.getAttribute("primary");
      },
      /**
       * @param {string | null} value
       */
      setPrimary(t) {
        if (t === null) {
          this.root.removeAttribute("primary");
          return;
        }
        this.root.setAttribute("primary", t);
      },
      getSecondary() {
        return this.root.getAttribute("secondary");
      },
      /**
       * @param {string | null} value
       */
      setSecondary(t) {
        if (t === null) {
          this.root.removeAttribute("secondary");
          return;
        }
        this.root.setAttribute("secondary", t);
      },
      /**
       * @returns {HTMLElement[]}
       */
      getInputSlot() {
        return [...this.root.querySelectorAll('[slot="input"]')];
      },
      enableRipple() {
        this.removeRipple || (this.removeRipple = J(this.root), this.root.style.cursor = "pointer", this.startInputHandling());
      },
      disableRipple() {
        this.removeRipple && this.removeRipple(), this.stopInputHandling();
      },
      /** @private */
      startInputHandling() {
        this.running || (this.root.addEventListener("click", this.onClick), this.getInputSlot().forEach((t) => {
          t.addEventListener("click", this.onInputClick);
        }), this.running = !0);
      },
      /**
       * @private
       */
      stopInputHandling() {
        this.root.removeEventListener("click", this.onClick), this.getInputSlot().forEach((t) => {
          t.removeEventListener("click", this.onInputClick);
        }), this.running = !1;
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "ripple":
        s !== null ? this.ui.enableRipple() : this.ui.disableRipple();
        break;
      case "primary":
        this.shadowRoot.querySelector("ui-primary").innerHTML = s || "";
        break;
      case "secondary":
        this.shadowRoot.querySelector("ui-secondary").innerHTML = s || "";
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(x, "register", () => {
  M.register(), v.register(), customElements.get("ui-label") || customElements.define("ui-label", x);
}), i(x, "observedAttributes", ["ripple", "secondary", "primary"]);
let rt = x;
const S = class S extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            display: block;
            position: relative;
            width: 100%;
            height: fit-content;
        }

        input {
            width: 100%;
            display: block;
            margin: 0;
            padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
            border: none !important;
            border-radius: inherit;
            outline: none !important;
            font-size: 0.9rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-input-fontVariation);
            accent-color: var(--ui-primary-bgColor);
            background-color: transparent !important;
        }

        .container {
            width: 100%;
            border: none;
            border: 1px solid var(--ui-borderColor);
            border-radius: var(--ui-radius);
            transition: border-color 0.25s linear;
        }

        .container:has(input:focus) {
            border-color: var(--ui-primary-bgColor);
        }

        :host([invalid]) .container {
            border-color: var(--ui-destructive-bgColor);
        }

        ::slotted([slot="title"]) {
            display: block;
            padding: 0 var(--ui-spacing);
            user-select: none;
            transform: translateY(calc(var(--ui-spacing) / 2));
        }
    `);
    i(this, "shadowTemplate", () => a`
        <div class="container">
            <slot name="title"></slot>
            <input />
        </div>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      /** @type {HTMLInputElement | null} */
      input: null,
      /**
       * @type {Events<E>}
       */
      events: new d(),
      /**
       * @param {string | null} v
       */
      setTitle(t) {
        if (t === null) {
          this.root.removeAttribute("title");
          return;
        }
        this.root.setAttribute("title", t);
      },
      getTitle() {
        return this.root.getAttribute("title");
      },
      /**
       * @param {UIInputTypes | null} value
       */
      setType(t) {
        if (t === null) {
          this.root.removeAttribute("type");
          return;
        }
        this.root.setAttribute("type", t);
      },
      /**
       * @returns {UIInputTypes}
       */
      getType() {
        return this.root.getAttribute("type") || "text";
      },
      /**
       * @param {UIInputTypeValues[T] | null} value
       */
      setValue(t) {
        this.input.value = (t || "").toString();
      },
      /**
       * @returns {UIInputTypeValues[T]}
       */
      getValue() {
        const t = this.input.value;
        switch (this.getType()) {
          case "number":
            return t ? parseFloat(t) : NaN;
          default:
            return t;
        }
      },
      /**
       * @param {string | null} value
       */
      setPlaceholder(t) {
        if (t === null) {
          this.root.removeAttribute("placeholder");
          return;
        }
        this.root.setAttribute("placeholder", t);
      },
      /**
       * @returns {string}
       */
      getPlaceholder() {
        return this.root.getAttribute("placeholder");
      },
      /**
       * @param {boolean} state
       */
      setInvalid(t) {
        if (t === null || t === !1) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      /**
       * @returns {boolean}
       */
      getInvalid() {
        return this.root.hasAttribute("invalid");
      },
      /**
       * @param {UIInputTypeValues[T] | null} n
       */
      setMin(t) {
        if (t === null) {
          this.root.removeAttribute("min");
          return;
        }
        this.root.setAttribute("min", t.toString());
      },
      /**
       * @returns {UIInputTypeValues[T]}
       */
      getMin() {
        const t = this.root.getAttribute("min");
        switch (this.input.type) {
          case "number":
            return t ? parseFloat(t) : NaN;
          default:
            return t;
        }
      },
      /**
       * @param {UIInputTypeValues[T] | null} n
       */
      setMax(t) {
        t === null && this.root.removeAttribute("max"), this.root.setAttribute("max", t.toString());
      },
      /**
       * @returns {UIInputTypeValues[T]}
       */
      getMax() {
        const t = this.root.getAttribute("max");
        switch (this.input.type) {
          case "number":
            return t ? parseFloat(t) : NaN;
          default:
            return t;
        }
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "title":
        let n = this.querySelector('[slot="title"]');
        if (s === null && n && (this.removeChild(n), n = null), s === null)
          return;
        n || (n = new v(), n.slot = "title", this.appendChild(n)), n.innerHTML = s;
        break;
      case "type":
        this.ui.input.type = s || "text";
        break;
      case "value":
        this.ui.setValue(s);
        break;
      case "placeholder":
        this.ui.input.placeholder = s || "";
        break;
      case "invalid":
        this.ui.input.ariaInvalid = s;
        break;
      case "min":
        this.ui.input.min = s || "";
        break;
      case "max":
        this.ui.input.max = s || "";
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `, this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = this.getAttribute("type") || "text", this.ui.input.oninput = () => this.ui.events.dispatch("input", this.ui.getValue()), this.ui.input.onchange = () => this.ui.events.dispatch("change", this.ui.getValue());
  }
  /**
   * @param {FocusOptions | null} [options]
   */
  focus(t = null) {
    this.shadowRoot.querySelector("input").focus(t);
  }
  blur() {
    this.shadowRoot.querySelector("input").blur();
  }
};
i(S, "register", () => {
  customElements.get("ui-input") || customElements.define("ui-input", S);
}), i(S, "observedAttributes", [
  "title",
  "type",
  "value",
  "placeholder",
  "invalid",
  "min",
  "max"
]);
let nt = S;
const Rt = a`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M17 9.5L12 14.5L7 9.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, O = class O extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        :host {
            display: none;
            align-items: center;

            padding: var(--ui-spacing);
            padding-right: 2.5rem;

            height: calc(1em * var(--ui-lineHeight) + var(--ui-spacing) * 2);

            white-space: nowrap;
            text-overflow: ellipsis;

            transition:
                background-color 0.25s linear,
                color 0.25s linear;

            overflow: hidden;
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.setAttribute("role", "button"), this.ui = {
      /** @private */
      root: this,
      getValue() {
        return this.root.getAttribute("value");
      },
      /**
       * @param {string | null} value
       */
      setValue(t) {
        if (t === null) {
          this.root.removeAttribute("value");
          return;
        }
        this.root.setAttribute("value", t);
      },
      getSelected() {
        return this.root.hasAttribute("selected");
      },
      /**
       * @param {boolean} state
       */
      setSelected(t) {
        if (!t) {
          this.root.removeAttribute("selected");
          return;
        }
        this.root.setAttribute("selected", "");
      }
    }, this.shadowRender();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(O, "register", () => {
  customElements.get("ui-select-option") || customElements.define("ui-select-option", O);
});
let H = O;
const D = class D extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            --ui-bgColor: "transparent";
            --items-length: 0;

            position: relative !important;
            display: block !important;

            width: 100%;
            height: calc(1em * var(--ui-lineHeight) + var(--ui-spacing) * 2);
            transition: height 0.25s ease;

            background-color: var(--ui-bgColor);
            color: var(--ui-color);

            border: 1px solid var(--ui-borderColor);
            border-radius: var(--ui-radius);

            line-height: 1.15;

            overflow: hidden;

            font-size: 0.9rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-select-fontVariation);
        }

        .options {
            cursor: pointer;
            display: none;
            display: flex;
            flex-direction: column;
            min-height: 100%;
        }

        .icon {
            display: flex;
            justify-content: center;
            align-items: center;
            position: absolute;
            top: 0;
            right: 0;
            width: 2.5rem;
            height: 100%;
            color: var(--ui-primary-bgColor);
        }

        ::slotted(ui-select-option) {
            display: flex;
        }

        :host(.open) {
            height: calc(
                (1em * var(--ui-lineHeight) + var(--ui-spacing) * 2) *
                    var(--items-length)
            );
        }

        :host(.open) .options {
            display: block;
        }

        :host(.open) .icon {
            display: none;
        }

        :host(.open) ::slotted(ui-select-option[selected]) {
            background-color: var(--ui-primary-bgColor);
            color: var(--ui-primary-color);
        }

        :host(.open) ::slotted(ui-select-option:not([selected]):hover) {
            background-color: hsla(var(--ui-color-hsl), 0.1);
        }

        :host(:not(.open))
            .options:has(> ::slotted(ui-select-option[selected])) {
            display: block;
        }

        :host(:not(.open)) ::slotted(ui-select-option:not([selected])) {
            display: none;
        }
    `);
    i(this, "shadowTemplate", () => a`
        <div class="options">
            <div class="icon"><ui-svg>${Rt}</ui-svg></div>

            <slot></slot>
        </div>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /**
       * @private
       */
      root: this,
      cleanup: new l(),
      /**
       *  @type {Events<UISelectEvents>}
       */
      events: new d(),
      isOpen() {
        this.root.hasAttribute("open");
      },
      open() {
        this.root.setAttribute("open", "");
      },
      close() {
        this.root.removeAttribute("open");
      },
      /**
       * @returns {UISelectOption[]}
       */
      getOptions() {
        return [...this.root.children].filter(
          (t) => t instanceof H
        );
      },
      /**
       * @returns {UISelectOption | null}
       */
      getSelectedOption() {
        try {
          return this.getOptions().find(
            (t) => !!t.ui.getSelected()
          ) || null;
        } catch {
          return null;
        }
      }
    }, this.cleanup = new l(), this.shadowRender();
  }
  connectedCallback() {
    const t = this.shadowRoot.querySelector(".options"), o = async (n) => {
      (n.composedPath() || []).forEach((u) => {
        u instanceof H && ([...this.querySelectorAll("ui-select-option")].forEach(
          (Z) => Z.removeAttribute("selected")
        ), u.setAttribute("selected", ""), this.ui.events.dispatch("change", u));
      });
    }, s = (n) => {
      this.classList.toggle("open") ? (n.stopPropagation(), this.addEventListener("click", o)) : setTimeout(
        () => this.removeEventListener("click", o)
      );
    };
    t.addEventListener("click", s), this.cleanup.add(() => {
      this.removeEventListener("click", s), t.removeEventListener("click", s);
    }), this.style.setProperty(
      "--items-length",
      this.querySelectorAll("ui-select-option").length.toString()
    );
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(D, "register", () => {
  customElements.get("ui-select") || customElements.define("ui-select", D);
});
let at = D;
const Lt = a`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <g clip-path="url(#clip0_15_152)">
                <rect width="24" height="24" fill="none"></rect>
                <circle
                    cx="10.5"
                    cy="10.5"
                    r="6.5"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path
                    d="M19.6464 20.3536C19.8417 20.5488 20.1583 20.5488 20.3536 20.3536C20.5488 20.1583 20.5488 19.8417 20.3536 19.6464L19.6464 20.3536ZM20.3536 19.6464L15.3536 14.6464L14.6464 15.3536L19.6464 20.3536L20.3536 19.6464Z"
                    fill="currentColor"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_15_152">
                    <rect width="24" height="24" fill="none"></rect>
                </clipPath>
            </defs>
        </g>
    </svg>
`, A = class A extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        * {
            box-sizing: border-box;
        }

        :host {
            display: block;
            position: relative;
            width: 100%;
            height: fit-content;
        }

        input {
            width: 100%;
            display: block;
            margin: 0;
            padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
            border: none !important;
            border-radius: inherit;
            outline: none !important;
            font-size: 0.9rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-input-fontVariation);
            accent-color: var(--ui-primary-bgColor);
            background-color: transparent !important;
        }

        :host(:not([no-submit])) input {
            width: calc(100% - 2rem);
        }

        .container {
            position: relative;
            width: 100%;
            border: none;
            border: 1px solid var(--ui-borderColor);
            border-radius: var(--ui-radius);
            transition: border-color 0.25s linear;
            background-color: var(--ui-backdrop-bgColor);
            -webkit-backdrop-filter: var(--ui-backdropFilter);
            backdrop-filter: var(--ui-backdropFilter);
        }

        .container:has(input:focus) {
            border-color: var(--ui-primary-bgColor);
        }

        :host([invalid]) .container {
            border-color: var(--ui-destructive-bgColor);
        }

        ::slotted([slot="title"]) {
            display: block;
            padding: 0 var(--ui-spacing);
            user-select: none;
            transform: translateY(calc(var(--ui-spacing) / 2));
        }

        ui-icon-button {
            position: absolute;
            top: 0;
            right: 0;
            height: 100%;
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    `);
    i(this, "shadowTemplate", () => a`
        <div class="container">
            <slot name="title"></slot>
            <input type="search" />
            <ui-icon-button ghost>${Lt}</ui-icon-button>
        </div>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      /**
       * @type {boolean}
       */
      useStorage: !1,
      /**
       * @type {string | null}
       */
      storagePrefix: null,
      /** @type {UIIconButton | null} */
      submit: null,
      /** @type {HTMLInputElement | null} */
      input: null,
      /** @type {Events<E>} */
      events: new d(),
      /**
       * Used as storage key, if enabled
       *
       *  @param {string | null} value
       */
      setKey(t) {
        if (t === null) {
          this.root.removeAttribute("key"), this.setValue("");
          return;
        }
        this.root.setAttribute("key", t), this.setValue(
          localStorage.getItem(this.storagePrefix + this.getKey())
        );
      },
      getKey() {
        return this.root.getAttribute("key") || "";
      },
      hasSubmit() {
        return !!this.submit.parentElement;
      },
      disableSubmit() {
        this.hasSubmit() && this.submit.parentElement.removeChild(this.submit);
      },
      enableSubmit() {
        if (!this.hasSubmit()) return;
        this.root.shadowRoot.querySelector(".container").appendChild(this.submit);
      },
      /**
       * @param {string | null} value
       */
      setTitle(t) {
        t === null ? this.root.removeAttribute("title") : this.root.setAttribute("title", t);
      },
      getTitle() {
        return this.root.getAttribute("title");
      },
      /**
       * @param {string | null} value
       */
      setValue(t) {
        this.input.value = t || "";
      },
      getValue() {
        return this.input.value;
      },
      /**
       * @param {string | null} value
       */
      setPlaceholder(t) {
        if (t === null) {
          this.root.removeAttribute("placeholder");
          return;
        }
        this.root.setAttribute("placeholder", t);
      },
      /**
       * @returns {string}
       */
      getPlaceholder() {
        return this.root.getAttribute("placeholder");
      },
      /**
       * @param {boolean} state
       */
      setInvalid(t) {
        if (t === null || t === !1) {
          this.root.setAttribute("invalid", "");
          return;
        }
        this.root.removeAttribute("invalid");
      },
      /**
       * @returns {boolean}
       */
      getInvalid() {
        return this.root.hasAttribute("invalid");
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "title":
        let n = this.querySelector('[slot="title"]');
        s === null && n && (this.removeChild(n), n = null), n || (n = new v(), n.slot = "title", this.appendChild(n)), n.innerHTML = s || "";
        break;
      case "value":
        this.ui.setValue(s);
        break;
      case "placeholder":
        this.ui.input.placeholder = s || "";
        break;
      case "invalid":
        this.ui.input.ariaInvalid = s !== null ? "" : null;
        break;
      case "no-submit":
        s !== null ? this.ui.disableSubmit() : this.ui.enableSubmit();
        break;
      case "use-storage":
        this.ui.useStorage = s !== null;
        break;
      case "storage-prefix":
        this.ui.storagePrefix = s;
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `, this.ui.submit = this.shadowRoot.querySelector("ui-icon-button"), this.ui.submit.ui.events.on("click", () => {
      this.ui.events.dispatch("submit", this.ui.getValue());
    });
    {
      this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = "text", this.ui.input.onkeydown = async (o) => {
        this.ui.hasSubmit() && o.key === "Enter" && this.ui.submit.click();
      }, this.ui.input.oninput = async () => {
        this.ui.useStorage && (t !== null && clearTimeout(t), t = setTimeout(() => {
          localStorage.setItem(
            (this.ui.storagePrefix || "") + this.ui.getKey(),
            this.ui.input.value
          ), t = null;
        }, 250)), this.ui.events.dispatch("input", this.ui.input.value);
      };
      let t = null;
      this.ui.input.onchange = async () => this.ui.events.dispatch("change", this.ui.input.value);
    }
  }
  /**
   * @param {FocusOptions | null} [options]
   */
  focus(t = null) {
    this.shadowRoot.querySelector("input").focus(t);
  }
  blur() {
    this.shadowRoot.querySelector("input").blur();
  }
};
i(A, "register", () => {
  customElements.get("ui-search") || customElements.define("ui-search", A);
}), i(A, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "no-submit",
  "use-storage",
  "storage-prefix"
]);
let lt = A;
const N = class N extends HTMLElement {
  constructor() {
    super(), this.ui = {
      /** @private */
      root: this,
      getName() {
        return this.root.getAttribute("name");
      },
      /**
       * @param {string | null} value
       */
      setName(e) {
        if (e === null) {
          this.root.removeAttribute("name");
          return;
        }
        this.root.setAttribute("name", e);
      },
      getHref() {
        return this.root.getAttribute("href");
      },
      /**
       * @param {string | null} value
       */
      setHref(e) {
        if (e === null) {
          this.root.removeAttribute("href");
          return;
        }
        this.root.setAttribute("href", e);
      },
      getFallback() {
        return this.root.hasAttribute("fallback");
      },
      /**
       * @param {boolean} state
       */
      setFallback(e) {
        if (!e) {
          this.root.removeAttribute("fallback");
          return;
        }
        this.root.setAttribute("fallback", "");
      }
    };
  }
};
i(N, "register", () => {
  customElements.get("ui-lang-type") || customElements.define("ui-lang-type", N);
});
let ht = N;
const E = class E extends HTMLElement {
  constructor() {
    super(), this.ui = {
      /** @private */
      root: this,
      /**
       * @private
       * @type {Events<{ "change": UILangType}>}
       */
      events: new d(),
      /**
       * @type {{
       *  [key: string]: {
       *      [key: string]: string;
       *  };
       * }}
       */
      data: {},
      /**
       *@type {UILangType | null}
       */
      langType: null,
      getCurrent() {
        return this.root.getAttribute("current");
      },
      /**
       * @param {string | null} v
       */
      setCurrent(e) {
        if (e === null) {
          this.root.removeAttribute("current");
          return;
        }
        this.root.setAttribute("current", e);
      },
      /**
       * @returns {UILangType}
       */
      getFallbackElement() {
        return this.root.querySelector("ui-lang-type[fallback]");
      },
      /**
       * @param {UILangType} langType
       * @param {{
       *  [key: string]: {
       *      [key: string]: string;
       *  };
       * }} data
       */
      new(e, t) {
        this.langType = e, this.data = t, this.events.dispatch("change", this.langType);
      },
      /**
       * @param {string} group
       * @param {string} key
       */
      get(e, t) {
        var o, s;
        return ((s = (o = this.data) == null ? void 0 : o[e]) == null ? void 0 : s[t]) || null;
      },
      /**
       * @param {"change"} key
       * @param {(langType: UILangType | null) => void|Promise<void>} callback
       * @param {boolean} [trigger] - this will run the callback first
       * @returns {() => void} clean up function
       */
      on(e, t, o = !1) {
        if (typeof t != "function")
          throw "callback is not a function";
        return o && t(this.langType), this.events.on(e, t);
      }
    };
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, t, o) {
    switch (e) {
      case "current":
        o !== null && this.loadLanguage(o);
        break;
    }
  }
  /**
   * @private
   * @param {string} name
   */
  async loadLanguage(e) {
    const t = this.querySelector(`ui-lang-type[name="${e}"]`) || this.ui.getFallbackElement();
    if (!t) return;
    if (!t.ui.getHref()) throw "Missing href attribute!";
    const o = await fetch(t.ui.getHref());
    this.ui.new(t, await o.json());
  }
};
i(E, "register", () => {
  customElements.get("ui-lang") || customElements.define("ui-lang", E);
}), i(E, "observedAttributes", ["current"]);
let ut = E;
const G = class G extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        :host {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .background {
            z-index: 999;
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background-color: var(--ui-backdrop-bgColor);
            -webkit-backdrop-filter: var(--ui-backdropFilter);
            backdrop-filter: var(--ui-backdropFilter);
        }

        .spinner {
            z-index: 1000;
            content: "";
            box-sizing: border-box;
            position: absolute;
            top: 50%;
            left: 50%;
            width: 2.5rem;
            height: 2.5rem;
            margin-top: -1.25rem;
            margin-left: -1.25rem;
            border-radius: 50%;
            border: 2px solid var(--ui-borderColor);
            border-top-color: var(--ui-primary-bgColor);
            animation: spinner 0.6s linear infinite;
        }

        @keyframes spinner {
            to {
                transform: rotate(360deg);
            }
        }
    `);
    i(this, "shadowTemplate", () => a`
        <div class="background"></div>
        <div class="spinner"></div>
    `);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new l()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(G, "register", () => {
  customElements.get("ui-spinner") || customElements.define("ui-spinner", G);
});
let ct = G;
const K = class K extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        :host {
            display: block !important;
            position: absolute !important;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            animation: fade-in 0.5s;
            transition: opacity 0.5s ease;
        }

        :host(:last-child) {
            opacity: 1;
        }

        @keyframes fade-in {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      getName() {
        return this.root.getAttribute("name");
      },
      /**
       * @param {string | null} value
       */
      setName(t) {
        t === null && this.root.removeAttribute("name"), this.root.setAttribute("name", t);
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(K, "register", () => {
  customElements.get("ui-stack-layout-page") || customElements.define("ui-stack-layout-page", K);
});
let $ = K;
const T = class T extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        :host {
            display: block !important;
            position: relative !important;
            width: 100%;
            height: 100%;
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      /** @private */
      root: this,
      cleanup: new l(),
      /**
       * @private
       * @type {Pages}
       */
      pages: {},
      /**
       * @private
       * @type {UIStackLayoutPage[]}
       */
      stack: [],
      /**
       * @type {((ev: PopStateEvent) => void|Promise<void>) | null}
       */
      onpopstate: null,
      /**
       * @type {Events<{ "change": { oldPage: UIStackLayoutPage | null, newPage: UIStackLayoutPage | null } }>}
       */
      events: new d(),
      lock: !1,
      enableHistory() {
        this.onpopstate === null && (this.onpopstate = async () => {
          this._goBack();
        }, window.addEventListener("popstate", this.onpopstate));
      },
      disableHistory() {
        this.onpopstate === null && window.removeEventListener("popstate", this.onpopstate);
      },
      usesHistory() {
        return this.onpopstate !== null;
      },
      /**
       * @param {string} name
       * @param {() => (UIStackLayoutPage)} cb
       */
      registerPage(t, o) {
        this.pages[t] = o;
      },
      /**
       * @param {string} name
       */
      unregisterPage(t) {
        delete this.pages[t];
      },
      clearStack() {
        for (; this.stackSize() > 0; )
          this.root.removeChild(this.stack.pop());
      },
      stackSize() {
        return this.stack.length;
      },
      goBack() {
        if (!(!this.stack.length || this.lock)) {
          if (this.onpopstate !== null) {
            history.back();
            return;
          }
          this._goBack();
        }
      },
      /**
       * @private
       */
      _goBack() {
        const t = this.root.removeChild(this.stack.pop());
        this.stack.length > 0 && (this.stack[this.stack.length - 1].parentElement || this.root.appendChild(
          this.stack[this.stack.length - 1]
        )), this.dispatchChangeEvent(t);
      },
      /**
       * @param {string} name
       * @param {((page: UIStackLayoutPage) => void|Promise<void>) | null} [cb]
       * @param {boolean} [keepOldPage]
       */
      setPage(t, o = null, s = !1) {
        if (this.lock) return;
        const n = this.pages[t]();
        this.stack.push(this.root.appendChild(n)), typeof o == "function" && setTimeout(() => o(n));
        let u = null;
        this.stack.length > 1 && !s && (u = this.stack[this.stack.length - 2], u.parentElement.removeChild(u)), this.dispatchChangeEvent(u), this.onpopstate !== null && history.pushState(null, document.title, location.href);
      },
      /**
       * @param {UIStackLayoutPage} oldChild
       */
      async dispatchChangeEvent(t) {
        this.events.dispatch("change", {
          newPage: this.stack[this.stack.length - 1] || null,
          oldPage: t || this.stack[this.stack.length - 2] || null
        });
      }
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, o, s) {
    switch (t) {
      case "use-history":
        s !== null ? this.ui.enableHistory() : this.ui.disableHistory();
        break;
    }
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(T, "register", () => {
  $.register(), customElements.get("ui-stack-layout") || customElements.define("ui-stack-layout", T);
}), i(T, "observedAttributes", ["use-history"]);
let dt = T;
const R = class R extends HTMLElement {
  constructor() {
    super(), this.ui = {
      /** @private */
      root: this,
      /**
       * @type {boolean}
       */
      useStorage: !1,
      /**
       * @type {string | null}
       */
      storagePrefix: null,
      /**
       * @type {any}
       */
      stores: {},
      /**
       * @type {Events<T>}
       */
      events: new d(),
      /**
       * @template {keyof T} K
       * @param {K} key
       * @returns {T[K]}
       */
      get(e) {
        return this.stores[e];
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {T[K]} data
       * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
       * `this.enableLocalStorage` flag needs to be set to `true` for this to work
       */
      set(e, t, o = !1) {
        if (o && this.storagePrefix) {
          const s = JSON.parse(
            localStorage.getItem(
              (this.storagePrefix || "") + e.toString()
            ) || "null"
          );
          this.stores[e] = s ?? t;
        } else
          this.stores[e] = t;
        this.useStorage && localStorage.setItem(
          (this.storagePrefix || "") + e.toString(),
          JSON.stringify(this.stores[e])
        ), this.events.dispatch(e, this.stores[e]);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => any} callback
       */
      update(e, t) {
        if (typeof t != "function")
          throw "callback is not a function";
        this.set(e, t(this.stores[e]));
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => void|Promise<void>} callback
       * @param {boolean} [trigger] - this will run the callback first
       * @returns {() => void} clean up function
       */
      on(e, t, o = !1) {
        if (typeof t != "function")
          throw "callback is not a function";
        return o && t(this.get(e)), this.events.on(e, t);
      }
    };
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, t, o) {
    switch (e) {
      case "use-storage":
        this.ui.useStorage = o !== null;
        break;
      case "storage-prefix":
        this.ui.storagePrefix = o;
        break;
    }
  }
};
i(R, "register", () => {
  customElements.get("ui-store") || customElements.define("ui-store", R);
}), i(R, "observedAttributes", ["use-storage", "storage-prefix"]);
let pt = R;
const L = class L extends HTMLElement {
  constructor() {
    super(), this.ui = {
      /**
       * @private
       * @type {MediaQueryList | null}
       */
      media: null,
      /**
       * @type {{ name: string; href: string } | null}
       */
      currentTheme: null,
      /**
       * @type {{ [key: string]: string }}
       */
      themes: {},
      /**
       * @param {HTMLElement} [element]
       */
      getMode(e = document.body) {
        return e.getAttribute("data-theme");
      },
      /**
       * @param {UIThemeHandlerMode} mode
       * @param {HTMLElement} [element]
       */
      setMode(e, t = document.body) {
        switch (e) {
          case "dark":
            t.setAttribute("data-theme", e);
            break;
          case "light":
            t.setAttribute("data-theme", e);
            break;
          default:
            t.removeAttribute("data-theme");
        }
      },
      /**
       * @private
       * @param {MediaQueryListEvent | MediaQueryList} ev
       */
      mediaChangeHandler: (e) => {
        e.matches ? document.body.setAttribute("data-theme", "dark") : document.body.setAttribute("data-theme", "light");
      },
      getAuto() {
        return !!this.media;
      },
      /**
       * @param {boolean} state
       * @param {HTMLElement} [element]
       */
      setAuto(e, t = document.body) {
        if (!e) {
          if (!this.media) return;
          this.media.removeEventListener(
            "change",
            this.mediaChangeHandler
          ), this.media = null;
          return;
        }
        if (this.setMode(null, t), this.media) {
          this.mediaChangeHandler(this.media);
          return;
        }
        this.media = window.matchMedia("(prefers-color-scheme: dark)"), this.media.addEventListener("change", this.mediaChangeHandler), this.mediaChangeHandler(this.media);
      },
      /**
       * @param {string} name
       * @param {string} href
       */
      addTheme(e, t) {
        this.themes[e] = t;
      },
      /**
       * @param {string} name
       */
      setTheme(e) {
        var o;
        if (!this.themes[e])
          throw `theme "${e}" is missing in this.themes`;
        if (((o = this.currentTheme) == null ? void 0 : o.name) == e)
          return;
        {
          const s = document.getElementById("theme");
          s && (document.head.removeChild(s), this.currentTheme = null);
        }
        const t = document.createElement("link");
        t.id = "theme", t.rel = "stylesheet", t.href = this.themes[e], document.head.appendChild(t), this.currentTheme = { name: e, href: this.themes[e] };
      }
    };
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, t, o) {
    switch (e) {
      case "auto":
        this.ui.setAuto(o !== null);
        break;
      case "mode":
        this.ui.setMode(o);
        break;
    }
  }
};
i(L, "register", () => {
  customElements.get("ui-theme-handler") || customElements.define("ui-theme-handler", L);
}), i(L, "observedAttributes", ["auto", "mode"]);
let gt = L;
const Y = class Y extends HTMLElement {
  constructor() {
    super();
    i(this, "shadowCSS", () => h`
        :host {
            width: 100%;
            height: 100%;
            color: inherit;
        }

        svg {
            width: 100%;
            height: 100%;
        }
    `);
    i(this, "shadowTemplate", () => a`<slot></slot>`);
    this.attachShadow({ mode: "open" }), this.ui = {
      cleanup: new l()
    }, this.shadowRender();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.ui.cleanup.run();
  }
  shadowRender() {
    this.shadowRoot.innerHTML = `
            <style>${this.shadowCSS().trim()}</style>
            ${this.shadowTemplate().trim()}
        `;
  }
};
i(Y, "register", () => {
  customElements.get("ui-svg") || customElements.define("ui-svg", Y);
});
let mt = Y;
function $t() {
  Q.register(), X.register(), W.register(), B.register(), _.register(), I.register(), et.register(), tt.register(), U.register(), it.register(), st.register(), ot.register(), nt.register(), lt.register(), H.register(), at.register(), ht.register(), ut.register(), ct.register(), dt.register(), $.register(), pt.register(), mt.register(), rt.register(), M.register(), v.register(), gt.register();
}
export {
  X as UIAppBar,
  Q as UIAppBarItem,
  W as UIButton,
  _ as UIContainer,
  I as UIDialog,
  U as UIDrawer,
  tt as UIDrawerGroup,
  et as UIDrawerGroupItem,
  ot as UIFlexGrid,
  it as UIFlexGridItem,
  st as UIFlexGridRow,
  B as UIIconButton,
  nt as UIInput,
  rt as UILabel,
  ut as UILang,
  ht as UILangType,
  M as UIPrimary,
  lt as UISearch,
  v as UISecondary,
  at as UISelect,
  H as UISelectOption,
  ct as UISpinner,
  dt as UIStackLayout,
  $ as UIStackLayoutPage,
  pt as UIStore,
  gt as UIThemeHandler,
  Mt as js,
  $t as register
};
