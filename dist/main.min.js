var Lt = Object.defineProperty;
var kt = (o, e, t) => e in o ? Lt(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[e] = t;
var r = (o, e, t) => (kt(o, typeof e != "symbol" ? e + "" : e, t), t), Ae = (o, e, t) => {
  if (!e.has(o))
    throw TypeError("Cannot " + t);
};
var i = (o, e, t) => (Ae(o, e, "read from private field"), t ? t.call(o) : e.get(o)), l = (o, e, t) => {
  if (e.has(o))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(o) : e.set(o, t);
}, a = (o, e, t, s) => (Ae(o, e, "write to private field"), s ? s.call(o, t) : e.set(o, t), t);
var d = (o, e, t) => (Ae(o, e, "access private method"), t);
var c;
class He {
  constructor() {
    /**
     * @type {any}
     */
    l(this, c, {});
  }
  /**
   * @param {Key} key
   * @param {Data} data
   */
  dispatchWithData(e, t) {
    if (t === void 0)
      throw "data is undefined!";
    if (i(this, c)[e])
      for (const s of i(this, c)[e])
        s(t);
    return this;
  }
  /**
   * @param {Key} key
   * @param {((data: Data) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  addListener(e, t) {
    if (typeof t != "function")
      throw `invalid event listener passed for "${e}" event!`;
    return i(this, c)[e] || (i(this, c)[e] = []), i(this, c)[e].push(t), () => {
      this.removeListener(e, t);
    };
  }
  /**
   * @param {Key} key
   * @param {((data: Data) => void|Promise<void>)} listener
   */
  removeListener(e, t) {
    if (!i(this, c)[e])
      throw `no listeners found for ${e}, there is nothing to delete`;
    let s = !1, n = 0;
    for (const $e of i(this, c)[e])
      $e === t && (i(this, c)[e].splice(n, 1), s = !0), n++;
    if (!s)
      throw `listener not found for ${e}, there is nothing to delete`;
    return this;
  }
}
c = new WeakMap();
const Et = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Events: He
}, Symbol.toStringTag, { value: "Module" })), Mt = {
  color: "currentColor",
  opacity: 0.2,
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out"
};
function Ke(o, e) {
  e = { ...Mt, ...e };
  const t = document.createElement("div");
  t.classList.add("ripple"), t.style.position = "absolute", t.style.color = "inherit", t.style.borderRadius = "50%", t.style.pointerEvents = "none", t.style.width = "100px", t.style.height = "100px", t.style.marginTop = "-50px", t.style.marginLeft = "-50px", t.style.opacity = `${e.opacity}`, t.style.backgroundColor = e.color, t.style.transform = "scale(0) translate(0, 0)", t.style.transition = `transform ${e.spreadDuration} ${e.spreadTiming} 0s,opacity ${e.clearDuration} ${e.clearTiming} 0s`, o.currentTarget.appendChild(t);
  const s = o.currentTarget.getBoundingClientRect();
  e.centered ? (t.style.top = `${s.height / 2}px`, t.style.left = `${s.width / 2}px`) : (t.style.top = `${o.clientY - s.top}px`, t.style.left = `${o.clientX - s.left}px`);
  const n = Math.max(s.width, s.height) * 0.02;
  return t.style.transform = `scale(${n}) translate(0, 0)`, t;
}
function Qe(o) {
  o && (o.addEventListener("transitionend", (e) => {
    e.propertyName === "opacity" && o.remove();
  }), o.style.opacity = "0");
}
function Se(o, e = {}) {
  let t;
  const s = ($e) => {
    t = Ke($e, e);
  }, n = () => {
    Qe(t);
  };
  return o.classList.add("ripple-container"), o.style.overflow = "hidden", o.addEventListener("pointerdown", s), o.addEventListener("pointerup", n), o.addEventListener("pointerleave", n), () => {
    o.classList.remove("ripple-container"), o.removeEventListener("pointerdown", s), o.removeEventListener("pointerup", n), o.removeEventListener("pointerleave", n);
  };
}
const Tt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: Se,
  start: Ke,
  stop: Qe
}, Symbol.toStringTag, { value: "Module" }));
function Rt() {
  return /(android)/i.test(navigator.userAgent);
}
const Ht = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isAndroid: Rt
}, Symbol.toStringTag, { value: "Module" })), St = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  events: Et,
  ripple: Tt,
  utils: Ht
}, Symbol.toStringTag, { value: "Module" }));
var g, De;
let $t = (De = class {
  /** @param {AppBar} root */
  constructor(e) {
    /** @type {AppBar} */
    l(this, g, void 0);
    a(this, g, e);
  }
  getLeftSlot() {
    return [...i(this, g).querySelectorAll('[slot="left"]')];
  }
  getCenterSlot() {
    return [...i(this, g).querySelectorAll('[slot="center"]')];
  }
  getRightSlot() {
    return [...i(this, g).querySelectorAll('[slot="right"]')];
  }
}, g = new WeakMap(), De);
const Ge = document.createElement("template");
Ge.innerHTML = `
<style>
    :host {
        display: flex;
        position: absolute;
        z-index: 100;
        background-color: hsla(var(--bg), .2);
        backdrop-filter: blur(5px);
        overflow: hidden;
        user-select: none;
    }

    :host([position="top"]) {
        top: 0;
        left: 0;
        width: 100%;
        height: var(--app-bar-height);
        border-bottom: var(--border-width) var(--border-style) hsl(var(--border));
    }

    :host > ui-flex-grid-row {
        width: 100%;
        height: 100%;
        align-items: center;
        justify-content: space-between;
    }

    :host > ui-flex-grid-row > * {
        height: 100%;
    }

    :host > ui-flex-grid-row > *:nth-child(1),
    :host > ui-flex-grid-row > *:nth-child(3) {
        width: fit-content;
    }

    :host > ui-flex-grid-row > [slot="left"] {
        margin-left: 0;
    }

    :host > ui-flex-grid-row > [slot="center"] {
        width: 100%;
    }

    :host > ui-flex-grid-row > [slot="right"] {
        margin-right: 0;
        justify-content: flex-end;
    }
</style>

<ui-flex-grid-row gap="0.25rem">
    <ui-flex-grid-row gap="0.25rem">
        <slot name="left"></slot>
    </ui-flex-grid-row>

    <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
        <slot name="center"></slot>
    </ui-flex-grid-row>

    <ui-flex-grid-row gap="0.25rem">
        <slot name="right"></slot>
    </ui-flex-grid-row>
</ui-flex-grid-row>
`;
const de = class de extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Ge.content.cloneNode(!0)), this.ui = new $t(this);
  }
};
r(de, "register", () => customElements.define("ui-app-bar", de));
let B = de;
const Fe = document.createElement("template");
Fe.innerHTML = `
<style>
    :host {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        padding: var(--spacing) calc(var(--spacing) * 2.5);
        border: var(--border-width) var(--border-style) currentColor;
        border-radius: var(--radius);
        overflow: hidden;
        font-family: var(--font-family);
        font-weight: bold;
        text-transform: capitalize;
        cursor: pointer;
        outline: none;
        user-select: none;
    }

    :host([variant="full"]) {
        border: none;
    }

    :host([variant="full"][color="primary"]) {
        background-color: hsl(var(--primary));
        color: hsl(var(--primary-fg));
    }

    :host([variant="full"][color="secondary"]) {
        background-color: hsl(var(--secondary));
        color: hsl(var(--secondary-fg));
    }

    :host([variant="full"][color="destructive"]) {
        background-color: hsl(var(--destructive));
        color: hsl(var(--destructive-fg));
    }

    :host([variant="outline"]) {
        border-color: currentColor;
        background-color: transparent;
    }

    :host([variant="outline"][color="primary"]) {
        color: hsl(var(--primary));
    }

    :host([variant="outline"][color="secondary"]) {
        color: hsl(var(--secondary));
    }

    :host([variant="outline"][color="destructive"]) {
        color: hsl(var(--destructive));
    }

    :host([variant="ghost"]) {
        border-color: transparent;
        background-color: transparent;
    }

    :host([variant="ghost"][color="primary"]) {
        color: hsl(var(--primary));
    }

    :host([variant="ghost"][color="secondary"]) {
        color: hsl(var(--secondary));
    }

    :host([variant="ghost"][color="destructive"]) {
        color: hsl(var(--destructive));
    }

    :host(:disabled),
    :host(:disabled:hover),
    :host(:disabled:active) {
        background-color: transparent;
        opacity: 0.25;
        cursor: default;
    }
</style>

<slot></slot>
`;
var U, Ve;
let At = (Ve = class {
  /** @param {Button} root */
  constructor(e) {
    /** @type {Button} */
    l(this, U, void 0);
    a(this, U, e), this.removeRipple = null;
  }
  enableRipple() {
    this.removeRipple || (this.removeRipple = Se(i(this, U), { centered: !0 }));
  }
  disableRipple() {
    this.removeRipple && this.removeRipple(), this.removeRipple = null;
  }
}, U = new WeakMap(), Ve);
const L = class L extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Fe.content.cloneNode(!0)), this.ui = new At(this);
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple();
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "no-ripple":
        s !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
    }
  }
};
r(L, "register", () => customElements.define("ui-button", L)), r(L, "observedAttributes", ["no-ripple"]);
let K = L;
const _e = document.createElement("template");
_e.innerHTML = `
<style>
    :host {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        width: 2.5em;
        height: 2.5em;
        padding: var(--spacing);
        border: var(--border-width) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);
        outline: none;
        overflow: hidden;
        font-family: var(--font-family);
        cursor: pointer;
        user-select: none;
    }

    :host([ghost]) {
        border-color: transparent !important;
        box-shadow: none;
    }

    :host([color="primary"]) {
        color: hsl(var(--primary));
        border-color: hsl(var(--primary));
    }

    :host([color="secondary"]) {
        color: hsl(var(--secondary));
        border-color: hsl(var(--secondary));
    }

    :host([color="destructive"]) {
        color: hsl(var(--destructive));
        border-color: hsl(var(--destructive));
    }

    /* :disabled */

    :host(:disabled),
    :host(:disabled:hover),
    :host(:disabled:active) {
        opacity: 0.25;
        cursor: default;
    }
</style>

<slot></slot>
`;
var z, We;
let jt = (We = class {
  /** @param {IconButton} root */
  constructor(e) {
    /** @type {IconButton} */
    l(this, z, void 0);
    a(this, z, e), this.removeRipple = null;
  }
  enableRipple() {
    this.removeRipple || (this.removeRipple = Se(i(this, z), { centered: !0 }));
  }
  disableRipple() {
    this.removeRipple && this.removeRipple(), this.removeRipple = null;
  }
}, z = new WeakMap(), We);
const k = class k extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(_e.content.cloneNode(!0)), this.ui = new jt(this);
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple();
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "no-ripple":
        s !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
    }
  }
};
r(k, "register", () => customElements.define("ui-icon-button", k)), r(k, "observedAttributes", ["no-ripple"]);
let Q = k;
const et = document.createElement("template");
et.innerHTML = `
<style>
    :host {
        display: block;
        width: 100%;
        max-width: 65em;
        margin: 0 auto;
        padding: var(--spacing);
    }
</style>

<slot></slot>
`;
const ue = class ue extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(et.content.cloneNode(!0));
  }
};
r(ue, "register", () => customElements.define("ui-container", ue));
let G = ue;
const tt = document.createElement("template");
tt.innerHTML = `
<style></style>
<slot></slot>
`;
var q, P, je;
const E = class E extends HTMLElement {
  constructor() {
    super();
    l(this, P);
    /** @type {string | null} */
    l(this, q, "1");
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(tt.content.cloneNode(!0));
  }
  connectedCallback() {
    d(this, P, je).call(this);
  }
  attributeChangedCallback(t, s, n) {
    switch (t) {
      case "flex":
        a(this, q, n !== null ? n : "1"), d(this, P, je).call(this);
        break;
    }
  }
};
q = new WeakMap(), P = new WeakSet(), je = function() {
  this.shadowRoot.querySelector("style").textContent = `
            :host {
                flex: ${i(this, q)};
            }
        `;
}, r(E, "register", () => customElements.define("ui-flex-grid-item", E)), r(E, "observedAttributes", ["flex"]);
let F = E;
const st = document.createElement("template");
st.innerHTML = `
<style></style>
<slot></slot>
`;
var O, Z, Ne;
const M = class M extends HTMLElement {
  constructor() {
    super();
    l(this, Z);
    /** @type {string | null} */
    l(this, O, "0");
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(st.content.cloneNode(!0));
  }
  connectedCallback() {
    d(this, Z, Ne).call(this);
  }
  attributeChangedCallback(t, s, n) {
    switch (t) {
      case "gap":
        a(this, O, n !== null ? n : "0"), d(this, Z, Ne).call(this);
        break;
    }
  }
};
O = new WeakMap(), Z = new WeakSet(), Ne = function() {
  this.shadowRoot.querySelector("style").textContent = `
            :host {
                --row-gap: ${i(this, O)};
                display: flex;
                flex-flow: row nowrap;
                position: relative;
                width: 100%;
            }

            :host ::slotted(ui-flex-grid-item) {
                margin: 0 var(--row-gap);
            }

            :host ::slotted(ui-flex-grid-item:first-child) {
                margin-left: 0;
            }

            :host ::slotted(ui-flex-grid-item:last-child) {
                margin-right: 0;
            }
        `;
}, r(M, "register", () => customElements.define("ui-flex-grid-row", M)), r(M, "observedAttributes", ["gap"]);
let _ = M;
const it = document.createElement("template");
it.innerHTML = `
<style></style>
<slot></slot>
`;
var D, pe, ot;
const T = class T extends HTMLElement {
  constructor() {
    super();
    l(this, pe);
    /** @type {string | null} */
    l(this, D, "0");
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(it.content.cloneNode(!0));
  }
  connectedCallback() {
    d(this, pe, ot).call(this);
  }
  attributeChangedCallback(t, s, n) {
    switch (t) {
      case "gap":
        a(this, D, n !== null ? n : "0");
        break;
    }
  }
};
D = new WeakMap(), pe = new WeakSet(), ot = function() {
  this.shadowRoot.querySelector("style").textContent = `
            :host {
                --gap: ${i(this, D)};
                display: flex;
                flex-flow: column nowrap;
                position: relative;
                width: 100%;
                height: fit-content;
            }

            :host ::slotted(ui-flex-grid-row) {
                margin: var(--gap) 0;
            }

            :host ::slotted(ui-flex-grid-row:first-child) {
                margin-top: 0;
            }

            :host ::slotted(ui-flex-grid-row:last-child) {
                margin-bottom: 0;
            }
        `;
}, r(T, "register", () => customElements.define("ui-flex-grid", T)), r(T, "observedAttributes", ["gap"]);
let ee = T;
const rt = document.createElement("template");
rt.innerHTML = `
<style>
    :host {
        display: none;
        padding: var(--spacing);
        padding-right: 2.5em;
        font-family: var(--font-family);
        transition: background-color 0.25s linear;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

<slot></slot>
`;
let Nt = class {
  constructor() {
    this.value = null, this.selected = !1;
  }
};
const R = class R extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(rt.content.cloneNode(!0)), this.ui = new Nt();
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "value":
        this.ui.value = s;
        break;
      case "selected":
        this.ui.selected = s !== null;
        break;
    }
  }
};
r(R, "register", () => customElements.define("ui-select-option", R)), r(R, "observedAttributes", ["value", "selected"]);
let I = R;
const nt = document.createElement("template");
nt.innerHTML = `
<style>
    :host {
        --items-length: 0;
        position: relative; 
        display: block;
        width: 100%;
        height: calc(1em * var(--line-height) + var(--spacing) * 2);
        border: var(--border-width) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);
        font-size: 0.95em;
        transition: height 0.25s ease;
        line-height: 1.15;
        box-sizing: content-box !important;
        overflow: hidden;
    }

    .options {
        cursor: pointer;
        display: none;
        display: flex;
        flex-direction: column;
        min-height: 100%;
    }

    .icon {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 0;
        right: 0;
        width: 2.5em;
        height: 100%;
        color: hsl(var(--primary));
    }

    ::slotted(ui-select-option) {
        display: block;
    }

    :host(.open) {
        height: calc(
            (var(--spacing) * 2 + (1em * 1.15)) * var(--items-length)
        );
    }

    :host(.open) .options {
        display: block;
    }

    :host(.open) .icon {
        display: none;
    }

    :host(.open) ::slotted(ui-select-option[selected]) {
        background-color: hsl(var(--primary));
        color: hsl(var(--primary-fg));
    }

    :host(.open) ::slotted(ui-select-option:not([selected]):hover) {
        background-color: hsl(var(--fg), 0.1);
    }

    :host(:not(.open)) .options:has(> ::slotted(ui-select-option[selected])) {
        display: block;
    }

    :host(:not(.open)) ::slotted(ui-select-option:not([selected])) {
        display: none;
    }
</style>

<div class="options">
    <div class="icon"><ui-icon-chevron-down></ui-icon-chevron-down></div>

    <slot></slot>
</div>
`;
var V, f;
const me = class me extends HTMLElement {
  constructor() {
    super();
    /** @param {Event} ev */
    l(this, V, (t) => {
      this.classList.toggle("open") ? (t.stopPropagation(), this.addEventListener("click", i(this, f))) : setTimeout(
        () => this.removeEventListener("click", i(this, f))
      );
    });
    /** @param {MouseEvent | PointerEvent} ev */
    l(this, f, (t) => {
      (t.composedPath() || []).forEach((s) => {
        s instanceof I && ([...this.querySelectorAll("ui-select-option")].forEach(
          (n) => n.removeAttribute("selected")
        ), s.setAttribute("selected", ""), this.dispatchEvent(new CustomEvent("change", { detail: s })));
      });
    });
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(nt.content.cloneNode(!0));
  }
  connectedCallback() {
    var t;
    (t = this.shadowRoot.querySelector(".options")) == null || t.addEventListener("click", i(this, V)), this.style.setProperty(
      "--items-length",
      this.querySelectorAll("ui-select-option").length.toString()
    );
  }
  disconnectedCallback() {
    var t;
    this.removeEventListener("click", i(this, f)), (t = this.shadowRoot.querySelector(".options")) == null || t.addEventListener("click", i(this, V));
  }
};
V = new WeakMap(), f = new WeakMap(), r(me, "register", () => customElements.define("ui-select", me));
let te = me;
var W, v, J, Je;
let It = (Je = class {
  /** @param {Lang} root */
  constructor(e) {
    /** @type {Lang} */
    l(this, W, void 0);
    l(this, v, void 0);
    /**
     * @type {{
     *  [key: string]: {
     *      [key: string]: string;
     *  };
     * }}
     */
    l(this, J, void 0);
    a(this, W, e), a(this, v, new He()), this.langType = null;
  }
  /** @returns {import("./lang-type").LangType} */
  getFallbackElement() {
    return i(this, W).querySelector("ui-lang-type[fallback]");
  }
  /**
   * @param {import("./lang-type").LangType} langType
   * @param {{
   *  [key: string]: {
   *      [key: string]: string;
   *  };
   * }} data
   */
  new(e, t) {
    this.langType = e, a(this, J, t), i(this, v).dispatchWithData("change", this.langType);
  }
  /**
   * @param {string} group
   * @param {string} key
   */
  get(e, t) {
    var s;
    return (s = i(this, J)) == null ? void 0 : s[e][t];
  }
  /**
   * @param {"change"} key
   * @param {(langType: import("./lang-type").LangType | null) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(e, t, s = !1) {
    if (typeof t != "function")
      throw "callback is not a function";
    return s && t(this.langType), i(this, v).addListener(e, t);
  }
}, W = new WeakMap(), v = new WeakMap(), J = new WeakMap(), Je);
var ge, lt;
const H = class H extends HTMLElement {
  constructor() {
    super();
    /** @param {string} name */
    l(this, ge);
    this.ui = new It(this);
  }
  attributeChangedCallback(t, s, n) {
    switch (t) {
      case "current":
        n !== null && d(this, ge, lt).call(this, n);
        break;
    }
  }
};
ge = new WeakSet(), lt = async function(t) {
  const s = this.querySelector(`ui-lang-type[name="${t}"]`) || this.ui.getFallbackElement();
  if (!s)
    return;
  if (!s.href)
    throw "Missing href attribute!";
  const n = await fetch(s.href);
  this.ui.new(s, await n.json());
}, r(H, "register", () => customElements.define("ui-lang", H)), r(H, "observedAttributes", ["current"]);
let se = H, Ut = class {
  constructor() {
    this.name = "", this.href = "", this.fallback = !1;
  }
};
const S = class S extends HTMLElement {
  constructor() {
    super(), this.ui = new Ut();
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "name":
        this.ui.name = s ?? "";
        break;
      case "href":
        this.ui.href = s ?? "";
        break;
      case "fallback":
        this.ui.fallback = s != null;
        break;
    }
  }
};
r(S, "register", () => customElements.define("ui-lang-type", S)), r(S, "observedAttributes", ["name", "href", "fallback"]);
let ie = S;
const at = document.createElement("template");
at.innerHTML = `
    <style>
        :host {
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            animation: fade-in 0.5s;
            transition: opacity 0.5s ease;
        }

        :host(:last-child) {
            opacity: 1;
        }

        @keyframes fade-in {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
    </style>

    <slot></slot>
`;
let zt = class {
  constructor() {
    this.name = "";
  }
};
const $ = class $ extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(at.content.cloneNode(!0)), this.ui = new zt();
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "name":
        this.ui.name = s !== null ? s : "";
        break;
    }
  }
};
r($, "register", () => customElements.define("ui-stack-layout-page", $)), r($, "observedAttributes", ["name"]);
let oe = $;
const ct = document.createElement("template");
ct.innerHTML = `
    <style>
        :host {
            display: block;
            position: relative;
            width: 100%;
            height: 100%;
        }
    </style>

    <slot></slot>
`;
var w, b, Xe;
let qt = (Xe = class {
  /** @param {StackLayout} root */
  constructor(e) {
    /** @type {StackLayout} */
    l(this, w, void 0);
    /**
     * @type {Pages}
     */
    l(this, b, {});
    a(this, w, e), this.events = new He(), this.stack = [];
  }
  /**
   * @param {string} name
   * @param {() => (StackLayoutPage | DocumentFragment)} cb
   */
  registerPage(e, t) {
    i(this, b)[e] = t;
  }
  /**
   * @param {string} name
   */
  unregisterPage(e) {
    delete i(this, b)[e];
  }
  goBack() {
    if (!this.stack.length)
      return;
    const e = this.stack.pop();
    e.ontransitionend = () => {
      e.ontransitionend = null, i(this, w).removeChild(e);
    }, this.stack.length && i(this, w).appendChild(this.stack[this.stack.length - 1]), this.dispatchChangeEvent();
  }
  /**
   * @param {string} name
   */
  setPage(e) {
    if (this.stack.push(
      // @ts-expect-error
      this.appendChild(i(this, b)[e]().children[0])
    ), this.stack.length > 1) {
      const t = this.stack[this.stack.length - 2];
      t.ontransitionend = () => {
        t.ontransitionend = null, t.parentElement.removeChild(t);
      };
    }
    this.dispatchChangeEvent();
  }
  async dispatchChangeEvent() {
    this.events.dispatchWithData(
      "change",
      {
        newPage: this.stack[this.stack.length - 1] || null,
        oldPage: this.stack[this.stack.length - 2] || null
      }
    );
  }
}, w = new WeakMap(), b = new WeakMap(), Xe);
const fe = class fe extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ct.content.cloneNode(!0)), this.ui = new qt(this);
  }
};
r(fe, "register", () => customElements.define("ui-stack-layout", fe));
let re = fe;
var y, Ye;
let Pt = (Ye = class {
  constructor() {
    l(this, y, void 0);
    a(this, y, new He()), this.localStoragePrefix = "", this.enableLocalStorage = !1, this.stores = {};
  }
  /**
   * @param {string} key
   */
  get(e) {
    return this.stores[e];
  }
  /**
   * @param {string} key
   * @param {any} data
   * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
   * `this.enableLocalStorage` flag needs to be set to `true` for this to work
   */
  set(e, t, s = !1) {
    if (s && this.enableLocalStorage) {
      const n = JSON.parse(localStorage.getItem(this.localStoragePrefix + e) || "null");
      this.stores[e] = n ?? t;
    } else
      this.stores[e] = t;
    this.enableLocalStorage && localStorage.setItem(this.localStoragePrefix + e, JSON.stringify(this.stores[e])), i(this, y).dispatchWithData(e, this.stores[e]);
  }
  /**
   * @param {string} key
   * @param {(data: any) => any} callback
   */
  update(e, t) {
    if (typeof t != "function")
      throw "callback is not a function";
    this.set(e, t(this.stores[e]));
  }
  /**
   * @param {string} key
   * @param {(data: any) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(e, t, s = !1) {
    if (typeof t != "function")
      throw "callback is not a function";
    return s && t(this.get(e)), i(this, y).addListener(e, t);
  }
}, y = new WeakMap(), Ye);
const A = class A extends HTMLElement {
  constructor() {
    super(), this.ui = new Pt();
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "local-storage-prefix":
        this.ui.localStoragePrefix = s !== null ? s : "";
        break;
      case "enable-local-storage":
        this.ui.enableLocalStorage = s !== null;
        break;
    }
  }
};
r(A, "register", () => customElements.define("ui-store", A)), r(A, "observedAttributes", ["local-storage-prefix", "enable-local-storage"]);
let ne = A;
const ht = document.createElement("template");
ht.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 52 52"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M50,24H6.83L27.41,3.41a2,2,0,0,0,0-2.82,2,2,0,0,0-2.82,0l-24,24a1.79,1.79,0,0,0-.25.31A1.19,1.19,0,0,0,.25,25c0,.07-.07.13-.1.2l-.06.2a.84.84,0,0,0,0,.17,2,2,0,0,0,0,.78.84.84,0,0,0,0,.17l.06.2c0,.07.07.13.1.2a1.19,1.19,0,0,0,.09.15,1.79,1.79,0,0,0,.25.31l24,24a2,2,0,1,0,2.82-2.82L6.83,28H50a2,2,0,0,0,0-4Z"
    />
</svg>
`;
const ve = class ve extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ht.content.cloneNode(!0));
  }
};
r(ve, "register", () => customElements.define("ui-svg-back-arrow-navigation", ve));
let Ie = ve;
const dt = document.createElement("template");
dt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect width="24" height="24" fill="none" />
    <path
        d="M17 9.5L12 14.5L7 9.5"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>
`;
const we = class we extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(dt.content.cloneNode(!0));
  }
};
r(we, "register", () => customElements.define("ui-svg-chevron-down", we));
let Ue = we;
const ut = document.createElement("template");
ut.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 1024 1024"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M960 160h-291.2a160 160 0 0 0-313.6 0H64a32 32 0 0 0 0 64h896a32 32 0 0 0 0-64zM512 96a96 96 0 0 1 90.24 64h-180.48A96 96 0 0 1 512 96zM844.16 290.56a32 32 0 0 0-34.88 6.72A32 32 0 0 0 800 320a32 32 0 1 0 64 0 33.6 33.6 0 0 0-9.28-22.72 32 32 0 0 0-10.56-6.72zM832 416a32 32 0 0 0-32 32v96a32 32 0 0 0 64 0v-96a32 32 0 0 0-32-32zM832 640a32 32 0 0 0-32 32v224a32 32 0 0 1-32 32H256a32 32 0 0 1-32-32V320a32 32 0 0 0-64 0v576a96 96 0 0 0 96 96h512a96 96 0 0 0 96-96v-224a32 32 0 0 0-32-32z"
        fill="currentColor"
    />
    <path
        d="M384 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM544 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM704 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0z"
        fill="currentColor"
    />
</svg>
`;
const be = class be extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ut.content.cloneNode(!0));
  }
};
r(be, "register", () => customElements.define("ui-svg-delete-recycle-bin", be));
let ze = be;
const pt = document.createElement("template");
pt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M20.1497 7.93997L8.27971 19.81C7.21971 20.88 4.04971 21.3699 3.27971 20.6599C2.50971 19.9499 3.06969 16.78 4.12969 15.71L15.9997 3.84C16.5478 3.31801 17.2783 3.03097 18.0351 3.04019C18.7919 3.04942 19.5151 3.35418 20.0503 3.88938C20.5855 4.42457 20.8903 5.14781 20.8995 5.90463C20.9088 6.66146 20.6217 7.39189 20.0997 7.93997H20.1497Z"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
    <path
        d="M21 21H12"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    /></svg
>;
`;
const ye = class ye extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(pt.content.cloneNode(!0));
  }
};
r(ye, "register", () => customElements.define("ui-svg-edit2", ye));
let qe = ye;
const mt = document.createElement("template");
mt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g fill="currentColor" transform="translate(85.333333, 42.666667)">
            <path
                d="M75.9466667,285.653333 C63.8764997,278.292415 49.6246897,275.351565 35.6266667,277.333333 L1.42108547e-14,277.333333 L1.42108547e-14,405.333333 L28.3733333,405.333333 L28.3733333,356.48 L40.5333333,356.48 C53.1304778,357.774244 65.7885986,354.68506 76.3733333,347.733333 C85.3576891,340.027178 90.3112817,328.626053 89.8133333,316.8 C90.4784904,304.790173 85.3164923,293.195531 75.9466667,285.653333 L75.9466667,285.653333 Z M53.12,332.373333 C47.7608867,334.732281 41.8687051,335.616108 36.0533333,334.933333 L27.7333333,334.933333 L27.7333333,298.666667 L36.0533333,298.666667 C42.094796,298.02451 48.1897668,299.213772 53.5466667,302.08 C58.5355805,305.554646 61.3626692,311.370371 61.0133333,317.44 C61.6596233,323.558965 58.5400493,329.460862 53.12,332.373333 L53.12,332.373333 Z M150.826667,277.333333 L115.413333,277.333333 L115.413333,405.333333 L149.333333,405.333333 C166.620091,407.02483 184.027709,403.691457 199.466667,395.733333 C216.454713,383.072462 225.530463,362.408923 223.36,341.333333 C224.631644,323.277677 218.198313,305.527884 205.653333,292.48 C190.157107,280.265923 170.395302,274.806436 150.826667,277.333333 L150.826667,277.333333 Z M178.986667,376.32 C170.098963,381.315719 159.922142,383.54422 149.76,382.72 L144.213333,382.72 L144.213333,299.946667 L149.333333,299.946667 C167.253333,299.946667 174.293333,301.653333 181.333333,308.053333 C189.877212,316.948755 194.28973,329.025119 193.493333,341.333333 C194.590843,354.653818 189.18793,367.684372 178.986667,376.32 L178.986667,376.32 Z M254.506667,405.333333 L283.306667,405.333333 L283.306667,351.786667 L341.333333,351.786667 L341.333333,329.173333 L283.306667,329.173333 L283.306667,299.946667 L341.333333,299.946667 L341.333333,277.333333 L254.506667,277.333333 L254.506667,405.333333 L254.506667,405.333333 Z M234.666667,7.10542736e-15 L9.52127266e-13,7.10542736e-15 L9.52127266e-13,234.666667 L42.6666667,234.666667 L42.6666667,192 L42.6666667,169.6 L42.6666667,42.6666667 L216.96,42.6666667 L298.666667,124.373333 L298.666667,169.6 L298.666667,192 L298.666667,234.666667 L341.333333,234.666667 L341.333333,106.666667 L234.666667,7.10542736e-15 L234.666667,7.10542736e-15 Z"
            ></path>
        </g>
    </g></svg
>
`;
const xe = class xe extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(mt.content.cloneNode(!0));
  }
};
r(xe, "register", () => customElements.define("ui-svg-pdf-document", xe));
let Pe = xe;
const gt = document.createElement("template");
gt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 -0.5 21 21"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <defs></defs>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g transform="translate(-259.000000, -840.000000)" fill="currentColor">
            <g transform="translate(56.000000, 160.000000)">
                <path
                    d="M211.261065,690.694762 C209.623062,692.25443 206.966811,692.25443 205.328807,690.694762 L203.614251,689.062203 C202.79525,688.282368 202.79525,687.018258 203.614251,686.238424 C204.433253,685.45859 205.761903,685.45859 206.580905,686.238424 C207.721845,687.3248 208.972894,687.224949 209.777214,686.458096 C210.587827,685.686249 210.685352,684.498026 209.541266,683.409653 C208.722264,682.629819 208.722264,681.36471 209.541266,680.584876 C210.361317,679.805041 211.688918,679.805041 212.50792,680.584876 L214.22667,682.221429 C215.864674,683.781098 215.864674,686.310317 214.22667,687.869985 L223.356286,696.563988 C225.318325,698.431197 222.350623,701.253977 220.390682,699.387767 L211.261065,690.694762 Z"
                ></path>
            </g>
        </g>
    </g>
</svg>
`;
const Ce = class Ce extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(gt.content.cloneNode(!0));
  }
};
r(Ce, "register", () => customElements.define("ui-svg-settings", Ce));
let Oe = Ce;
const ft = document.createElement("template");
ft.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        x="48"
        y="80"
        width="416"
        height="384"
        rx="48"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="128"
        y1="48"
        x2="128"
        y2="80"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="384"
        y1="48"
        x2="384"
        y2="80"
    />
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x="112"
        y="224"
        width="96"
        height="96"
        rx="13"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="464"
        y1="160"
        x2="48"
        y2="160"
    />
</svg>
`;
const Le = class Le extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ft.content.cloneNode(!0));
  }
};
r(Le, "register", () => customElements.define("ui-svg-today-outline", Le));
let Ze = Le;
const m = {
  BackArrowNavigation: Ie,
  ChevronDown: Ue,
  DeleteRecycleBin: ze,
  Edit2: qe,
  PDFDocument: Pe,
  Settings: Oe,
  TodayOutline: Ze
}, vt = document.createElement("template");
vt.innerHTML = `
<style>
    :host {
        position: relative;
        display: flex;
        flex-direction: row;
        width: 100%;
        padding: calc(var(--spacing) / 4) calc(var(--spacing) / 2);
        border-radius: var(--radius);
    }

    :host > .text {
        display: flex;
        flex-direction: column;
        justify-content: center;
        min-width: fit-content;
        width: 100%;
        margin-right: var(--spacing);
    }

    :host > .input {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: fit-content;
        width: 100%;
    }
</style>

<span class="text">
    <slot name="primary"></slot>
    <slot name="secondary"></slot>
</span>

<span class="input">
    <slot name="input"></slot>
</span>

<slot></slot>
`;
var p, u, x, X, Y, C, ke, wt, Ee, bt, Be;
let Ot = (Be = class {
  /** @param {Label} root */
  constructor(e) {
    l(this, ke);
    l(this, Ee);
    /** @type {Label} */
    l(this, p, void 0);
    /** @type {HTMLElement | null} */
    l(this, u, null);
    l(this, x, !1);
    l(this, X, async () => !!i(this, u) && i(this, u).click());
    l(this, Y, async (e) => e.stopPropagation());
    /** @type {() => void} */
    l(this, C, void 0);
    a(this, p, e);
  }
  enableRipple() {
    i(this, C) || (this.removeRipple = Se(i(this, p)), i(this, p).style.cursor = "pointer", d(this, ke, wt).call(this));
  }
  disableRipple() {
    i(this, C) && i(this, C).call(this), d(this, Ee, bt).call(this);
  }
}, p = new WeakMap(), u = new WeakMap(), x = new WeakMap(), X = new WeakMap(), Y = new WeakMap(), C = new WeakMap(), ke = new WeakSet(), wt = function() {
  i(this, x) || (a(this, u, i(this, p).querySelector("input")), i(this, u) && (i(this, p).addEventListener("click", i(this, X)), i(this, u).addEventListener("click", i(this, Y))), a(this, x, !0));
}, Ee = new WeakSet(), bt = function() {
  i(this, u) && (i(this, p).removeEventListener("click", i(this, X)), i(this, u).removeEventListener("click", i(this, Y))), a(this, x, !1);
}, Be);
const j = class j extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(vt.content.cloneNode(!0)), this.ui = new Ot(this);
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "ripple":
        s !== null ? this.ui.enableRipple() : this.ui.disableRipple();
        break;
    }
  }
};
r(j, "register", () => customElements.define("ui-label", j)), r(j, "observedAttributes", ["ripple"]);
let le = j;
const yt = document.createElement("template");
yt.innerHTML = `
<style>
    :host {
        font-size: 1.1em;
        font-weight: normal;
    }
</style>

<slot></slot>
`;
const Me = class Me extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(yt.content.cloneNode(!0));
  }
};
r(Me, "register", () => customElements.define("ui-primary", Me));
let ae = Me;
const xt = document.createElement("template");
xt.innerHTML = `
<style>
    :host {
        font-size: 0.9em;
        font-weight: 300;
        font-style: italic;
    }
</style>

<slot></slot>
`;
const Te = class Te extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(xt.content.cloneNode(!0));
  }
};
r(Te, "register", () => customElements.define("ui-secondary", Te));
let ce = Te;
var h, Re, Ct;
class Zt {
  constructor() {
    l(this, Re);
    /** @type {MediaQueryList | null} */
    l(this, h, null);
    this.currentTheme = null, this.themes = {};
  }
  enableAutoMode() {
    if (this.removeMode(), i(this, h)) {
      this.mediaChangeHandler(i(this, h));
      return;
    }
    a(this, h, window.matchMedia("(prefers-color-scheme: dark)")), i(this, h).addEventListener("change", this.mediaChangeHandler), this.mediaChangeHandler(i(this, h));
  }
  disableAutoMode() {
    d(this, Re, Ct).call(this);
  }
  /**
   * @param {string} name
   * @param {string} href
   */
  addTheme(e, t) {
    this.themes[e] = t;
  }
  /**
   * @param {string} name
   */
  loadTheme(e) {
    var s;
    if (!this.themes[e])
      throw `theme "${e}" is missing in this.themes`;
    if (((s = this.currentTheme) == null ? void 0 : s.name) == e)
      return;
    {
      const n = document.getElementById("theme");
      n && (document.head.removeChild(n), this.currentTheme = null);
    }
    const t = document.createElement("link");
    t.id = "theme", t.rel = "stylesheet", t.href = this.themes[e], document.head.appendChild(t), this.currentTheme = { name: e, href: this.themes[e] };
  }
  /**
   * @param {MediaQueryListEvent | MediaQueryList} ev
   */
  mediaChangeHandler(e) {
    e.matches ? document.body.setAttribute("data-theme", "dark") : document.body.setAttribute("data-theme", "light");
  }
  /**
   * @param {HTMLElement} element
   */
  removeMode(e = document.body) {
    e.removeAttribute("data-theme");
  }
  /**
   * @param {string} mode
   * @param {HTMLElement} element
   */
  setMode(e, t = document.body) {
    switch (e) {
      case "dark":
        t.setAttribute("data-theme", e);
        break;
      case "light":
        t.setAttribute("data-theme", e);
        break;
    }
  }
}
h = new WeakMap(), Re = new WeakSet(), Ct = function() {
  i(this, h) && (i(this, h).removeEventListener("change", this.mediaChangeHandler), a(this, h, null));
};
const N = class N extends HTMLElement {
  constructor() {
    super(), this.ui = new Zt();
  }
  attributeChangedCallback(e, t, s) {
    switch (e) {
      case "auto":
        s !== null ? this.ui.enableAutoMode() : this.ui.disableAutoMode();
        break;
      case "mode":
        s !== null ? this.ui.setMode(s) : this.ui.removeMode();
        break;
    }
  }
};
r(N, "register", () => customElements.define("ui-theme-handler", N)), r(N, "observedAttributes", ["auto", "mode"]);
let he = N;
const Dt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AppBar: B,
  Button: K,
  Container: G,
  FlexGrid: ee,
  FlexGridItem: F,
  FlexGridRow: _,
  IconButton: Q,
  Label: le,
  Lang: se,
  LangType: ie,
  Primary: ae,
  Secondary: ce,
  Select: te,
  SelectOption: I,
  StackLayout: re,
  StackLayoutPage: oe,
  Store: ne,
  ThemeHandler: he,
  svg: m
}, Symbol.toStringTag, { value: "Module" }));
async function Vt() {
  B.register(), Q.register(), K.register(), G.register(), F.register(), _.register(), ee.register(), I.register(), te.register(), ie.register(), se.register(), oe.register(), re.register(), ne.register(), ce.register(), ae.register(), le.register(), he.register();
}
async function Wt() {
  m.BackArrowNavigation.register(), m.ChevronDown.register(), m.DeleteRecycleBin.register(), m.Edit2.register(), m.PDFDocument.register(), m.Settings.register(), m.TodayOutline.register();
}
const ss = {
  ...St,
  wc: Dt,
  define: Vt,
  defineSVG: Wt
};
export {
  ss as default
};
