var Ut = Object.defineProperty;
var zt = (o, e, t) => e in o ? Ut(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[e] = t;
var r = (o, e, t) => (zt(o, typeof e != "symbol" ? e + "" : e, t), t), Oe = (o, e, t) => {
  if (!e.has(o))
    throw TypeError("Cannot " + t);
};
var s = (o, e, t) => (Oe(o, e, "read from private field"), t ? t.call(o) : e.get(o)), n = (o, e, t) => {
  if (e.has(o))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(o) : e.set(o, t);
}, a = (o, e, t, i) => (Oe(o, e, "write to private field"), i ? i.call(o, t) : e.set(o, t), t);
var d = (o, e, t) => (Oe(o, e, "access private method"), t);
var c;
class G {
  constructor() {
    /**
     * @type {any}
     */
    n(this, c, {});
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   */
  dispatchWithData(e, t) {
    if (t === void 0)
      throw "data is undefined!";
    if (s(this, c)[e])
      for (const i of s(this, c)[e])
        i(t);
    return this;
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  addListener(e, t) {
    if (typeof t != "function")
      throw `invalid event listener passed for "${e.toString()}" event!`;
    return s(this, c)[e] || (s(this, c)[e] = []), s(this, c)[e].push(t), () => {
      this.removeListener(e, t);
    };
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>)} listener
   */
  removeListener(e, t) {
    if (!s(this, c)[e])
      throw `no listeners found for ${e.toString()}, there is nothing to delete`;
    let i = !1, l = 0;
    for (const Pe of s(this, c)[e])
      Pe === t && (s(this, c)[e].splice(l, 1), i = !0), l++;
    if (!i)
      throw `listener not found for ${e.toString()}, there is nothing to delete`;
    return this;
  }
}
c = new WeakMap();
const qt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Events: G
}, Symbol.toStringTag, { value: "Module" })), Pt = {
  color: "currentColor",
  opacity: 0.2,
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out"
};
function nt(o, e) {
  e = { ...Pt, ...e };
  const t = document.createElement("div");
  t.classList.add("ripple"), t.style.position = "absolute", t.style.color = "inherit", t.style.borderRadius = "50%", t.style.pointerEvents = "none", t.style.width = "100px", t.style.height = "100px", t.style.marginTop = "-50px", t.style.marginLeft = "-50px", t.style.opacity = `${e.opacity}`, t.style.backgroundColor = e.color, t.style.transform = "scale(0) translate(0, 0)", t.style.transition = `transform ${e.spreadDuration} ${e.spreadTiming} 0s,opacity ${e.clearDuration} ${e.clearTiming} 0s`, o.currentTarget.appendChild(t);
  const i = o.currentTarget.getBoundingClientRect();
  e.centered ? (t.style.top = `${i.height / 2}px`, t.style.left = `${i.width / 2}px`) : (t.style.top = `${o.clientY - i.top}px`, t.style.left = `${o.clientX - i.left}px`);
  const l = Math.max(i.width, i.height) * 0.02;
  return t.style.transform = `scale(${l}) translate(0, 0)`, t;
}
function lt(o) {
  o && (o.addEventListener("transitionend", (e) => {
    e.propertyName === "opacity" && o.remove();
  }), o.style.opacity = "0");
}
function qe(o, e = {}) {
  let t;
  const i = (Pe) => {
    t = nt(Pe, e);
  }, l = () => {
    lt(t);
  };
  return o.classList.add("ripple-container"), o.style.overflow = "hidden", o.addEventListener("pointerdown", i), o.addEventListener("pointerup", l), o.addEventListener("pointerleave", l), () => {
    o.classList.remove("ripple-container"), o.removeEventListener("pointerdown", i), o.removeEventListener("pointerup", l), o.removeEventListener("pointerleave", l);
  };
}
const Ot = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: qe,
  start: nt,
  stop: lt
}, Symbol.toStringTag, { value: "Module" }));
function Zt() {
  return /(android)/i.test(navigator.userAgent);
}
const Dt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isAndroid: Zt
}, Symbol.toStringTag, { value: "Module" })), Wt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  events: qt,
  ripple: Ot,
  utils: Dt
}, Symbol.toStringTag, { value: "Module" })), at = document.createElement("template");
at.innerHTML = `
<style>
    :host {
        display: flex;
        position: absolute;
        z-index: 100;
        background-color: hsla(var(--bg), .2);
        backdrop-filter: blur(5px);
        overflow: hidden;
        user-select: none;
    }

    :host([position="top"]) {
        top: 0;
        left: 0;
        width: 100%;
        height: var(--app-bar-height);
        border-bottom: var(--border-width) var(--border-style) hsl(var(--border));
    }

    :host > ui-flex-grid-row {
        width: 100%;
        height: 100%;
        align-items: center;
        justify-content: space-between;
    }

    :host > ui-flex-grid-row > * {
        height: 100%;
    }

    :host > ui-flex-grid-row > *:nth-child(1),
    :host > ui-flex-grid-row > *:nth-child(3) {
        width: fit-content;
    }

    :host > ui-flex-grid-row > [slot="left"] {
        margin-left: 0;
    }

    :host > ui-flex-grid-row > [slot="center"] {
        width: 100%;
    }

    :host > ui-flex-grid-row > [slot="right"] {
        margin-right: 0;
        justify-content: flex-end;
    }
</style>

<ui-flex-grid-row gap="0.25rem">
    <ui-flex-grid-row gap="0.25rem">
        <slot name="left"></slot>
    </ui-flex-grid-row>

    <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
        <slot name="center"></slot>
    </ui-flex-grid-row>

    <ui-flex-grid-row gap="0.25rem">
        <slot name="right"></slot>
    </ui-flex-grid-row>
</ui-flex-grid-row>
`;
var w, Fe;
let Vt = (Fe = class {
  /** @param {AppBar} root */
  constructor(e) {
    /** @type {AppBar} */
    n(this, w, void 0);
    a(this, w, e);
  }
  getLeftSlot() {
    return [...s(this, w).querySelectorAll('[slot="left"]')];
  }
  getCenterSlot() {
    return [...s(this, w).querySelectorAll('[slot="center"]')];
  }
  getRightSlot() {
    return [...s(this, w).querySelectorAll('[slot="right"]')];
  }
}, w = new WeakMap(), Fe);
const ve = class ve extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(at.content.cloneNode(!0)), this.ui = new Vt(this);
  }
};
r(ve, "register", () => customElements.define("ui-app-bar", ve));
let _ = ve;
const ct = document.createElement("template");
ct.innerHTML = `
<style>
    :host {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        padding: var(--spacing) calc(var(--spacing) * 2.5);
        border: var(--border-width) var(--border-style) currentColor;
        border-radius: var(--radius);
        overflow: hidden;
        font-family: var(--font-family);
        font-weight: bold;
        text-transform: capitalize;
        cursor: pointer;
        outline: none;
        user-select: none;
    }

    :host([variant="full"]) {
        border: none;
    }

    :host([variant="full"][color="primary"]) {
        background-color: hsl(var(--primary));
        color: hsl(var(--primary-fg));
    }

    :host([variant="full"][color="secondary"]) {
        background-color: hsl(var(--secondary));
        color: hsl(var(--secondary-fg));
    }

    :host([variant="full"][color="destructive"]) {
        background-color: hsl(var(--destructive));
        color: hsl(var(--destructive-fg));
    }

    :host([variant="outline"]) {
        border-color: currentColor;
        background-color: transparent;
    }

    :host([variant="outline"][color="primary"]) {
        color: hsl(var(--primary));
    }

    :host([variant="outline"][color="secondary"]) {
        color: hsl(var(--secondary));
    }

    :host([variant="outline"][color="destructive"]) {
        color: hsl(var(--destructive));
    }

    :host([variant="ghost"]) {
        border-color: transparent;
        background-color: transparent;
    }

    :host([variant="ghost"][color="primary"]) {
        color: hsl(var(--primary));
    }

    :host([variant="ghost"][color="secondary"]) {
        color: hsl(var(--secondary));
    }

    :host([variant="ghost"][color="destructive"]) {
        color: hsl(var(--destructive));
    }

    :host(:disabled),
    :host(:disabled:hover),
    :host(:disabled:active) {
        background-color: transparent;
        opacity: 0.25;
        cursor: default;
    }
</style>

<slot></slot>
`;
var q, Ge;
let Jt = (Ge = class {
  /** @param {Button} root */
  constructor(e) {
    /** @type {Button} */
    n(this, q, void 0);
    a(this, q, e), this.removeRipple = null;
  }
  enableRipple() {
    this.removeRipple || (this.removeRipple = qe(s(this, q), { centered: !0 }));
  }
  disableRipple() {
    this.removeRipple && this.removeRipple(), this.removeRipple = null;
  }
}, q = new WeakMap(), Ge);
const M = class M extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ct.content.cloneNode(!0)), this.ui = new Jt(this);
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple();
  }
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "no-ripple":
        i !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
    }
  }
};
r(M, "register", () => customElements.define("ui-button", M)), r(M, "observedAttributes", ["no-ripple"]);
let ee = M;
const ht = document.createElement("template");
ht.innerHTML = `
<style>
    :host {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        width: 2.5em;
        height: 2.5em;
        padding: var(--spacing);
        border: var(--border-width) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);
        outline: none;
        overflow: hidden;
        font-family: var(--font-family);
        cursor: pointer;
        user-select: none;
    }

    :host([ghost]) {
        border-color: transparent !important;
        box-shadow: none;
    }

    :host([color="primary"]) {
        color: hsl(var(--primary));
        border-color: hsl(var(--primary));
    }

    :host([color="secondary"]) {
        color: hsl(var(--secondary));
        border-color: hsl(var(--secondary));
    }

    :host([color="destructive"]) {
        color: hsl(var(--destructive));
        border-color: hsl(var(--destructive));
    }

    /* :disabled */

    :host(:disabled),
    :host(:disabled:hover),
    :host(:disabled:active) {
        opacity: 0.25;
        cursor: default;
    }
</style>

<slot></slot>
`;
var P, _e;
let Bt = (_e = class {
  /** @param {IconButton} root */
  constructor(e) {
    /** @type {IconButton} */
    n(this, P, void 0);
    a(this, P, e), this.removeRipple = null;
  }
  enableRipple() {
    this.removeRipple || (this.removeRipple = qe(s(this, P), { centered: !0 }));
  }
  disableRipple() {
    this.removeRipple && this.removeRipple(), this.removeRipple = null;
  }
}, P = new WeakMap(), _e);
const T = class T extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ht.content.cloneNode(!0)), this.ui = new Bt(this);
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple();
  }
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "no-ripple":
        i !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
    }
  }
};
r(T, "register", () => customElements.define("ui-icon-button", T)), r(T, "observedAttributes", ["no-ripple"]);
let te = T;
const dt = document.createElement("template");
dt.innerHTML = `
<style>
    :host {
        display: block;
        width: 100%;
        max-width: 65em;
        margin: 0 auto;
        padding: var(--spacing);
    }
</style>

<slot></slot>
`;
const we = class we extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(dt.content.cloneNode(!0));
  }
};
r(we, "register", () => customElements.define("ui-container", we));
let se = we;
const ut = document.createElement("template");
ut.innerHTML = `
<style>
    /* TODO: Debugging here, remove later */
    * {
        border: 1px solid red;
    }

    :host {
        --header-height: 3rem;
        --footer-height: 3rem;

        position: fixed;

        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);

        max-width: 100%;
        max-height: 100%;

        margin: 0;
        padding: var(--spacing);

        /* Padding for ios devices */
        padding-top: calc(env(safe-area-inset-top, 0) + var(--spacing));
        padding-bottom: calc(env(safe-area-inset-bottom, 0) + var(--spacing));

        border: none;
        border-radius: var(--radius);

        background-color: transparent;

        -ms-overflow-style: none;
        scrollbar-width: none;

        z-index: 999;
    }

    :host(::-webkit-scrollbar) {
        display: none;
    }

    :host(::backdrop) {
        background-color: hsl(0, 0%, 0%, 0.4);
        backdrop-filter: blur(5px);
    }

    :host > article {
        background-color: hsl(var(--bg));
        color: hsl(var(--fg));

        border: var(--border-width, .1em) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);

        padding: 0;

        display: flex;
        flex-direction: column;
        justify-content: space-between;

        position: relative;
    }

    :host([fullscreen]),
    :host([fullscreen]) > article {
        width: 100%;
        height: 100%;
    }

    /*
     * Header Styles
     */
  
    header {
        display: flex;
        align-items: center;
        justify-content: space-between;

        padding: calc(var(--spacing) / 2);
        padding-left: var(--spacing);

        border-top-right-radius: var(--radius);
        border-top-left-radius: var(--radius);

        width: 100%;
        height: var(--header-height);
    }

    :host([fullscreen]) article header {
        position: absolute;
    }

    /*
     * Content Styles
     */

    .content {
        padding-left: var(--spacing);
        padding-right: var(--spacing);
        height: fit-content;
    }

    :host([fullscreen]) article .content {
        position: relative;
        width: 100%;
        height: 100%;
        padding-top: calc(--header-height + var(--spacing));
        padding-bottom: calc(--footer-height + var(--spacing));
    }

    /*
     * Footer Styles
     */

    footer {
        padding: var(--spacing);
        margin-top: var(--spacing);
        border-bottom-right-radius: var(--radius);
        border-bottom-left-radius: var(--radius);

        width: 100%;
        height: var(--footer-height);
    }

    :host([fullscreen]) article footer {
        position: absolute;
    }

    footer ui-flex-grid-row {
        height: 100%;
        flex-wrap: nowrap;
        justify-content: flex-end;
        align-items: center;
    }
</style>

<dialog class="ui-dialog">
	<article>
        <header>
            <h4><slot name="title"></slot></h4>

            <ui-icon-button ghost>
                <ui-svg-close></ui-svg-close>
            </ui-icon-button>
        </header>

        <section class="content">
            <slot></slot>
        </section>

        <footer>
            <ui-flex-grid-row gap="calc(var(--spacing) / 2)">
                <slot name="actions"></slot>
            </ui-flex-grid-row>
        </footer>
	</article>
</dialog>
`;
var b, v, et;
let Xt = (et = class {
  /**
   * @param {Dialog} root
   * @param {HTMLDialogElement} dialog
   */
  constructor(e, t) {
    /** @type {Dialog} */
    n(this, b, void 0);
    /** @type {HTMLDialogElement} */
    n(this, v, void 0);
    a(this, b, e), a(this, v, t), this.events = new G();
  }
  get dialog() {
    return s(this, v);
  }
  open(e = !1) {
    e ? s(this, v).showModal() : s(this, v).show();
  }
  close() {
    s(this, v).close();
  }
  get fullscreen() {
    return s(this, b).hasAttribute("fullscreen");
  }
  set fullscreen(e) {
    e ? s(this, b).setAttribute("fullscreen", "") : s(this, b).removeAttribute("fullscreen");
  }
}, b = new WeakMap(), v = new WeakMap(), et);
var O, Z;
const be = class be extends HTMLDialogElement {
  //static observedAttributes = [];
  constructor() {
    super();
    n(this, O, () => this.ui.events.dispatchWithData("close", null));
    n(this, Z, () => this.ui.close());
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(ut.content.cloneNode(!0)), this.ui = new Xt(this, this.shadowRoot.querySelector("dialog"));
  }
  connectedCallback() {
    const t = this.shadowRoot.querySelector("header ui-icon-button");
    t.addEventListener("close", s(this, O)), t.addEventListener("close", s(this, Z));
  }
  disconnectedCallback() {
    const t = this.shadowRoot.querySelector("header ui-icon-button");
    t.removeEventListener("close", s(this, O)), t.removeEventListener("close", s(this, Z));
  }
  /*
  attributeChangedCallback(name, _oldValue, newValue) {
      switch (name) {
      }
  }
  */
};
O = new WeakMap(), Z = new WeakMap(), r(be, "register", () => customElements.define("ui-dialog", be, { extends: "dialog" }));
let ie = be;
const pt = document.createElement("template");
pt.innerHTML = `
<style></style>
<slot></slot>
`;
var D, W, Ze;
const S = class S extends HTMLElement {
  constructor() {
    super();
    n(this, W);
    /** @type {string | null} */
    n(this, D, "1");
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(pt.content.cloneNode(!0));
  }
  connectedCallback() {
    d(this, W, Ze).call(this);
  }
  attributeChangedCallback(t, i, l) {
    switch (t) {
      case "flex":
        a(this, D, l !== null ? l : "1"), d(this, W, Ze).call(this);
        break;
    }
  }
};
D = new WeakMap(), W = new WeakSet(), Ze = function() {
  this.shadowRoot.querySelector("style").textContent = `
            :host {
                flex: ${s(this, D)};
            }
        `;
}, r(S, "register", () => customElements.define("ui-flex-grid-item", S)), r(S, "observedAttributes", ["flex"]);
let oe = S;
const gt = document.createElement("template");
gt.innerHTML = `
<style></style>
<slot></slot>
`;
var V, J, De;
const H = class H extends HTMLElement {
  constructor() {
    super();
    n(this, J);
    /** @type {string | null} */
    n(this, V, "0");
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(gt.content.cloneNode(!0));
  }
  connectedCallback() {
    d(this, J, De).call(this);
  }
  attributeChangedCallback(t, i, l) {
    switch (t) {
      case "gap":
        a(this, V, l !== null ? l : "0"), d(this, J, De).call(this);
        break;
    }
  }
};
V = new WeakMap(), J = new WeakSet(), De = function() {
  this.shadowRoot.querySelector("style").textContent = `
            :host {
                --row-gap: ${s(this, V)};
                display: flex;
                flex-flow: row nowrap;
                position: relative;
                width: 100%;
            }

            :host ::slotted(ui-flex-grid-item) {
                margin: 0 var(--row-gap);
            }

            :host ::slotted(ui-flex-grid-item:first-child) {
                margin-left: 0;
            }

            :host ::slotted(ui-flex-grid-item:last-child) {
                margin-right: 0;
            }
        `;
}, r(H, "register", () => customElements.define("ui-flex-grid-row", H)), r(H, "observedAttributes", ["gap"]);
let re = H;
const mt = document.createElement("template");
mt.innerHTML = `
<style></style>
<slot></slot>
`;
var B, ye, ft;
const R = class R extends HTMLElement {
  constructor() {
    super();
    n(this, ye);
    /** @type {string | null} */
    n(this, B, "0");
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(mt.content.cloneNode(!0));
  }
  connectedCallback() {
    d(this, ye, ft).call(this);
  }
  attributeChangedCallback(t, i, l) {
    switch (t) {
      case "gap":
        a(this, B, l !== null ? l : "0");
        break;
    }
  }
};
B = new WeakMap(), ye = new WeakSet(), ft = function() {
  this.shadowRoot.querySelector("style").textContent = `
            :host {
                --gap: ${s(this, B)};
                display: flex;
                flex-flow: column nowrap;
                position: relative;
                width: 100%;
                height: fit-content;
            }

            :host ::slotted(ui-flex-grid-row) {
                margin: var(--gap) 0;
            }

            :host ::slotted(ui-flex-grid-row:first-child) {
                margin-top: 0;
            }

            :host ::slotted(ui-flex-grid-row:last-child) {
                margin-bottom: 0;
            }
        `;
}, r(R, "register", () => customElements.define("ui-flex-grid", R)), r(R, "observedAttributes", ["gap"]);
let ne = R;
const vt = document.createElement("template");
vt.innerHTML = `
<style>
    :host {
        display: none;
        padding: var(--spacing);
        padding-right: 2.5em;
        font-family: var(--font-family);
        transition: background-color 0.25s linear;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

<slot></slot>
`;
var g, tt;
let Yt = (tt = class {
  /** @param {SelectOption} root */
  constructor(e) {
    /** @type {SelectOption} */
    n(this, g, void 0);
    a(this, g, e);
  }
  get value() {
    return s(this, g).getAttribute("value");
  }
  set value(e) {
    s(this, g).setAttribute("value", e);
  }
  get selected() {
    return s(this, g).hasAttribute("selected");
  }
  set selected(e) {
    e ? s(this, g).setAttribute("selected", "") : s(this, g).removeAttribute("selected");
  }
}, g = new WeakMap(), tt);
const xe = class xe extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(vt.content.cloneNode(!0)), this.ui = new Yt(this);
  }
};
r(xe, "register", () => customElements.define("ui-select-option", xe));
let z = xe;
const wt = document.createElement("template");
wt.innerHTML = `
<style>
    :host {
        --items-length: 0;
        position: relative; 
        display: block;
        width: 100%;
        height: calc(1em * var(--line-height) + var(--spacing) * 2);
        border: var(--border-width) var(--border-style) hsl(var(--border));
        border-radius: var(--radius);
        font-size: 0.95em;
        transition: height 0.25s ease;
        line-height: 1.15;
        box-sizing: content-box !important;
        overflow: hidden;
    }

    .options {
        cursor: pointer;
        display: none;
        display: flex;
        flex-direction: column;
        min-height: 100%;
    }

    .icon {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 0;
        right: 0;
        width: 2.5em;
        height: 100%;
        color: hsl(var(--primary));
    }

    ::slotted(ui-select-option) {
        display: block;
    }

    :host(.open) {
        height: calc(
            (var(--spacing) * 2 + (1em * 1.15)) * var(--items-length)
        );
    }

    :host(.open) .options {
        display: block;
    }

    :host(.open) .icon {
        display: none;
    }

    :host(.open) ::slotted(ui-select-option[selected]) {
        background-color: hsl(var(--primary));
        color: hsl(var(--primary-fg));
    }

    :host(.open) ::slotted(ui-select-option:not([selected]):hover) {
        background-color: hsl(var(--fg), 0.1);
    }

    :host(:not(.open)) .options:has(> ::slotted(ui-select-option[selected])) {
        display: block;
    }

    :host(:not(.open)) ::slotted(ui-select-option:not([selected])) {
        display: none;
    }
</style>

<div class="options">
    <div class="icon"><ui-icon-chevron-down></ui-icon-chevron-down></div>

    <slot></slot>
</div>
`;
var X, x;
const Le = class Le extends HTMLElement {
  constructor() {
    super();
    /** @param {Event} ev */
    n(this, X, (t) => {
      this.classList.toggle("open") ? (t.stopPropagation(), this.addEventListener("click", s(this, x))) : setTimeout(
        () => this.removeEventListener("click", s(this, x))
      );
    });
    /** @param {MouseEvent | PointerEvent} ev */
    n(this, x, (t) => {
      (t.composedPath() || []).forEach((i) => {
        i instanceof z && ([...this.querySelectorAll("ui-select-option")].forEach(
          (l) => l.removeAttribute("selected")
        ), i.setAttribute("selected", ""), this.dispatchEvent(new CustomEvent("change", { detail: i })));
      });
    });
    this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(wt.content.cloneNode(!0));
  }
  connectedCallback() {
    var t;
    (t = this.shadowRoot.querySelector(".options")) == null || t.addEventListener("click", s(this, X)), this.style.setProperty(
      "--items-length",
      this.querySelectorAll("ui-select-option").length.toString()
    );
  }
  disconnectedCallback() {
    var t;
    this.removeEventListener("click", s(this, x)), (t = this.shadowRoot.querySelector(".options")) == null || t.addEventListener("click", s(this, X));
  }
};
X = new WeakMap(), x = new WeakMap(), r(Le, "register", () => customElements.define("ui-select", Le));
let le = Le;
var Y, L, K, st;
let Kt = (st = class {
  /** @param {Lang} root */
  constructor(e) {
    /** @type {Lang} */
    n(this, Y, void 0);
    /**
     * @type {Events<{ "change": import("./lang-type").LangType}>}
     */
    n(this, L, void 0);
    /**
     * @type {{
     *  [key: string]: {
     *      [key: string]: string;
     *  };
     * }}
     */
    n(this, K, void 0);
    a(this, Y, e), a(this, L, new G()), this.langType = null;
  }
  /** @returns {import("./lang-type").LangType} */
  getFallbackElement() {
    return s(this, Y).querySelector("ui-lang-type[fallback]");
  }
  /**
   * @param {import("./lang-type").LangType} langType
   * @param {{
   *  [key: string]: {
   *      [key: string]: string;
   *  };
   * }} data
   */
  new(e, t) {
    this.langType = e, a(this, K, t), s(this, L).dispatchWithData("change", this.langType);
  }
  /**
   * @param {string} group
   * @param {string} key
   */
  get(e, t) {
    var i;
    return (i = s(this, K)) == null ? void 0 : i[e][t];
  }
  /**
   * @param {"change"} key
   * @param {(langType: import("./lang-type").LangType | null) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(e, t, i = !1) {
    if (typeof t != "function")
      throw "callback is not a function";
    return i && t(this.langType), s(this, L).addListener(e, t);
  }
}, Y = new WeakMap(), L = new WeakMap(), K = new WeakMap(), st);
var ke, bt;
const $ = class $ extends HTMLElement {
  constructor() {
    super();
    /** @param {string} name */
    n(this, ke);
    this.ui = new Kt(this);
  }
  attributeChangedCallback(t, i, l) {
    switch (t) {
      case "current":
        l !== null && d(this, ke, bt).call(this, l);
        break;
    }
  }
};
ke = new WeakSet(), bt = async function(t) {
  const i = this.querySelector(`ui-lang-type[name="${t}"]`) || this.ui.getFallbackElement();
  if (!i)
    return;
  if (!i.ui.href)
    throw "Missing href attribute!";
  const l = await fetch(i.ui.href);
  this.ui.new(i, await l.json());
}, r($, "register", () => customElements.define("ui-lang", $)), r($, "observedAttributes", ["current"]);
let ae = $, Qt = class {
  constructor() {
    this.name = "", this.href = "", this.fallback = !1;
  }
};
const A = class A extends HTMLElement {
  constructor() {
    super(), this.ui = new Qt();
  }
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "name":
        this.ui.name = i ?? "";
        break;
      case "href":
        this.ui.href = i ?? "";
        break;
      case "fallback":
        this.ui.fallback = i != null;
        break;
    }
  }
};
r(A, "register", () => customElements.define("ui-lang-type", A)), r(A, "observedAttributes", ["name", "href", "fallback"]);
let ce = A;
const yt = document.createElement("template");
yt.innerHTML = `
    <style>
        :host {
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            animation: fade-in 0.5s;
            transition: opacity 0.5s ease;
        }

        :host(:last-child) {
            opacity: 1;
        }

        @keyframes fade-in {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
    </style>

    <slot></slot>
`;
let Ft = class {
  constructor() {
    this.name = "";
  }
};
const j = class j extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(yt.content.cloneNode(!0)), this.ui = new Ft();
  }
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "name":
        this.ui.name = i !== null ? i : "";
        break;
    }
  }
};
r(j, "register", () => customElements.define("ui-stack-layout-page", j)), r(j, "observedAttributes", ["name"]);
let he = j;
const xt = document.createElement("template");
xt.innerHTML = `
    <style>
        :host {
            display: block;
            position: relative;
            width: 100%;
            height: 100%;
        }
    </style>

    <slot></slot>
`;
var y, k, it;
let Gt = (it = class {
  /** @param {StackLayout} root */
  constructor(e) {
    /** @type {StackLayout} */
    n(this, y, void 0);
    /**
     * @type {Pages}
     */
    n(this, k, {});
    a(this, y, e), this.events = new G(), this.stack = [];
  }
  /**
   * @param {string} name
   * @param {() => (StackLayoutPage | DocumentFragment)} cb
   */
  registerPage(e, t) {
    s(this, k)[e] = t;
  }
  /**
   * @param {string} name
   */
  unregisterPage(e) {
    delete s(this, k)[e];
  }
  goBack() {
    if (!this.stack.length)
      return;
    const e = this.stack.pop();
    e.ontransitionend = () => {
      e.ontransitionend = null, s(this, y).removeChild(e);
    }, this.stack.length && s(this, y).appendChild(this.stack[this.stack.length - 1]), this.dispatchChangeEvent();
  }
  /**
   * @param {string} name
   */
  setPage(e) {
    if (this.stack.push(
      // @ts-expect-error
      s(this, y).appendChild(s(this, k)[e]().children[0])
    ), this.stack.length > 1) {
      const t = this.stack[this.stack.length - 2];
      t.ontransitionend = () => {
        t.ontransitionend = null, t.parentElement.removeChild(t);
      };
    }
    this.dispatchChangeEvent();
  }
  async dispatchChangeEvent() {
    this.events.dispatchWithData(
      "change",
      {
        newPage: this.stack[this.stack.length - 1] || null,
        oldPage: this.stack[this.stack.length - 2] || null
      }
    );
  }
}, y = new WeakMap(), k = new WeakMap(), it);
const Ce = class Ce extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(xt.content.cloneNode(!0)), this.ui = new Gt(this);
  }
};
r(Ce, "register", () => customElements.define("ui-stack-layout", Ce));
let de = Ce;
var m, ot;
let _t = (ot = class {
  constructor() {
    /** @type {any} */
    n(this, m, {});
    this.events = new G(), this.localStoragePrefix = "", this.enableLocalStorage = !1;
  }
  /**
   * @param {keyof T} key
   */
  get(e) {
    return s(this, m)[e];
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
   * `this.enableLocalStorage` flag needs to be set to `true` for this to work
   */
  set(e, t, i = !1) {
    if (i && this.enableLocalStorage) {
      const l = JSON.parse(localStorage.getItem(this.localStoragePrefix + e.toString()) || "null");
      s(this, m)[e] = l ?? t;
    } else
      s(this, m)[e] = t;
    this.enableLocalStorage && localStorage.setItem(this.localStoragePrefix + e.toString(), JSON.stringify(s(this, m)[e])), this.events.dispatchWithData(e, s(this, m)[e]);
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {(data: T[K]) => any} callback
   */
  update(e, t) {
    if (typeof t != "function")
      throw "callback is not a function";
    this.set(e, t(s(this, m)[e]));
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {(data: T[K]) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(e, t, i = !1) {
    if (typeof t != "function")
      throw "callback is not a function";
    return i && t(this.get(e)), this.events.addListener(e, t);
  }
}, m = new WeakMap(), ot);
const N = class N extends HTMLElement {
  constructor() {
    super(), this.ui = new _t();
  }
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "local-storage-prefix":
        this.ui.localStoragePrefix = i !== null ? i : "";
        break;
      case "enable-local-storage":
        this.ui.enableLocalStorage = i !== null;
        break;
    }
  }
};
r(N, "register", () => customElements.define("ui-store", N)), r(N, "observedAttributes", ["local-storage-prefix", "enable-local-storage"]);
let ue = N;
const Lt = document.createElement("template");
Lt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 52 52"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M50,24H6.83L27.41,3.41a2,2,0,0,0,0-2.82,2,2,0,0,0-2.82,0l-24,24a1.79,1.79,0,0,0-.25.31A1.19,1.19,0,0,0,.25,25c0,.07-.07.13-.1.2l-.06.2a.84.84,0,0,0,0,.17,2,2,0,0,0,0,.78.84.84,0,0,0,0,.17l.06.2c0,.07.07.13.1.2a1.19,1.19,0,0,0,.09.15,1.79,1.79,0,0,0,.25.31l24,24a2,2,0,1,0,2.82-2.82L6.83,28H50a2,2,0,0,0,0-4Z"
    />
</svg>
`;
const Ee = class Ee extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Lt.content.cloneNode(!0));
  }
};
r(Ee, "register", () => customElements.define("ui-svg-back-arrow-navigation", Ee));
let We = Ee;
const kt = document.createElement("template");
kt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect width="24" height="24" fill="none" />
    <path
        d="M17 9.5L12 14.5L7 9.5"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>
`;
const Me = class Me extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(kt.content.cloneNode(!0));
  }
};
r(Me, "register", () => customElements.define("ui-svg-chevron-down", Me));
let Ve = Me;
const Ct = document.createElement("template");
Ct.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_429_11083)">
    <path d="M7 7.00006L17 17.0001M7 17.0001L17 7.00006" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/>
    </g>
    <defs>
        <clipPath id="clip0_429_11083">
        <rect width="24" height="24" fill="none"/>
        </clipPath>
    </defs>
</svg>
`;
const Te = class Te extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Ct.content.cloneNode(!0));
  }
};
r(Te, "register", () => customElements.define("ui-svg-close", Te));
let Je = Te;
const Et = document.createElement("template");
Et.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 1024 1024"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M960 160h-291.2a160 160 0 0 0-313.6 0H64a32 32 0 0 0 0 64h896a32 32 0 0 0 0-64zM512 96a96 96 0 0 1 90.24 64h-180.48A96 96 0 0 1 512 96zM844.16 290.56a32 32 0 0 0-34.88 6.72A32 32 0 0 0 800 320a32 32 0 1 0 64 0 33.6 33.6 0 0 0-9.28-22.72 32 32 0 0 0-10.56-6.72zM832 416a32 32 0 0 0-32 32v96a32 32 0 0 0 64 0v-96a32 32 0 0 0-32-32zM832 640a32 32 0 0 0-32 32v224a32 32 0 0 1-32 32H256a32 32 0 0 1-32-32V320a32 32 0 0 0-64 0v576a96 96 0 0 0 96 96h512a96 96 0 0 0 96-96v-224a32 32 0 0 0-32-32z"
        fill="currentColor"
    />
    <path
        d="M384 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM544 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM704 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0z"
        fill="currentColor"
    />
</svg>
`;
const Se = class Se extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Et.content.cloneNode(!0));
  }
};
r(Se, "register", () => customElements.define("ui-svg-delete-recycle-bin", Se));
let Be = Se;
const Mt = document.createElement("template");
Mt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M20.1497 7.93997L8.27971 19.81C7.21971 20.88 4.04971 21.3699 3.27971 20.6599C2.50971 19.9499 3.06969 16.78 4.12969 15.71L15.9997 3.84C16.5478 3.31801 17.2783 3.03097 18.0351 3.04019C18.7919 3.04942 19.5151 3.35418 20.0503 3.88938C20.5855 4.42457 20.8903 5.14781 20.8995 5.90463C20.9088 6.66146 20.6217 7.39189 20.0997 7.93997H20.1497Z"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
    <path
        d="M21 21H12"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    /></svg
>;
`;
const He = class He extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Mt.content.cloneNode(!0));
  }
};
r(He, "register", () => customElements.define("ui-svg-edit2", He));
let Xe = He;
const Tt = document.createElement("template");
Tt.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g fill="currentColor" transform="translate(85.333333, 42.666667)">
            <path
                d="M75.9466667,285.653333 C63.8764997,278.292415 49.6246897,275.351565 35.6266667,277.333333 L1.42108547e-14,277.333333 L1.42108547e-14,405.333333 L28.3733333,405.333333 L28.3733333,356.48 L40.5333333,356.48 C53.1304778,357.774244 65.7885986,354.68506 76.3733333,347.733333 C85.3576891,340.027178 90.3112817,328.626053 89.8133333,316.8 C90.4784904,304.790173 85.3164923,293.195531 75.9466667,285.653333 L75.9466667,285.653333 Z M53.12,332.373333 C47.7608867,334.732281 41.8687051,335.616108 36.0533333,334.933333 L27.7333333,334.933333 L27.7333333,298.666667 L36.0533333,298.666667 C42.094796,298.02451 48.1897668,299.213772 53.5466667,302.08 C58.5355805,305.554646 61.3626692,311.370371 61.0133333,317.44 C61.6596233,323.558965 58.5400493,329.460862 53.12,332.373333 L53.12,332.373333 Z M150.826667,277.333333 L115.413333,277.333333 L115.413333,405.333333 L149.333333,405.333333 C166.620091,407.02483 184.027709,403.691457 199.466667,395.733333 C216.454713,383.072462 225.530463,362.408923 223.36,341.333333 C224.631644,323.277677 218.198313,305.527884 205.653333,292.48 C190.157107,280.265923 170.395302,274.806436 150.826667,277.333333 L150.826667,277.333333 Z M178.986667,376.32 C170.098963,381.315719 159.922142,383.54422 149.76,382.72 L144.213333,382.72 L144.213333,299.946667 L149.333333,299.946667 C167.253333,299.946667 174.293333,301.653333 181.333333,308.053333 C189.877212,316.948755 194.28973,329.025119 193.493333,341.333333 C194.590843,354.653818 189.18793,367.684372 178.986667,376.32 L178.986667,376.32 Z M254.506667,405.333333 L283.306667,405.333333 L283.306667,351.786667 L341.333333,351.786667 L341.333333,329.173333 L283.306667,329.173333 L283.306667,299.946667 L341.333333,299.946667 L341.333333,277.333333 L254.506667,277.333333 L254.506667,405.333333 L254.506667,405.333333 Z M234.666667,7.10542736e-15 L9.52127266e-13,7.10542736e-15 L9.52127266e-13,234.666667 L42.6666667,234.666667 L42.6666667,192 L42.6666667,169.6 L42.6666667,42.6666667 L216.96,42.6666667 L298.666667,124.373333 L298.666667,169.6 L298.666667,192 L298.666667,234.666667 L341.333333,234.666667 L341.333333,106.666667 L234.666667,7.10542736e-15 L234.666667,7.10542736e-15 Z"
            ></path>
        </g>
    </g></svg
>
`;
const Re = class Re extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Tt.content.cloneNode(!0));
  }
};
r(Re, "register", () => customElements.define("ui-svg-pdf-document", Re));
let Ye = Re;
const St = document.createElement("template");
St.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 -0.5 21 21"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <defs></defs>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g transform="translate(-259.000000, -840.000000)" fill="currentColor">
            <g transform="translate(56.000000, 160.000000)">
                <path
                    d="M211.261065,690.694762 C209.623062,692.25443 206.966811,692.25443 205.328807,690.694762 L203.614251,689.062203 C202.79525,688.282368 202.79525,687.018258 203.614251,686.238424 C204.433253,685.45859 205.761903,685.45859 206.580905,686.238424 C207.721845,687.3248 208.972894,687.224949 209.777214,686.458096 C210.587827,685.686249 210.685352,684.498026 209.541266,683.409653 C208.722264,682.629819 208.722264,681.36471 209.541266,680.584876 C210.361317,679.805041 211.688918,679.805041 212.50792,680.584876 L214.22667,682.221429 C215.864674,683.781098 215.864674,686.310317 214.22667,687.869985 L223.356286,696.563988 C225.318325,698.431197 222.350623,701.253977 220.390682,699.387767 L211.261065,690.694762 Z"
                ></path>
            </g>
        </g>
    </g>
</svg>
`;
const $e = class $e extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(St.content.cloneNode(!0));
  }
};
r($e, "register", () => customElements.define("ui-svg-settings", $e));
let Ke = $e;
const Ht = document.createElement("template");
Ht.innerHTML = `
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        x="48"
        y="80"
        width="416"
        height="384"
        rx="48"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="128"
        y1="48"
        x2="128"
        y2="80"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="384"
        y1="48"
        x2="384"
        y2="80"
    />
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x="112"
        y="224"
        width="96"
        height="96"
        rx="13"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="464"
        y1="160"
        x2="48"
        y2="160"
    />
</svg>
`;
const Ae = class Ae extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Ht.content.cloneNode(!0));
  }
};
r(Ae, "register", () => customElements.define("ui-svg-today-outline", Ae));
let Qe = Ae;
const p = {
  BackArrowNavigation: We,
  ChevronDown: Ve,
  Close: Je,
  DeleteRecycleBin: Be,
  Edit2: Xe,
  PDFDocument: Ye,
  Settings: Ke,
  TodayOutline: Qe
}, Rt = document.createElement("template");
Rt.innerHTML = `
<style>
    :host {
        position: relative;
        display: flex;
        flex-direction: row;
        width: 100%;
        padding: calc(var(--spacing) / 4) calc(var(--spacing) / 2);
        border-radius: var(--radius);
    }

    :host > .text {
        display: flex;
        flex-direction: column;
        justify-content: center;
        min-width: fit-content;
        width: 100%;
        margin-right: var(--spacing);
    }

    :host > .input {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: fit-content;
        width: 100%;
    }
</style>

<span class="text">
    <slot name="primary"></slot>
    <slot name="secondary"></slot>
</span>

<span class="input">
    <slot name="input"></slot>
</span>
`;
var f, u, C, Q, F, E, je, $t, Ne, At, rt;
let es = (rt = class {
  /** @param {Label} root */
  constructor(e) {
    n(this, je);
    n(this, Ne);
    /** @type {Label} */
    n(this, f, void 0);
    /** @type {HTMLElement | null} */
    n(this, u, null);
    n(this, C, !1);
    n(this, Q, async () => !!s(this, u) && s(this, u).click());
    n(this, F, async (e) => e.stopPropagation());
    /** @type {() => void} */
    n(this, E, void 0);
    a(this, f, e);
  }
  enableRipple() {
    s(this, E) || (this.removeRipple = qe(s(this, f)), s(this, f).style.cursor = "pointer", d(this, je, $t).call(this));
  }
  disableRipple() {
    s(this, E) && s(this, E).call(this), d(this, Ne, At).call(this);
  }
}, f = new WeakMap(), u = new WeakMap(), C = new WeakMap(), Q = new WeakMap(), F = new WeakMap(), E = new WeakMap(), je = new WeakSet(), $t = function() {
  s(this, C) || (a(this, u, s(this, f).querySelector("input")), s(this, u) && (s(this, f).addEventListener("click", s(this, Q)), s(this, u).addEventListener("click", s(this, F))), a(this, C, !0));
}, Ne = new WeakSet(), At = function() {
  s(this, u) && (s(this, f).removeEventListener("click", s(this, Q)), s(this, u).removeEventListener("click", s(this, F))), a(this, C, !1);
}, rt);
const I = class I extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Rt.content.cloneNode(!0)), this.ui = new es(this);
  }
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "ripple":
        i !== null ? this.ui.enableRipple() : this.ui.disableRipple();
        break;
    }
  }
};
r(I, "register", () => customElements.define("ui-label", I)), r(I, "observedAttributes", ["ripple"]);
let pe = I;
const jt = document.createElement("template");
jt.innerHTML = `
<style>
    :host {
        font-size: 1.1em;
        font-weight: normal;
    }
</style>

<slot></slot>
`;
const Ie = class Ie extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(jt.content.cloneNode(!0));
  }
};
r(Ie, "register", () => customElements.define("ui-primary", Ie));
let ge = Ie;
const Nt = document.createElement("template");
Nt.innerHTML = `
<style>
    :host {
        font-size: 0.9em;
        font-weight: 300;
        font-style: italic;
    }
</style>

<slot></slot>
`;
const Ue = class Ue extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(Nt.content.cloneNode(!0));
  }
};
r(Ue, "register", () => customElements.define("ui-secondary", Ue));
let me = Ue;
var h, ze, It;
class ts {
  constructor() {
    n(this, ze);
    /** @type {MediaQueryList | null} */
    n(this, h, null);
    this.currentTheme = null, this.themes = {};
  }
  enableAutoMode() {
    if (this.removeMode(), s(this, h)) {
      this.mediaChangeHandler(s(this, h));
      return;
    }
    a(this, h, window.matchMedia("(prefers-color-scheme: dark)")), s(this, h).addEventListener("change", this.mediaChangeHandler), this.mediaChangeHandler(s(this, h));
  }
  disableAutoMode() {
    d(this, ze, It).call(this);
  }
  /**
   * @param {string} name
   * @param {string} href
   */
  addTheme(e, t) {
    this.themes[e] = t;
  }
  /**
   * @param {string} name
   */
  loadTheme(e) {
    var i;
    if (!this.themes[e])
      throw `theme "${e}" is missing in this.themes`;
    if (((i = this.currentTheme) == null ? void 0 : i.name) == e)
      return;
    {
      const l = document.getElementById("theme");
      l && (document.head.removeChild(l), this.currentTheme = null);
    }
    const t = document.createElement("link");
    t.id = "theme", t.rel = "stylesheet", t.href = this.themes[e], document.head.appendChild(t), this.currentTheme = { name: e, href: this.themes[e] };
  }
  /**
   * @param {MediaQueryListEvent | MediaQueryList} ev
   */
  mediaChangeHandler(e) {
    e.matches ? document.body.setAttribute("data-theme", "dark") : document.body.setAttribute("data-theme", "light");
  }
  /**
   * @param {HTMLElement} element
   */
  removeMode(e = document.body) {
    e.removeAttribute("data-theme");
  }
  /**
   * @param {string} mode
   * @param {HTMLElement} element
   */
  setMode(e, t = document.body) {
    switch (e) {
      case "dark":
        t.setAttribute("data-theme", e);
        break;
      case "light":
        t.setAttribute("data-theme", e);
        break;
    }
  }
}
h = new WeakMap(), ze = new WeakSet(), It = function() {
  s(this, h) && (s(this, h).removeEventListener("change", this.mediaChangeHandler), a(this, h, null));
};
const U = class U extends HTMLElement {
  constructor() {
    super(), this.ui = new ts();
  }
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "auto":
        i !== null ? this.ui.enableAutoMode() : this.ui.disableAutoMode();
        break;
      case "mode":
        i !== null ? this.ui.setMode(i) : this.ui.removeMode();
        break;
    }
  }
};
r(U, "register", () => customElements.define("ui-theme-handler", U)), r(U, "observedAttributes", ["auto", "mode"]);
let fe = U;
const ss = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AppBar: _,
  Button: ee,
  Container: se,
  Dialog: ie,
  FlexGrid: ne,
  FlexGridItem: oe,
  FlexGridRow: re,
  IconButton: te,
  Label: pe,
  Lang: ae,
  LangType: ce,
  Primary: ge,
  Secondary: me,
  Select: le,
  SelectOption: z,
  StackLayout: de,
  StackLayoutPage: he,
  Store: ue,
  ThemeHandler: fe,
  svg: p
}, Symbol.toStringTag, { value: "Module" }));
async function is() {
  _.register(), te.register(), ee.register(), se.register(), oe.register(), re.register(), ne.register(), z.register(), le.register(), ce.register(), ae.register(), he.register(), de.register(), ue.register(), me.register(), ge.register(), pe.register(), fe.register(), ie.register();
}
async function os() {
  p.BackArrowNavigation.register(), p.ChevronDown.register(), p.Close.register(), p.DeleteRecycleBin.register(), p.Edit2.register(), p.PDFDocument.register(), p.Settings.register(), p.TodayOutline.register();
}
const vs = {
  ...Wt,
  wc: ss,
  define: is,
  defineSVG: os
};
export {
  vs as default
};
