var Ce = Object.defineProperty;
var xe = (r, e, i) => e in r ? Ce(r, e, { enumerable: !0, configurable: !0, writable: !0, value: i }) : r[e] = i;
var n = (r, e, i) => (xe(r, typeof e != "symbol" ? e + "" : e, i), i), zt = (r, e, i) => {
  if (!e.has(r))
    throw TypeError("Cannot " + i);
};
var o = (r, e, i) => (zt(r, e, "read from private field"), i ? i.call(r) : e.get(r)), h = (r, e, i) => {
  if (e.has(r))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(r) : e.set(r, i);
}, u = (r, e, i, s) => (zt(r, e, "write to private field"), s ? s.call(r, i) : e.set(r, i), i);
const jt = {
  onDragStart: null,
  onDragging: null,
  onDragEnd: null
};
function Le(r, e = {}) {
  e = {
    ...jt,
    ...e
  };
  const i = () => {
    const p = [...r.parentNode.children].indexOf(r);
    r.draggable = !0, r.ondragstart = (g) => {
      g.dataTransfer.effectAllowed = "move", g.dataTransfer.dropEffect = "move", g.dataTransfer.setData(
        "text/plain",
        p.toString()
      ), e.onDragStart && e.onDragStart(p);
    }, r.ondragover = (g) => (g.preventDefault(), !1), r.ondragenter = (g) => {
      g.preventDefault(), e.onDragging && e.onDragging(p);
    }, r.ondrop = (g) => {
      g.preventDefault(), g.dataTransfer.dropEffect = "move";
      const ke = parseInt(
        g.dataTransfer.getData("text/plain"),
        10
      );
      e.onDragEnd && e.onDragEnd(ke, p);
    };
  }, s = () => {
    r.draggable = !1, r.ondragstart = null, r.ondragover = null, r.ondragenter = null, r.ondrop = null;
  };
  return i(), {
    /**
     * @param {DraggableOptions} _options
     */
    update(a) {
      e = {
        ...jt,
        ...a
      }, s(), i();
    },
    destroy: s
  };
}
var m;
class v {
  constructor() {
    /**
     * @type {any}
     */
    h(this, m, {});
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  on(e, i) {
    if (typeof i != "function")
      throw `invalid event listener passed for "${e.toString()}" event!`;
    return o(this, m)[e] || (o(this, m)[e] = []), o(this, m)[e].push(i), () => {
      this.off(e, i);
    };
  }
  // }}}
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>)} listener
   */
  off(e, i) {
    if (!o(this, m)[e])
      throw `no listeners found for ${e.toString()}, there is nothing to delete`;
    let s = !1, a = 0;
    for (const p of o(this, m)[e])
      p === i && (o(this, m)[e].splice(a, 1), s = !0), a++;
    if (!s)
      throw `listener not found for ${e.toString()}, there is nothing to delete`;
    return this;
  }
  // }}}
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   */
  dispatch(e, i) {
    if (i === void 0)
      throw "data is undefined!";
    if (o(this, m)[e])
      for (const s of o(this, m)[e])
        s(i);
    return this;
  }
  // }}}
}
m = new WeakMap();
function qt(r, e) {
  const i = document.createElement("div");
  i.classList.add("ripple"), i.style.position = "absolute", i.style.color = "inherit", i.style.borderRadius = "50%", i.style.pointerEvents = "none", i.style.width = "100px", i.style.height = "100px", i.style.marginTop = "-50px", i.style.marginLeft = "-50px", i.style.opacity = `${e.opacity}`, i.style.backgroundColor = e.color, i.style.transform = "scale(0) translate(0, 0)", i.style.transition = `transform ${e.spreadDuration} ${e.spreadTiming} 0s,opacity ${e.clearDuration} ${e.clearTiming} 0s`, r.currentTarget.appendChild(i);
  const s = r.currentTarget.getBoundingClientRect();
  e.centered ? (i.style.top = `${s.height / 2}px`, i.style.left = `${s.width / 2}px`) : (i.style.top = `${r.clientY - s.top}px`, i.style.left = `${r.clientX - s.left}px`);
  const a = Math.max(s.width, s.height) * 0.02;
  return i.style.transform = `scale(${a}) translate(0, 0)`, i;
}
function Nt(r) {
  r && (r.addEventListener("transitionend", (e) => {
    e.propertyName === "opacity" && r.remove();
  }), r.style.opacity = "0");
}
const ye = {
  color: "var(--ui-ripple-color, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  useClick: !1
};
function Lt(r, e = {}) {
  e = { ...ye, ...e };
  let i;
  const s = (p) => {
    i = qt(p, e);
  }, a = () => {
    Nt(i);
  };
  return r.classList.add("ripple-container"), r.style.overflow = "hidden", e.useClick === !0 ? r.addEventListener("click", (p) => {
    i = qt(p, e), Nt(i);
  }) : (r.addEventListener("pointerdown", s), r.addEventListener("pointerup", a), r.addEventListener("pointerleave", a)), () => {
    r.classList.remove("ripple-container"), r.removeEventListener("pointerdown", s), r.removeEventListener("pointerup", a), r.removeEventListener("pointerleave", a);
  };
}
function Ee() {
  return /(android)/i.test(navigator.userAgent);
}
const l = String.raw, Me = String.raw;
class c {
  constructor() {
    this.callbacks = [];
  }
  /**
   * @param {(() => void|Promise<void>)} cb
   */
  add(e) {
    this.callbacks.push(e);
  }
  run() {
    for (let e = 0; e < this.callbacks.length; e++)
      if (this.callbacks[e] !== null)
        try {
          this.callbacks[e](), this.callbacks[e] = null;
        } catch (i) {
          console.error("cleanup error:", i);
        }
    this.callbacks = this.callbacks.filter((e) => e !== null);
  }
}
const bi = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CleanUp: c,
  Events: v,
  createDraggable: Le,
  createRipple: Lt,
  css: Me,
  defaultRippleOptions: ye,
  html: l,
  isAndroid: Ee
}, Symbol.toStringTag, { value: "Module" })), Et = "1", Te = l`
    <style></style>
    <slot></slot>
`, S = class S extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Te, this.cleanup = new c(), this.ui = {
      root: this,
      getFlex() {
        return this.root.hasAttribute("flex") ? this.root.getAttribute("flex") : Et;
      },
      /**
       * @param {string | null} value
       */
      setFlex(e) {
        e === null ? this.root.removeAttribute("flex") : this.root.setAttribute("flex", e);
      }
    }, this.updateStyle();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "flex":
        this.updateStyle({ flex: s || Et });
        break;
    }
  }
  /**
   * @private
   * @param {Object} attributes
   * @param {string} [attributes.flex]
   */
  updateStyle({ flex: e = Et } = {}) {
    this.shadowRoot.querySelector("style").textContent = `
            :host {
                flex: ${e};
            }
        `;
  }
};
n(S, "register", () => {
  customElements.get("ui-flex-grid-item") || customElements.define("ui-flex-grid-item", S);
}), n(S, "observedAttributes", ["flex"]);
let Pt = S;
const Mt = "0", He = `
    <style></style>
    <slot></slot>
`, $ = class $ extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = He, this.cleanup = new c(), this.ui = {
      root: this,
      getGap() {
        return this.root.getAttribute("gap") || Mt;
      },
      /**
       * @param {string | null} value
       */
      setGap(e) {
        e === null ? this.root.removeAttribute("gap") : this.root.setAttribute("gap", e);
      }
    }, this.updateStyle();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "gap":
        this.updateStyle({ gap: s || Mt });
        break;
    }
  }
  /**
   * @private
   * @param {Object} attributes
   * @param {string} [attributes.gap]
   */
  updateStyle({ gap: e = Mt } = {}) {
    this.shadowRoot.querySelector("style").textContent = `
            :host {
                display: flex !important;
                flex-flow: row nowrap;
                position: relative !important;
                width: 100%;
            }

            :host > ::slotted(*) {
                margin: 0 ${e} !important;
            }

            :host > ::slotted(*:first-child) {
                margin-left: 0 !important;
            }

            :host > ::slotted(*:last-child) {
                margin-right: 0 !important;
            }
        `;
  }
};
n($, "register", () => {
  customElements.get("ui-flex-grid-row") || customElements.define("ui-flex-grid-row", $);
}), n($, "observedAttributes", ["gap"]);
let K = $;
const Tt = "0", Ae = `
    <style></style>
    <slot></slot>
`, z = class z extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ae, this.cleanup = new c(), this.ui = {
      /** @private */
      root: this,
      getGap() {
        return this.root.getAttribute("gap") || Tt;
      },
      /**
       * @param {string | null} value
       */
      setGap(e) {
        e === null ? this.root.removeAttribute("gap") : this.root.setAttribute("gap", e);
      }
    }, this.updateStyle();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "gap":
        this.updateStyle({ gap: s || Tt });
        break;
    }
  }
  /**
   * @private
   * @param {Object} attributes
   * @param {string} [attributes.gap]
   */
  updateStyle({ gap: e = Tt } = {}) {
    this.shadowRoot.querySelector("style").textContent = `
            :host {
                display: flex !important;
                flex-flow: column nowrap;
                position: relative !important;
                width: 100%;
                height: fit-content;
            }

            :host > ::slotted(*) {
                margin: ${e} 0 !important;
            }

            :host > ::slotted(*:first-child) {
                margin-top: 0 !important;
            }

            :host > ::slotted(*:last-child) {
                margin-bottom: 0 !important;
            }
        `;
  }
};
n(z, "register", () => {
  customElements.get("ui-flex-grid") || customElements.define("ui-flex-grid", z);
}), n(z, "observedAttributes", ["gap"]);
let Ot = z;
const Re = l`
    <style>
        * { box-sizing: border-box; }

        :host {
            display: flex !important;
            position: absolute !important;
            z-index: 100;
            background-color: var(--ui-backdrop-bgColor);
            backdrop-filter: var(--ui-backdropFilter);
            overflow: hidden;
            user-select: none;
        }

        :host([position="top"]) {
            top: 0;
            left: 0;
            right: 0;
            height: var(--ui-app-bar-height);
            border-bottom: 1px solid var(--ui-borderColor);
        }

        :host > ui-flex-grid-row {
            width: 100%;
            height: 100%;
            align-items: center;
            justify-content: space-between;
        }

        :host > ui-flex-grid-row > * {
            height: 100%;
        }

        :host > ui-flex-grid-row > *:nth-child(1),
        :host > ui-flex-grid-row > *:nth-child(3) {
            width: fit-content;
        }

        :host > ui-flex-grid-row > [slot="left"] {
            margin-left: 0 !important;
        }

        :host > ui-flex-grid-row > [slot="center"] {
            width: 100%;
        }

        :host > ui-flex-grid-row > [slot="right"] {
            margin-right: 0 !important;
            justify-content: flex-end;
        }
    </style>

    <ui-flex-grid-row gap="0.25rem">
        <ui-flex-grid-row gap="0.25rem">
            <slot name="left"></slot>
        </ui-flex-grid-row>

        <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
            <slot name="center"></slot>
        </ui-flex-grid-row>

        <ui-flex-grid-row gap="0.25rem">
            <slot name="right"></slot>
        </ui-flex-grid-row>
    </ui-flex-grid-row>
`, I = class I extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Re, this.cleanup = new c(), this.ui = {
      getLeftSlot: () => [...this.querySelectorAll('[slot="left"]')],
      getCenterSlot: () => [...this.querySelectorAll('[slot="center"]')],
      getRightSlot: () => [...this.querySelectorAll('[slot="right"]')]
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(I, "register", () => {
  K.register(), customElements.get("ui-app-bar") || customElements.define("ui-app-bar", I);
});
let Zt = I;
const Se = l`
    <style>
        * { box-sizing: border-box; }

        :host {
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 1;
        }
    </style>

    <slot></slot>
`, U = class U extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Se, this.cleanup = new c(), this.ui = {
      enable: () => {
        this.style.display = "flex";
      },
      disable: () => {
        this.style.display = "none";
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @returns {T}
   */
  get item() {
    return this.querySelector("*");
  }
};
n(U, "register", () => {
  customElements.get("ui-app-bar-item") || customElements.define("ui-app-bar-item", U);
});
let Ft = U;
const $e = l`
    <style>
        * { box-sizing: border-box; }

        :host {
            display: flex !important;
            align-items: center;
            justify-content: center;
            position: relative !important;
            padding: var(--ui-spacing) calc(var(--ui-spacing) * 2.5);
            border: 1px solid currentColor;
            border-radius: var(--ui-radius);
            overflow: hidden;
            text-transform: capitalize;
            cursor: pointer;
            outline: none;
            user-select: none;
            font-size: 1.1rem;
            font-weight: 450;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-button-fontVariation);
        }

        :host([variant="full"]) {
            border: none;
        }

        :host([variant="full"][color="primary"]) {
            background-color: var(--ui-primary-bgColor);
            color: var(--ui-primary-color);
        }

        :host([variant="full"][color="secondary"]) {
            background-color: var(--ui-secondary-bgColor);
            color: var(--ui-secondary-color);
        }

        :host([variant="full"][color="destructive"]) {
            background-color: var(--ui-destructive-bgColor);
            color: var(--ui-destructive-color);
        }

        :host([variant="outline"]) {
            border-color: currentColor;
            background-color: transparent;
        }

        :host([variant="outline"][color="primary"]) {
            color: var(--ui-primary-bgColor);
        }

        :host([variant="outline"][color="secondary"]) {
            color: var(--ui-secondary-bgColor);
        }

        :host([variant="outline"][color="destructive"]) {
            color: var(--ui-destructive-bgColor);
        }

        :host([variant="ghost"]) {
            border-color: transparent;
            background-color: transparent;
            font-weight: 900;
        }

        :host([variant="ghost"][color="primary"]) {
            color: var(--ui-primary-bgColor);
        }

        :host([variant="ghost"][color="secondary"]) {
            color: var(--ui-secondary-bgColor);
        }

        :host([variant="ghost"][color="destructive"]) {
            color: var(--ui-destructive-bgColor);
        }

        :host([disabled]),
        :host([disabled]:hover),
        :host([disabled]:active) {
            background-color: transparent;
            opacity: 0.25;
            cursor: default;
            pointer-events: none;
        }
    </style>

    <slot></slot>
`, j = class j extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = $e, this.setAttribute("role", "button"), this.cleanup = new c(), this.ui = {
      /**
       * @type {Events<UIButtonEvents>}
       */
      events: new v(),
      /**
       * @private
       * @type {(() => void) | null}
       */
      removeRipple: null,
      /**
       * @returns {UIButtonColor}
       */
      getColor: () => this.getAttribute("color"),
      /**
       * @param {UIButtonColor} value
       */
      setColor: (e) => {
        this.setAttribute("color", e);
      },
      /**
       * @returns {UIButtonVariant}
       */
      getVariant: () => this.getAttribute("variant"),
      /**
       * @param {UIButtonVariant} value
       */
      setVariant: (e) => {
        this.setAttribute("variant", e);
      },
      disable: () => {
        this.setAttribute("disabled", "");
      },
      enable: () => {
        this.removeAttribute("disabled");
      },
      enableRipple: () => {
        this.ui.removeRipple || (this.ui.removeRipple = Lt(this, { centered: !0 }), this.removeAttribute("no-ripple"));
      },
      disableRipple: () => {
        this.ui.removeRipple && (this.ui.removeRipple(), this.ui.removeRipple = null, this.setAttribute("no-ripple", ""));
      }
    };
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple(), this.bindClickEvent();
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "no-ripple":
        s !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
      case "color":
        s !== null && (["primary", "secondary", "destructive"].includes(s) ? this.style.color = null : this.style.color = s);
        break;
    }
  }
  /**
   * @private
   */
  bindClickEvent() {
    const e = async () => {
      this.ui.events.dispatch("click", this);
    };
    this.addEventListener("click", e), this.cleanup.add(() => {
      this.removeEventListener("click", e);
    });
  }
};
n(j, "register", () => {
  customElements.get("ui-button") || customElements.define("ui-button", j);
}), n(j, "observedAttributes", ["no-ripple", "color"]);
let Vt = j;
const ze = l`
    <style>
        * { box-sizing: border-box; }

        :host {
            display: flex !important;
            align-items: center;
            justify-content: center;
            position: relative;
            width: 2rem;
            height: 2rem;
            padding: calc(var(--ui-spacing) / 2);
            border: 1px solid currentColor;
            border-radius: var(--ui-radius);
            outline: none;
            overflow: hidden;
            cursor: pointer;
            user-select: none;
            font-size: 1.1rem;
            font-weight: 450;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-button-fontVariation);
        }

        :host([ghost]) {
            border-color: transparent !important;
            box-shadow: none;
            font-weight: 900;
        }

        :host([color="primary"]) {
            color: var(--ui-primary-bgColor);
            border-color: var(--ui-primary-bgColor);
        }

        :host([color="secondary"]) {
            color: var(--ui-secondary-bgColor);
            border-color: var(--ui-secondary-bgColor);
        }

        :host([color="destructive"]) {
            color: var(--ui-destructive-bgColor);
            border-color: var(--ui-destructive-bgColor);
        }

        /* :disabled */

        :host([disabled]),
        :host([disabled]:hover),
        :host([disabled]:active) {
            opacity: 0.25;
            cursor: default;
            pointer-events: none;
        }
    </style>

    <slot></slot>
`, q = class q extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = ze, this.setAttribute("role", "button"), this.cleanup = new c(), this.ui = {
      /**
       * @type {Events<UIIconButtonEvents>}
       */
      events: new v(),
      /**
       * @private
       * @type {(() => void) | null}
       */
      removeRipple: null,
      /**
       * @returns {UIIconButtonColor}
       */
      getColor: () => this.getAttribute("color"),
      /**
       * @param {UIIconButtonColor} value
       */
      setColor: (e) => {
        this.setAttribute("color", e);
      },
      /**
       * @returns {boolean}
       */
      getGhost: () => this.hasAttribute("ghost"),
      /**
       * @param {boolean} state
       */
      setGhost: (e) => {
        e ? this.setAttribute("ghost", "") : this.removeAttribute("ghost");
      },
      disable: () => {
        this.setAttribute("disabled", "");
      },
      enable: () => {
        this.removeAttribute("disabled");
      },
      enableRipple: () => {
        this.ui.removeRipple || (this.ui.removeRipple = Lt(this, { centered: !0 }), this.removeAttribute("no-ripple"));
      },
      disableRipple: () => {
        this.ui.removeRipple && (this.ui.removeRipple(), this.ui.removeRipple = null, this.setAttribute("no-ripple", ""));
      }
    };
  }
  connectedCallback() {
    !this.hasAttribute("no-ripple") && !this.ui.removeRipple && this.ui.enableRipple(), this.bindClickEvent();
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "no-ripple":
        s !== null ? this.ui.disableRipple() : this.ui.enableRipple();
        break;
      case "color":
        s !== null && (["primary", "secondary", "destructive"].includes(s) ? this.style.color = null : this.style.color = s);
        break;
    }
  }
  /**
   * @private
   */
  bindClickEvent() {
    const e = async () => {
      this.ui.events.dispatch("click", this);
    };
    this.addEventListener("click", e), this.cleanup.add(() => {
      this.removeEventListener("click", e);
    });
  }
};
n(q, "register", () => {
  customElements.get("ui-icon-button") || customElements.define("ui-icon-button", q);
}), n(q, "observedAttributes", ["no-ripple", "color"]);
let Q = q;
const je = l`
<style>
    * { box-sizing: border-box; }

    :host {
        display: block;
        width: 100%;
        max-width: 65rem;
        margin: 0 auto !important;
        padding: var(--ui-spacing);
    }
</style>

<slot></slot>
`, _ = class _ extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = je, this.cleanup = new c(), this.ui = {};
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(_, "register", () => {
  customElements.get("ui-container") || customElements.define("ui-container", _);
});
let Dt = _;
const qe = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
>

    <g id="Complete">
        <g data-name="add" id="add">
            <g>
                <line
                    fill="none"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2" x1="12" x2="12" y1="19" y2="5"
                />

                <line
                    fill="none"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2" x1="5" x2="19" y1="12" y2="12"
                />
            </g>
        </g>
    </g>
</svg>
`, tt = class tt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = qe;
  }
};
n(tt, "register", () => {
  customElements.get("svg-add") || customElements.define("svg-add", tt);
});
let Bt = tt;
const Ne = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 52 52"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M50,24H6.83L27.41,3.41a2,2,0,0,0,0-2.82,2,2,0,0,0-2.82,0l-24,24a1.79,1.79,0,0,0-.25.31A1.19,1.19,0,0,0,.25,25c0,.07-.07.13-.1.2l-.06.2a.84.84,0,0,0,0,.17,2,2,0,0,0,0,.78.84.84,0,0,0,0,.17l.06.2c0,.07.07.13.1.2a1.19,1.19,0,0,0,.09.15,1.79,1.79,0,0,0,.25.31l24,24a2,2,0,1,0,2.82-2.82L6.83,28H50a2,2,0,0,0,0-4Z"
    />
</svg>
`, et = class et extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ne;
  }
};
n(et, "register", () => {
  customElements.get("svg-back-arrow") || customElements.define("svg-back-arrow", et);
});
let Jt = et;
const Pe = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect width="24" height="24" fill="none" />
    <path
        d="M17 9.5L12 14.5L7 9.5"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>
`, it = class it extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Pe;
  }
};
n(it, "register", () => {
  customElements.get("svg-chevron-down") || customElements.define("svg-chevron-down", it);
});
let Ht = it;
const Oe = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <g clip-path="url(#clip0_429_11083)">
        <path
            d="M7 7.00006L17 17.0001M7 17.0001L17 7.00006"
            stroke="currentColor"
            stroke-width="2.5"
            stroke-linecap="round"
            stroke-linejoin="round"
        />
    </g>
    <defs>
        <clipPath id="clip0_429_11083">
            <rect width="24" height="24" fill="none" />
        </clipPath>
    </defs>
</svg>
`, st = class st extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Oe;
  }
};
n(st, "register", () => {
  customElements.get("svg-close") || customElements.define("svg-close", st);
});
let At = st;
const Ze = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M12 3V16M12 16L16 11.625M12 16L8 11.625"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />

    <path
        d="M15 21H9C6.17157 21 4.75736 21 3.87868 20.1213C3 19.2426 3 17.8284 3 15M21 15C21 17.8284 21 19.2426 20.1213 20.1213C19.8215 20.4211 19.4594 20.6186 19 20.7487"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>
`, ot = class ot extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ze;
  }
};
n(ot, "register", () => {
  customElements.get("svg-download") || customElements.define("svg-download", ot);
});
let Yt = ot;
const Fe = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M20.1497 7.93997L8.27971 19.81C7.21971 20.88 4.04971 21.3699 3.27971 20.6599C2.50971 19.9499 3.06969 16.78 4.12969 15.71L15.9997 3.84C16.5478 3.31801 17.2783 3.03097 18.0351 3.04019C18.7919 3.04942 19.5151 3.35418 20.0503 3.88938C20.5855 4.42457 20.8903 5.14781 20.8995 5.90463C20.9088 6.66146 20.6217 7.39189 20.0997 7.93997H20.1497Z"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
    <path
        d="M21 21H12"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>;
`, rt = class rt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Fe;
  }
};
n(rt, "register", () => {
  customElements.get("svg-edit") || customElements.define("svg-edit", rt);
});
let Xt = rt;
const Ve = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g fill="currentColor" transform="translate(85.333333, 42.666667)">
            <path
                d="M75.9466667,285.653333 C63.8764997,278.292415 49.6246897,275.351565 35.6266667,277.333333 L1.42108547e-14,277.333333 L1.42108547e-14,405.333333 L28.3733333,405.333333 L28.3733333,356.48 L40.5333333,356.48 C53.1304778,357.774244 65.7885986,354.68506 76.3733333,347.733333 C85.3576891,340.027178 90.3112817,328.626053 89.8133333,316.8 C90.4784904,304.790173 85.3164923,293.195531 75.9466667,285.653333 L75.9466667,285.653333 Z M53.12,332.373333 C47.7608867,334.732281 41.8687051,335.616108 36.0533333,334.933333 L27.7333333,334.933333 L27.7333333,298.666667 L36.0533333,298.666667 C42.094796,298.02451 48.1897668,299.213772 53.5466667,302.08 C58.5355805,305.554646 61.3626692,311.370371 61.0133333,317.44 C61.6596233,323.558965 58.5400493,329.460862 53.12,332.373333 L53.12,332.373333 Z M150.826667,277.333333 L115.413333,277.333333 L115.413333,405.333333 L149.333333,405.333333 C166.620091,407.02483 184.027709,403.691457 199.466667,395.733333 C216.454713,383.072462 225.530463,362.408923 223.36,341.333333 C224.631644,323.277677 218.198313,305.527884 205.653333,292.48 C190.157107,280.265923 170.395302,274.806436 150.826667,277.333333 L150.826667,277.333333 Z M178.986667,376.32 C170.098963,381.315719 159.922142,383.54422 149.76,382.72 L144.213333,382.72 L144.213333,299.946667 L149.333333,299.946667 C167.253333,299.946667 174.293333,301.653333 181.333333,308.053333 C189.877212,316.948755 194.28973,329.025119 193.493333,341.333333 C194.590843,354.653818 189.18793,367.684372 178.986667,376.32 L178.986667,376.32 Z M254.506667,405.333333 L283.306667,405.333333 L283.306667,351.786667 L341.333333,351.786667 L341.333333,329.173333 L283.306667,329.173333 L283.306667,299.946667 L341.333333,299.946667 L341.333333,277.333333 L254.506667,277.333333 L254.506667,405.333333 L254.506667,405.333333 Z M234.666667,7.10542736e-15 L9.52127266e-13,7.10542736e-15 L9.52127266e-13,234.666667 L42.6666667,234.666667 L42.6666667,192 L42.6666667,169.6 L42.6666667,42.6666667 L216.96,42.6666667 L298.666667,124.373333 L298.666667,169.6 L298.666667,192 L298.666667,234.666667 L341.333333,234.666667 L341.333333,106.666667 L234.666667,7.10542736e-15 L234.666667,7.10542736e-15 Z"
            ></path>
        </g>
    </g></svg
>
`, nt = class nt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ve;
  }
};
n(nt, "register", () => {
  customElements.get("svg-pdf") || customElements.define("svg-pdf", nt);
});
let Kt = nt;
const De = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 1024 1024"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M960 160h-291.2a160 160 0 0 0-313.6 0H64a32 32 0 0 0 0 64h896a32 32 0 0 0 0-64zM512 96a96 96 0 0 1 90.24 64h-180.48A96 96 0 0 1 512 96zM844.16 290.56a32 32 0 0 0-34.88 6.72A32 32 0 0 0 800 320a32 32 0 1 0 64 0 33.6 33.6 0 0 0-9.28-22.72 32 32 0 0 0-10.56-6.72zM832 416a32 32 0 0 0-32 32v96a32 32 0 0 0 64 0v-96a32 32 0 0 0-32-32zM832 640a32 32 0 0 0-32 32v224a32 32 0 0 1-32 32H256a32 32 0 0 1-32-32V320a32 32 0 0 0-64 0v576a96 96 0 0 0 96 96h512a96 96 0 0 0 96-96v-224a32 32 0 0 0-32-32z"
        fill="currentColor"
    />
    <path
        d="M384 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM544 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0zM704 768V352a32 32 0 0 0-64 0v416a32 32 0 0 0 64 0z"
        fill="currentColor"
    />
</svg>
`, at = class at extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = De;
  }
};
n(at, "register", () => {
  customElements.get("svg-recycle") || customElements.define("svg-recycle", at);
});
let Qt = at;
const Be = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M11 6C13.7614 6 16 8.23858 16 11M16.6588 16.6549L21 21M19 11C19 15.4183 15.4183 19 11 19C6.58172 19 3 15.4183 3 11C3 6.58172 6.58172 3 11 3C15.4183 3 19 6.58172 19 11Z"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>
`, lt = class lt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Be;
  }
};
n(lt, "register", () => {
  customElements.get("svg-search") || customElements.define("svg-search", lt);
});
let Rt = lt;
const Je = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 -0.5 21 21"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
>
    <defs></defs>
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g transform="translate(-259.000000, -840.000000)" fill="currentColor">
            <g transform="translate(56.000000, 160.000000)">
                <path
                    d="M211.261065,690.694762 C209.623062,692.25443 206.966811,692.25443 205.328807,690.694762 L203.614251,689.062203 C202.79525,688.282368 202.79525,687.018258 203.614251,686.238424 C204.433253,685.45859 205.761903,685.45859 206.580905,686.238424 C207.721845,687.3248 208.972894,687.224949 209.777214,686.458096 C210.587827,685.686249 210.685352,684.498026 209.541266,683.409653 C208.722264,682.629819 208.722264,681.36471 209.541266,680.584876 C210.361317,679.805041 211.688918,679.805041 212.50792,680.584876 L214.22667,682.221429 C215.864674,683.781098 215.864674,686.310317 214.22667,687.869985 L223.356286,696.563988 C225.318325,698.431197 222.350623,701.253977 220.390682,699.387767 L211.261065,690.694762 Z"
                ></path>
            </g>
        </g>
    </g>
</svg>
`, ct = class ct extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Je;
  }
};
n(ct, "register", () => {
  customElements.get("svg-settings") || customElements.define("svg-settings", ct);
});
let Wt = ct;
const Ye = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        d="M4 6H20M4 12H20M4 18H20"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
    />
</svg>
`, ht = class ht extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ye;
  }
};
n(ht, "register", () => {
  customElements.get("svg-menu") || customElements.define("svg-menu", ht);
});
let Gt = ht;
const Xe = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
>
    <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M15 6.75C15 5.50736 16.0074 4.5 17.25 4.5C18.4926 4.5 19.5 5.50736 19.5 6.75C19.5 7.99264 18.4926 9 17.25 9C16.0074 9 15 7.99264 15 6.75ZM17.25 3C15.1789 3 13.5 4.67893 13.5 6.75C13.5 7.00234 13.5249 7.24885 13.5724 7.48722L9.77578 9.78436C9.09337 8.85401 7.99222 8.25 6.75 8.25C4.67893 8.25 3 9.92893 3 12C3 14.0711 4.67893 15.75 6.75 15.75C8.10023 15.75 9.28379 15.0364 9.9441 13.9657L13.5866 16.4451C13.5299 16.7044 13.5 16.9737 13.5 17.25C13.5 19.3211 15.1789 21 17.25 21C19.3211 21 21 19.3211 21 17.25C21 15.1789 19.3211 13.5 17.25 13.5C15.9988 13.5 14.8907 14.1128 14.2095 15.0546L10.4661 12.5065C10.4884 12.3409 10.5 12.1718 10.5 12C10.5 11.7101 10.4671 11.4279 10.4049 11.1569L14.1647 8.88209C14.8415 9.85967 15.971 10.5 17.25 10.5C19.3211 10.5 21 8.82107 21 6.75C21 4.67893 19.3211 3 17.25 3ZM15 17.25C15 16.0074 16.0074 15 17.25 15C18.4926 15 19.5 16.0074 19.5 17.25C19.5 18.4926 18.4926 19.5 17.25 19.5C16.0074 19.5 15 18.4926 15 17.25ZM4.5 12C4.5 10.7574 5.50736 9.75 6.75 9.75C7.99264 9.75 9 10.7574 9 12C9 13.2426 7.99264 14.25 6.75 14.25C5.50736 14.25 4.5 13.2426 4.5 12Z"
        fill="currentColor"
    />
</svg>
`, ut = class ut extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Xe;
  }
};
n(ut, "register", () => {
  customElements.get("svg-share") || customElements.define("svg-share", ut);
});
let It = ut;
const Ke = l`
<style>
    :host {
        width: 100%;
        height: 100%;
        color: inherit;
    }
</style>

<svg
    width="100%"
    height="100%"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
>
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        x="48"
        y="80"
        width="416"
        height="384"
        rx="48"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="128"
        y1="48"
        x2="128"
        y2="80"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="384"
        y1="48"
        x2="384"
        y2="80"
    />
    <rect
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x="112"
        y="224"
        width="96"
        height="96"
        rx="13"
    />
    <line
        fill="none"
        stroke="currentColor"
        stroke-linejoin="round"
        stroke-width="32"
        stroke-linecap="round"
        x1="464"
        y1="160"
        x2="48"
        y2="160"
    />
</svg>
`, dt = class dt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ke;
  }
};
n(dt, "register", () => {
  customElements.get("svg-today") || customElements.define("svg-today", dt);
});
let Ut = dt;
const Qe = l`
    <style>
        * { box-sizing: border-box; }

        :host dialog * {
            box-sizing: border-box;
        }

        dialog {
            position: fixed !important;

            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);

            max-width: 100%;
            max-height: 100%;

            margin: 0;
            padding: 0;

            border: none;
            outline: none;

            background-color: transparent;

            -ms-overflow-style: none;
            scrollbar-width: none;

            z-index: 999;
        }

        dialog::-webkit-scrollbar {
            display: none;
        }

        dialog::backdrop {
            background-color: var(--ui-backdrop-bgColor);
            backdrop-filter: var(--ui-backdropFilter);
        }

        dialog > .container {
            background-color: var(--ui-bgColor);
            color: var(--ui-color);

            border: 1px solid var(--ui-borderColor);
            border-radius: var(--ui-radius);

            padding: var(--ui-spacing);

            display: flex;
            flex-direction: column;
            justify-content: space-between;

            position: relative;
        }

        :host([fullscreen]) dialog {
            width: 100%;
            height: 100%;
        }

        :host([fullscreen]) dialog > .container {
            width: calc(100% - var(--ui-spacing) * 2);
            height: calc(100% - (env(safe-area-inset-top, 0) + env(safe-area-inset-bottom, 0) + (var(--ui-spacing) * 2)));

            margin: var(--ui-spacing);
            margin-top: calc(env(safe-area-inset-top, 0) + var(--ui-spacing));
            margin-bottom: calc(env(safe-area-inset-bottom, 0) + var(--ui-spacing));
        }

        /*
        * Header Styles
        */
    
        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;

            border-top-right-radius: var(--ui-radius);
            border-top-left-radius: var(--ui-radius);

            width: 100%;
            height: var(--ui-dialog-header-height);
        }

        .header h4 {
            margin: auto 0;
        }

        :host([fullscreen]) .header {
            z-index: 15;
            position: absolute;
            top: var(--ui-spacing);
            right: var(--ui-spacing);
            left: var(--ui-spacing);
            width: calc(100% - var(--ui-spacing) * 2);
        }

        /*
        * Content Styles
        */

        .content {
            padding: var(--ui-spacing);
            height: fit-content;
            min-width: fit-content;
            width: 100%;
        }

        :host([fullscreen]) .content {
            z-index: 10;
            position: absolute;
            top: calc(var(--ui-dialog-header-height) + var(--ui-spacing));
            bottom: calc(var(--ui-dialog-footer-height) + var(--ui-spacing));
            right: var(--ui-spacing);
            left: var(--ui-spacing);
            padding: unset;
            height: unset;
            width: unset;
            min-width: unset;
        }

        /*
        * Footer Styles
        */

        .footer {
            margin-top: var(--ui-spacing);
            border-bottom-right-radius: var(--ui-radius);
            border-bottom-left-radius: var(--ui-radius);

            width: 100%;
            height: var(--ui-dialog-footer-height);
        }

        :host([fullscreen]) .footer {
            z-index: 15;
            position: absolute;
            right: var(--ui-spacing);
            bottom: var(--ui-spacing);
            left: var(--ui-spacing);
            width: calc(100% - var(--ui-spacing) * 2);
        }

        .footer ui-flex-grid-row {
            height: 100%;
            flex-wrap: nowrap;
            justify-content: flex-end;
            align-items: center;
        }
    </style>

    <dialog>
        <div class="container">
            <div class="header">
                <span style="white-space: nowrap;"><slot name="title"></slot></span>

                <ui-icon-button style="width: var(--ui-dialog-header-height); height: 100%;" ghost>
                    <svg-close></svg-close>
                </ui-icon-button>
            </div>

            <div class="content">
                <slot></slot>
            </div>

            <div class="footer">
                <ui-flex-grid-row gap="calc(var(--ui-spacing) / 2)">
                    <slot name="actions"></slot>
                </ui-flex-grid-row>
            </div>
        </div>
    </dialog>
`, pt = class pt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Qe, this.cleanup = new c(), this.ui = {
      /** @type {Events<T>} */
      events: new v(),
      /**
       * @private
       * @type {HTMLElement}
       */
      h4: (() => {
        const e = document.createElement("h4");
        return e.slot = "title", this.appendChild(e), e;
      })(),
      /**
       * @private
       * @type {HTMLDialogElement}
       */
      dialog: this.shadowRoot.querySelector("dialog"),
      getFullscreen: () => this.hasAttribute("fullscreen"),
      /**
       * @param {boolean} state
       */
      setFullscreen: (e) => {
        e ? this.setAttribute("fullscreen", "") : this.removeAttribute("fullscreen");
      },
      getTitle: () => this.ui.h4.innerText,
      /**
       * @param {string} value
       */
      setTitle: (e) => {
        this.ui.h4.innerText = e;
      },
      getDialogElement: () => this.ui.dialog,
      open: (e = !1, i = !0) => {
        const s = this.ui.dialog.inert;
        this.ui.dialog.inert = i, e ? this.ui.dialog.showModal() : this.ui.dialog.show(), this.ui.events.dispatch("open", null), this.ui.dialog.inert = s;
      },
      close: () => {
        this.ui.dialog.close(), this.ui.events.dispatch("close", null);
      }
    };
  }
  connectedCallback() {
    const e = this.shadowRoot.querySelector(".header ui-icon-button"), i = () => {
      this.ui.close();
    };
    e.addEventListener("click", i);
    const s = this.shadowRoot.querySelector("dialog"), a = (p) => {
      p.preventDefault();
    };
    s.addEventListener("cancel", a), this.cleanup.add(() => {
      e.removeEventListener("click", i), s.removeEventListener("cancel", a);
    });
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(pt, "register", () => {
  Q.register(), At.register(), K.register(), customElements.get("ui-dialog") || customElements.define("ui-dialog", pt);
});
let _t = pt;
const te = 150, We = l`
    <style>
        * {
            box-sizing: border-box;
        }

        :host {
            display: block;

            position: absolute !important;
            z-index: ${te};
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;

            overflow: hidden;

            transition: left 0s ease 0.5s;
        }

        :host([open]) {
            background-color: var(--ui-backdrop-bgColor);
            backdrop-filter: var(--ui-backdropFilter);

            left: 0;

            transition: none;
        }

        aside {
            position: absolute;
            z-index: ${te};
            top: 0;
            left: -100%;
            width: 18em;
            max-width: 100%;
            height: 100%;

            overflow-x: hidden;
            overflow-y: auto;

            -ms-overflow-style: none;
            scrollbar-width: none;

            background-color: var(--ui-card-bgColor);
            color: var(--ui-card-color);
            border-right: 1px solid var(--ui-card-borderColor);
            /*
            background-color: var(--ui-backdrop-bgColor);
            backdrop-filter: var(--ui-backdropFilter);
            */

            transition: left 0.5s ease;
        }

        :host([open]) aside {
            left: 0;
        }
    </style>

    <aside>
        <slot></slot>
    </aside>
`, N = class N extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = We, this.cleanup = new c(), this.ui = {
      aside: this.shadowRoot.querySelector("aside"),
      /**
       * @type {Events<UIDrawerEvents>}
       */
      events: new v(),
      getOpen: () => this.hasAttribute("open"),
      /**
       * @param {boolean} state
       */
      setOpen: (e) => {
        e ? this.setAttribute("open", "") : this.removeAttribute("open");
      }
    };
  }
  connectedCallback() {
    const e = (s) => {
      s.stopPropagation(), this.ui.setOpen(!1);
    }, i = (s) => {
      s.stopPropagation();
    };
    this.addEventListener("click", e), this.ui.aside.addEventListener("click", i), this.cleanup.add(() => {
      this.ui.aside.removeEventListener("click", i), this.removeEventListener("click", e);
    });
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "open":
        s !== null ? (this.classList.add("open"), this.ui.events.dispatch("open", this)) : (this.classList.remove("open"), this.ui.events.dispatch("close", this));
        break;
    }
  }
};
n(N, "register", () => {
  customElements.get("ui-drawer") || customElements.define("ui-drawer", N);
}), n(N, "observedAttributes", ["open"]);
let ee = N;
const Ge = l`
<style>
    :host {
        font-size: 1.1rem;
        font-family: var(--ui-fontFamily);
        font-variation-settings: var(--ui-text-primary-fontVariation);
    }
</style>

<slot></slot>
`, gt = class gt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ge, this.cleanup = new c();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(gt, "register", () => {
  customElements.get("ui-primary") || customElements.define("ui-primary", gt);
});
let W = gt;
const Ie = l`
<style>
    :host {
        font-size: 0.9rem;
        font-family: var(--ui-fontFamily);
        font-variation-settings: var(--ui-text-secondary-fontVariation);
    }
</style>

<slot></slot>
`, mt = class mt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ie, this.cleanup = new c();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(mt, "register", () => {
  customElements.get("ui-secondary") || customElements.define("ui-secondary", mt);
});
let E = mt;
const Ue = l`
<style>
    * { box-sizing: border-box; }

    :host {
        position: relative !important;
        display: flex !important;
        flex-direction: row;
        width: 100%;
        padding: var(--ui-spacing);
        border-radius: var(--ui-radius);
    }

    :host > .text {
        display: flex;
        flex: 1;
        flex-direction: column;
        justify-content: center;
        margin-right: var(--ui-spacing);
    }

    :host > .input {
        display: flex;
        align-items: center;
        justify-content: flex-end;
    }
</style>

<span class="text">
    <ui-primary></ui-primary>
    <ui-secondary></ui-secondary>
</span>

<span class="input">
    <slot name="input"></slot>
    <slot></slot>
</span>
`;
var d, M, B, J, T, pe;
let _e = (pe = class {
  /** @param {UILabel} root */
  constructor(e) {
    /** @type {UILabel} */
    h(this, d, void 0);
    h(this, M, !1);
    h(this, B, async () => {
      [...o(this, d).querySelectorAll('[slot="input"]')].forEach((e) => e.click());
    });
    h(this, J, async (e) => {
      e.stopPropagation();
    });
    /** @type {() => void} */
    h(this, T, void 0);
    u(this, d, e);
  }
  get primary() {
    return o(this, d).getAttribute("primary");
  }
  set primary(e) {
    o(this, d).setAttribute("primary", e);
  }
  get secondary() {
    return o(this, d).getAttribute("secondary");
  }
  set secondary(e) {
    o(this, d).setAttribute("secondary", e);
  }
  getInputSlot() {
    return [...o(this, d).querySelectorAll('[slot="input"]')];
  }
  enableRipple() {
    o(this, T) || (this.removeRipple = Lt(o(this, d)), o(this, d).style.cursor = "pointer", this.startInputHandling());
  }
  disableRipple() {
    o(this, T) && o(this, T).call(this), this.stopInputHandling();
  }
  /**
   * @private
   */
  startInputHandling() {
    o(this, M) || (o(this, d).addEventListener("click", o(this, B)), this.getInputSlot().forEach((e) => {
      e.addEventListener("click", o(this, J));
    }), u(this, M, !0));
  }
  /**
   * @private
   */
  stopInputHandling() {
    o(this, d).removeEventListener("click", o(this, B)), [...o(this, d).querySelectorAll('[slot="input"]')].forEach((e) => {
      e.removeEventListener("click", o(this, J));
    }), u(this, M, !1);
  }
}, d = new WeakMap(), M = new WeakMap(), B = new WeakMap(), J = new WeakMap(), T = new WeakMap(), pe);
const P = class P extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = Ue, this.cleanup = new c(), this.ui = new _e(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
  * @param {string} name
  * @param {string | null} _oldValue
  * @param {string | null} newValue
  */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "ripple":
        s !== null ? this.ui.enableRipple() : this.ui.disableRipple();
        break;
      case "primary":
        this.shadowRoot.querySelector("ui-primary").innerHTML = s || "";
        break;
      case "secondary":
        this.shadowRoot.querySelector("ui-secondary").innerHTML = s || "";
        break;
    }
  }
};
n(P, "register", () => {
  W.register(), E.register(), customElements.get("ui-label") || customElements.define("ui-label", P);
}), n(P, "observedAttributes", ["ripple", "secondary", "primary"]);
let ie = P;
const ti = l`
    <style>
        * {
            box-sizing: border-box;
        }

        li {
            padding: var(--ui-spacing) calc(var(--ui-spacing) * 1.5);
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
        }

        ::slotted(*) {
            width: 100%;
        }
    </style>

    <li>
        <slot></slot>
    </li>
`, ft = class ft extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = ti, this.cleanup = new c(), this.ui = {
      /**
       * @returns {boolean}
       */
      getOpen() {
        return this.root.hasAttribute("open");
      },
      /**
       * @param {boolean} state
       */
      setOpen(e) {
        e ? this.root.setAttribute("open", "") : this.root.removeAttribute("open");
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(ft, "register", () => {
  customElements.get("ui-drawer-group-item") || customElements.define("ui-drawer-group-item", ft);
});
let St = ft;
const ei = l`
    <style>
        * {
            box-sizing: border-box;
        }

        ul {
            list-style: none;
            padding: var(--ui-spacing);
            overflow: hidden;
        }

        ui-drawer-group-item:not(.visible) {
            display: none;
        }
    </style>

    <ul>
        <ui-drawer-group-item class="ui-drawer-group-title">
        </ui-drawer-group-item>

        <slot></slot>
    </ul>
`, O = class O extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = ei, this.cleanup = new c(), this.ui = {
      getTitle: () => this.getAttribute("title") || null,
      /**
       * @param {string} value
       */
      setTitle: (e) => {
        let i = this.shadowRoot.querySelector(
          ".ui-drawer-group-title"
        );
        i.classList.add("visible"), i.innerHTML = `
                    <span
                        style="
                            font-size: 1.5rem;
                            font-weight: 600;
                            font-variation-settings: var(--ui-heading-fontVariation);
                        "
                    >
                        ${e}
                    </span>
                `;
      },
      removeTitle() {
        this.root.shadowRoot.querySelector(
          ".ui-drawer-group-title"
        ).classList.remove("visible");
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "title":
        s === "" ? this.removeAttribute("title") : s !== null ? this.ui.setTitle(s) : this.ui.removeTitle();
        break;
    }
  }
};
n(O, "register", () => {
  St.register(), W.register(), customElements.get("ui-drawer-group") || customElements.define("ui-drawer-group", O);
}), n(O, "observedAttributes", ["title"]);
let se = O;
const Z = class Z extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.appendChild(t.content.cloneNode(!0)), this.cleanup = new c(), this.ui = {
      root: this,
      input: (() => {
        const e = this.shadowRoot.querySelector("input");
        return e.type = this.getAttribute("type") || "text", e.oninput = () => this.ui.events.dispatch("input", this.ui.getValue()), e.onchange = () => this.ui.events.dispatch("change", this.ui.getValue()), e;
      })(),
      /**
       * @type {Events<E>}
       */
      events: new v(),
      /**
       * @param {string | null} v
       */
      setTitle(e) {
        let i = this.root.querySelector('[slot="title"]');
        e === null && i && (this.root.removeChild(i), i = null), i || (i = new E(), i.slot = "title", this.root.appendChild(i)), i.innerHTML = e || "";
      },
      getTitle() {
        var e;
        return ((e = this.root.querySelector('[slot="title"]')) == null ? void 0 : e.innerHTML) || null;
      },
      /**
       * @param {UIInputTypes} value
       */
      setType(e) {
        this.input.value = e;
      },
      /**
       * @returns {UIInputTypes}
       */
      getType() {
        return this.input.type || "text";
      },
      /**
       * @param {UIInputTypeValues[T]} value
       */
      setValue(e) {
        this.input.value = e.toString();
      },
      /**
       * @returns {UIInputTypeValues[T]}
       */
      getValue() {
        switch (this.input.type) {
          case "number":
            return this.input.value ? new Number(this.input.value) : NaN;
          default:
            return this.input.value;
        }
      },
      /**
       * @param {string | null} value
       */
      setPlaceholder(e) {
        this.input.placeholder = e || "";
      },
      /**
       * @returns {string}
       */
      getPlaceholder() {
        return this.input.placeholder;
      },
      /**
       * @param {boolean} state
       */
      setInvalid(e) {
        this.input.ariaInvalid = e ? "" : null;
      },
      /**
       * @returns {boolean}
       */
      getInvalid() {
        return this.input.ariaInvalid !== null;
      },
      /**
       * @param {UIInputTypeValues[T]} n
       */
      setMin(e) {
        this.input.min = e;
      },
      /**
       * @returns {UIInputTypeValues[T]}
       */
      getMin() {
        switch (this.input.type) {
          case "number":
            return this.input.min ? new Number(this.input.min) : NaN;
          default:
            return this.input.min;
        }
      },
      /**
       * @param {UIInputTypeValues[T]} n
       */
      setMax(e) {
        this.input.max = e;
      },
      /**
       * @returns {UIInputTypeValues[T]}
       */
      getMax() {
        switch (this.input.type) {
          case "number":
            return this.input.max ? new Number(this.input.max) : NaN;
          default:
            return this.input.max;
        }
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "title":
        this.ui.setTitle(s);
        break;
      case "type":
        s === null ? this.ui.setType("text") : this.ui.setType(s);
        break;
      case "value":
        this.ui.setValue(this.parseNewValue(s));
        break;
      case "placeholder":
        s === null ? this.ui.setPlaceholder(null) : this.ui.setPlaceholder(s);
        break;
      case "invalid":
        this.ui.setInvalid(s !== null);
        break;
      case "min":
        this.ui.setMin(this.parseNewValue(s));
        break;
      case "max":
        this.ui.setMax(this.parseNewValue(s));
        break;
    }
  }
  /**
   * @private
   * @param {string | null} value
   * @returns {UIInputTypeValues[T]}
   */
  parseNewValue(e) {
    switch (this.ui.getType()) {
      case "number":
        return e ? new Number(e) : NaN;
      default:
        return e || "";
    }
  }
};
n(Z, "register", () => {
  E.register(), customElements.get("ui-input") || customElements.define("ui-input", Z);
}), n(Z, "observedAttributes", [
  "title",
  "type",
  "value",
  "placeholder",
  "invalid",
  "min",
  "max"
]);
let oe = Z;
const ii = l`
<style>
    :host {
        display: none;
        align-items: center;

        padding: var(--ui-spacing);
        padding-right: 2rem;

        height: calc(1em * var(--ui-lineHeight) + var(--ui-spacing) * 2);

        white-space: nowrap;
        text-overflow: ellipsis;

        transition: background-color 0.25s linear, color 0.25s linear;

        overflow: hidden;
    }
</style>

<slot></slot>
`;
var w, ge;
let si = (ge = class {
  /** @param {UISelectOption} root */
  constructor(e) {
    /** @type {UISelectOption} */
    h(this, w, void 0);
    u(this, w, e);
  }
  get value() {
    return o(this, w).getAttribute("value");
  }
  set value(e) {
    o(this, w).setAttribute("value", e);
  }
  get selected() {
    return o(this, w).hasAttribute("selected");
  }
  set selected(e) {
    e ? o(this, w).setAttribute("selected", "") : o(this, w).removeAttribute("selected");
  }
}, w = new WeakMap(), ge);
const bt = class bt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = ii, this.setAttribute("role", "button"), this.ui = new si(this);
  }
};
n(bt, "register", () => {
  customElements.get("ui-select-option") || customElements.define("ui-select-option", bt);
});
let G = bt;
const oi = l`
<style>
    * { box-sizing: border-box; }

    :host {
        --ui-bgColor: "transparent";
        --items-length: 0;

        position: relative !important; 
        display: block !important;

        width: 100%;
        height: calc(1em * var(--ui-lineHeight) + var(--ui-spacing) * 2);
        transition: height 0.25s ease;

        background-color: var(--ui-bgColor);
        color: var(--ui-color);

        border: 1px solid var(--ui-borderColor);
        border-radius: var(--ui-radius);

        line-height: 1.15;

        overflow: hidden;

        font-size: 0.9rem;
        font-family: var(--ui-fontFamily);
        font-variation-settings: var(--ui-select-fontVariation);
    }

    .options {
        cursor: pointer;
        display: none;
        display: flex;
        flex-direction: column;
        min-height: 100%;
    }

    .icon {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 0;
        right: 0;
        width: 2.5rem;
        height: 100%;
        color: var(--ui-primary-bgColor);
    }

    ::slotted(ui-select-option) {
        display: flex;
    }

    :host(.open) {
        height: calc((1em * var(--ui-lineHeight) + var(--ui-spacing) * 2) * var(--items-length));
    }

    :host(.open) .options {
        display: block;
    }

    :host(.open) .icon {
        display: none;
    }

    :host(.open) ::slotted(ui-select-option[selected]) {
        background-color: var(--ui-primary-bgColor);
        color: var(--ui-primary-color);
    }

    :host(.open) ::slotted(ui-select-option:not([selected]):hover) {
        background-color: hsla(var(--ui-color-hsl), 0.1);
    }

    :host(:not(.open)) .options:has(> ::slotted(ui-select-option[selected])) {
        display: block;
    }

    :host(:not(.open)) ::slotted(ui-select-option:not([selected])) {
        display: none;
    }
</style>

<div class="options">
    <div class="icon"><svg-chevron-down></svg-chevron-down></div>

    <slot></slot>
</div>
`;
let ri = class {
  constructor() {
    this.events = new v();
  }
};
var Y;
const vt = class vt extends HTMLElement {
  constructor() {
    super();
    /** @param {MouseEvent | PointerEvent} ev */
    h(this, Y, async (i) => {
      (i.composedPath() || []).forEach((s) => {
        s instanceof G && ([...this.querySelectorAll("ui-select-option")].forEach(
          (a) => a.removeAttribute("selected")
        ), s.setAttribute("selected", ""), this.ui.events.dispatch("change", s));
      });
    });
    this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = oi, this.cleanup = new c(), this.ui = new ri();
  }
  // }}}
  connectedCallback() {
    const i = this.shadowRoot.querySelector(".options"), s = this.onClickOptions.bind(this);
    i.addEventListener("click", s), this.cleanup.add(() => {
      this.removeEventListener("click", s), i.removeEventListener("click", this.onClickOptions);
    }), this.style.setProperty(
      "--items-length",
      this.querySelectorAll("ui-select-option").length.toString()
    );
  }
  // }}}
  disconnectedCallback() {
    this.cleanup.run();
  }
  // }}}
  /**
   * @private
   * @param {Event} ev
   */
  async onClickOptions(i) {
    this.classList.toggle("open") ? (i.stopPropagation(), this.addEventListener("click", o(this, Y))) : setTimeout(
      () => this.removeEventListener("click", o(this, Y))
    );
  }
  // }}}
};
Y = new WeakMap(), // }}}
n(vt, "register", () => {
  Ht.register(), G.register(), customElements.get("ui-select") || customElements.define("ui-select", vt);
});
let re = vt;
const ni = l`
    <style>
        * {
            box-sizing: border-box;
        }

        :host {
            display: block;
            position: relative;
            width: 100%;
        }

        input {
            width: calc(100% - var(--ui-spacing) * 4);
            display: block;
            margin: 0;
            padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
            border: none !important;
            border-radius: inherit;
            outline: none !important;
            font-size: 0.9rem;
            font-family: var(--ui-fontFamily);
            font-variation-settings: var(--ui-input-fontVariation);
            accent-color: var(--ui-primary-bgColor);
            background-color: transparent !important;
        }

        .container {
            position: relative;
            width: 100%;
            border: none;
            border: 1px solid var(--ui-borderColor);
            border-radius: var(--ui-radius);
            transition: border-color 0.25s linear;
            background-color: var(--ui-backdrop-bgColor);
            backdrop-filter: var(--ui-backdropFilter);
        }

        .container:has(input:focus) {
            border-color: var(--ui-primary-bgColor);
        }

        .container:has(input[aria-invalid]) {
            border-color: hsl(var(--ui-destructive-bgColor));
        }

        ::slotted([slot="title"]) {
            display: block;
            padding: 0 var(--ui-spacing);
            user-select: none;
            transform: translateY(calc(var(--ui-spacing) / 2));
        }

        ui-icon-button {
            position: absolute;
            top: 0;
            right: 0;
            height: 100%;
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    </style>

    <div class="container">
        <slot name="title"></slot>
        <input type="search" />
        <ui-icon-button ghost>
            <svg-search></svg-search>
        </ui-icon-button>
    </div>
`, F = class F extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = ni, this.cleanup = new c(), this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new v()
      // TODO: Continue here...
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "title":
        let a = this.querySelector('[slot="title"]');
        s === null && a && (this.removeChild(a), a = null), a || (a = new E(), a.slot = "title", this.appendChild(a)), a.innerHTML = s || "";
        break;
      case "value":
        this.ui.value = s || "";
        break;
      case "placeholder":
        s === null ? this.ui.placeholder = "" : this.ui.placeholder = s;
        break;
      case "invalid":
        this.ui.input.ariaInvalid = s !== null ? "" : null;
        break;
    }
  }
};
n(F, "register", () => {
  E.register(), Q.register(), Rt.register(), customElements.get("ui-search") || customElements.define("ui-search", F);
}), n(F, "observedAttributes", ["title", "value", "placeholder", "invalid"]);
let ne = F;
var C, H, X, me;
let ai = (me = class {
  /** @param {UILang} root */
  constructor(e) {
    /** @type {UILang} */
    h(this, C, void 0);
    /**
     * @type {Events<{ "change": UILangType}>}
     */
    h(this, H, void 0);
    /**
     * @type {{
     *  [key: string]: {
     *      [key: string]: string;
     *  };
     * }}
     */
    h(this, X, void 0);
    u(this, C, e), u(this, H, new v()), this.langType = null;
  }
  get current() {
    return o(this, C).getAttribute("current");
  }
  set current(e) {
    e === null ? o(this, C).removeAttribute("current") : o(this, C).setAttribute("current", e);
  }
  /** @returns {UILangType} */
  getFallbackElement() {
    return o(this, C).querySelector("ui-lang-type[fallback]");
  }
  /**
   * @param {UILangType} langType
   * @param {{
   *  [key: string]: {
   *      [key: string]: string;
   *  };
   * }} data
   */
  new(e, i) {
    this.langType = e, u(this, X, i), o(this, H).dispatch("change", this.langType);
  }
  /**
   * @param {string} group
   * @param {string} key
   */
  get(e, i) {
    var s, a;
    return ((a = (s = o(this, X)) == null ? void 0 : s[e]) == null ? void 0 : a[i]) || null;
  }
  /**
   * @param {"change"} key
   * @param {(langType: UILangType | null) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(e, i, s = !1) {
    if (typeof i != "function")
      throw "callback is not a function";
    return s && i(this.langType), o(this, H).on(e, i);
  }
}, C = new WeakMap(), H = new WeakMap(), X = new WeakMap(), me);
const V = class V extends HTMLElement {
  constructor() {
    super(), this.ui = new ai(this);
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "current":
        s !== null && this.loadLanguage(s);
        break;
    }
  }
  /**
   * @private
   * @param {string} name
   */
  async loadLanguage(e) {
    const i = this.querySelector(`ui-lang-type[name="${e}"]`) || this.ui.getFallbackElement();
    if (!i)
      return;
    if (!i.ui.href)
      throw "Missing href attribute!";
    const s = await fetch(i.ui.href);
    this.ui.new(i, await s.json());
  }
};
n(V, "register", () => {
  customElements.get("ui-lang") || customElements.define("ui-lang", V);
}), n(V, "observedAttributes", ["current"]);
let ae = V;
var f, fe;
let li = (fe = class {
  /**
  * @param {UILangType} root
  */
  constructor(e) {
    /** @type {UILangType} */
    h(this, f, void 0);
    u(this, f, e);
  }
  get name() {
    return o(this, f).getAttribute("name");
  }
  set name(e) {
    o(this, f).setAttribute("name", e);
  }
  get href() {
    return o(this, f).getAttribute("href");
  }
  set href(e) {
    o(this, f).setAttribute("href", e);
  }
  get fallback() {
    return o(this, f).hasAttribute("fallback");
  }
  set fallback(e) {
    e ? o(this, f).setAttribute("fallback", "") : o(this, f).removeAttribute("fallback");
  }
}, f = new WeakMap(), fe);
const wt = class wt extends HTMLElement {
  constructor() {
    super(), this.ui = new li(this);
  }
};
n(wt, "register", () => {
  customElements.get("ui-lang-type") || customElements.define("ui-lang-type", wt);
});
let le = wt;
const ci = l`
<style>
    .background {
        z-index: 999;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-color: var(--ui-backdrop-bgColor);
        backdrop-filter: var(--ui-backdropFilter);
    }

    .spinner {
        z-index: 1000;
        content: '';
        box-sizing: border-box;
        position: absolute;
        top: 50%;
        left: 50%;
        width: 2.5rem;
        height: 2.5rem;
        margin-top: -1.25rem;
        margin-left: -1.25rem;
        border-radius: 50%;
        border: 2px solid var(--ui-borderColor);
        border-top-color: var(--ui-primary-bgColor);
        animation: spinner .6s linear infinite;
    }

    @keyframes spinner {
        to {transform: rotate(360deg);}
    }
</style>

<div class="background"></div>
<div class="spinner"></div>
`, yt = class yt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = ci, this.cleanup = new c();
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(yt, "register", () => {
  customElements.get("ui-spinner") || customElements.define("ui-spinner", yt);
});
let ce = yt;
const hi = l`
    <style>
        :host {
            display: block !important;
            position: absolute !important;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            animation: fade-in 0.5s;
            transition: opacity 0.5s ease;
        }

        :host(:last-child) {
            opacity: 1;
        }

        @keyframes fade-in {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
    </style>

    <slot></slot>
`;
var A, be;
let ui = (be = class {
  /**
  * @param {UIStackLayoutPage} root
  */
  constructor(e) {
    /** @type {UIStackLayoutPage} */
    h(this, A, void 0);
    u(this, A, e);
  }
  get name() {
    return o(this, A).getAttribute("name");
  }
  set name(e) {
    o(this, A).setAttribute("name", e);
  }
}, A = new WeakMap(), be);
const kt = class kt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = hi, this.cleanup = new c(), this.ui = new ui(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(kt, "register", () => {
  customElements.get("ui-stack-layout-page") || customElements.define("ui-stack-layout-page", kt);
});
let $t = kt;
const di = l`
    <style>
        :host {
            display: block !important;
            position: relative !important;
            width: 100%;
            height: 100%;
        }
    </style>

    <slot></slot>
`;
var x, L, R, ve;
let pi = (ve = class {
  /** @param {UIStackLayout} root */
  constructor(e) {
    /** @type {UIStackLayout} */
    h(this, x, void 0);
    h(this, L, !1);
    /**
     * @type {UIPages}
     */
    h(this, R, {});
    u(this, x, e), this.events = new v(), this.stack = [];
  }
  /**
   * @param {string} name
   * @param {() => (UIStackLayoutPage)} cb
   */
  registerPage(e, i) {
    o(this, R)[e] = i;
  }
  /**
   * @param {string} name
   */
  unregisterPage(e) {
    delete o(this, R)[e];
  }
  lock() {
    u(this, L, !0);
  }
  unlock() {
    u(this, L, !1);
  }
  clearStack() {
    for (; this.stackSize() > 0; )
      o(this, x).removeChild(this.stack.pop());
  }
  stackSize() {
    return this.stack.length;
  }
  goBack() {
    if (!this.stack.length || o(this, L))
      return;
    const e = o(this, x).removeChild(this.stack.pop());
    this.stack.length > 0 && (this.stack[this.stack.length - 1].parentElement || o(this, x).appendChild(this.stack[this.stack.length - 1])), this.dispatchChangeEvent(e);
  }
  /**
   * @param {string} name
   * @param {boolean} keepOldPage
   */
  setPage(e, i = !1) {
    if (o(this, L))
      return;
    this.stack.push(
      o(this, x).appendChild(o(this, R)[e]())
    );
    let s = null;
    this.stack.length > 1 && !i && (s = this.stack[this.stack.length - 2], s.parentElement.removeChild(s)), this.dispatchChangeEvent(s);
  }
  /**
   * @param {UIStackLayoutPage} oldChild
   */
  async dispatchChangeEvent(e) {
    this.events.dispatch("change", {
      newPage: this.stack[this.stack.length - 1] || null,
      oldPage: e || this.stack[this.stack.length - 2] || null
    });
  }
}, x = new WeakMap(), L = new WeakMap(), R = new WeakMap(), ve);
const Ct = class Ct extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = di, this.cleanup = new c(), this.ui = new pi(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
    this.cleanup.run();
  }
};
n(Ct, "register", () => {
  $t.register(), customElements.get("ui-stack-layout") || customElements.define("ui-stack-layout", Ct);
});
let he = Ct;
var y, k, we;
let gi = (we = class {
  /**
   * @param {UIStore} root
   */
  constructor(e) {
    /** @type {UIStore} */
    h(this, y, void 0);
    /** @type {any} */
    h(this, k, {});
    u(this, y, e), this.events = new v();
  }
  get localStoragePrefix() {
    return o(this, y).getAttribute("local-storage-prefix");
  }
  set localStoragePrefix(e) {
    o(this, y).setAttribute("local-storage-prefix", e);
  }
  get enableLocalStorage() {
    return o(this, y).hasAttribute("enable-local-storage");
  }
  set enableLocalStorage(e) {
    e ? o(this, y).setAttribute("enable-local-storage", "") : o(this, y).removeAttribute("enable-local-storage");
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @returns {T[K]}
   */
  get(e) {
    return o(this, k)[e];
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
   * `this.enableLocalStorage` flag needs to be set to `true` for this to work
   */
  set(e, i, s = !1) {
    if (s && this.enableLocalStorage) {
      const a = JSON.parse(localStorage.getItem(this.localStoragePrefix + e.toString()) || "null");
      o(this, k)[e] = a ?? i;
    } else
      o(this, k)[e] = i;
    this.enableLocalStorage && localStorage.setItem(this.localStoragePrefix + e.toString(), JSON.stringify(o(this, k)[e])), this.events.dispatch(e, o(this, k)[e]);
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {(data: T[K]) => any} callback
   */
  update(e, i) {
    if (typeof i != "function")
      throw "callback is not a function";
    this.set(e, i(o(this, k)[e]));
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {(data: T[K]) => void|Promise<void>} callback
   * @param {boolean} [trigger] - this will run the callback first
   * @returns {() => void} clean up function
   */
  on(e, i, s = !1) {
    if (typeof i != "function")
      throw "callback is not a function";
    return s && i(this.get(e)), this.events.on(e, i);
  }
}, y = new WeakMap(), k = new WeakMap(), we);
const xt = class xt extends HTMLElement {
  constructor() {
    super(), this.ui = new gi(this);
  }
};
n(xt, "register", () => {
  customElements.get("ui-store") || customElements.define("ui-store", xt);
});
let ue = xt;
var b;
class mi {
  constructor() {
    /** @type {MediaQueryList | null} */
    h(this, b, null);
    this.currentTheme = null, this.themes = {};
  }
  enableAutoMode() {
    if (this.removeMode(), o(this, b)) {
      this.mediaChangeHandler(o(this, b));
      return;
    }
    u(this, b, window.matchMedia("(prefers-color-scheme: dark)")), o(this, b).addEventListener("change", this.mediaChangeHandler), this.mediaChangeHandler(o(this, b));
  }
  disableAutoMode() {
    this.removeMedia();
  }
  /**
   * @param {string} name
   * @param {string} href
   */
  addTheme(e, i) {
    this.themes[e] = i;
  }
  /**
   * @param {string} name
   */
  loadTheme(e) {
    var s;
    if (!this.themes[e])
      throw `theme "${e}" is missing in this.themes`;
    if (((s = this.currentTheme) == null ? void 0 : s.name) == e)
      return;
    {
      const a = document.getElementById("theme");
      a && (document.head.removeChild(a), this.currentTheme = null);
    }
    const i = document.createElement("link");
    i.id = "theme", i.rel = "stylesheet", i.href = this.themes[e], document.head.appendChild(i), this.currentTheme = { name: e, href: this.themes[e] };
  }
  /**
   * @param {MediaQueryListEvent | MediaQueryList} ev
   */
  mediaChangeHandler(e) {
    e.matches ? document.body.setAttribute("data-theme", "dark") : document.body.setAttribute("data-theme", "light");
  }
  /**
   * @param {HTMLElement} element
   */
  removeMode(e = document.body) {
    e.removeAttribute("data-theme");
  }
  /**
   * @param {UIMode} mode
   * @param {HTMLElement} element
   */
  setMode(e, i = document.body) {
    switch (e) {
      case "dark":
        i.setAttribute("data-theme", e);
        break;
      case "light":
        i.setAttribute("data-theme", e);
        break;
    }
  }
  /**
   * @private
   */
  removeMedia() {
    o(this, b) && (o(this, b).removeEventListener("change", this.mediaChangeHandler), u(this, b, null));
  }
}
b = new WeakMap();
const D = class D extends HTMLElement {
  constructor() {
    super(), this.ui = new mi();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue 
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, i, s) {
    switch (e) {
      case "auto":
        s !== null ? this.ui.enableAutoMode() : this.ui.disableAutoMode();
        break;
      case "mode":
        s !== null ? this.ui.setMode(s) : this.ui.removeMode();
        break;
    }
  }
};
n(D, "register", () => {
  customElements.get("ui-theme-handler") || customElements.define("ui-theme-handler", D);
}), n(D, "observedAttributes", ["auto", "mode"]);
let de = D;
export {
  Bt as SvgAdd,
  Jt as SvgBackArrow,
  Ht as SvgChevronDown,
  At as SvgClose,
  Yt as SvgDownload,
  Xt as SvgEdit,
  Gt as SvgMenu,
  Kt as SvgPDF,
  Qt as SvgRecycle,
  Rt as SvgSearch,
  Wt as SvgSettings,
  It as SvgShare,
  Ut as SvgToday,
  Zt as UIAppBar,
  Ft as UIAppBarItem,
  Vt as UIButton,
  Dt as UIContainer,
  _t as UIDialog,
  ee as UIDrawer,
  se as UIDrawerGroup,
  St as UIDrawerGroupItem,
  Ot as UIFlexGrid,
  Pt as UIFlexGridItem,
  K as UIFlexGridRow,
  Q as UIIconButton,
  oe as UIInput,
  ie as UILabel,
  ae as UILang,
  le as UILangType,
  W as UIPrimary,
  ne as UISearch,
  E as UISecondary,
  re as UISelect,
  G as UISelectOption,
  ce as UISpinner,
  he as UIStackLayout,
  $t as UIStackLayoutPage,
  ue as UIStore,
  de as UIThemeHandler,
  bi as js
};
