var ui = Object.defineProperty;
var He = (o) => {
  throw TypeError(o);
};
var di = (o, e, t) => e in o ? ui(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[e] = t;
var s = (o, e, t) => di(o, typeof e != "symbol" ? e + "" : e, t), Jt = (o, e, t) => e.has(o) || He("Cannot " + t);
var p = (o, e, t) => (Jt(o, e, "read from private field"), t ? t.call(o) : e.get(o)), a = (o, e, t) => e.has(o) ? He("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(o) : e.set(o, t), M = (o, e, t, i) => (Jt(o, e, "write to private field"), i ? i.call(o, t) : e.set(o, t), t), c = (o, e, t) => (Jt(o, e, "access private method"), t);
class zi {
  constructor() {
    this.callbacks = [];
  }
  /**
   * @param {(() => void|Promise<void>)[]} cb
   */
  add(...e) {
    this.callbacks.push(...e);
  }
  run() {
    for (let e = 0; e < this.callbacks.length; e++)
      if (this.callbacks[e] !== null)
        try {
          this.callbacks[e](), this.callbacks[e] = null;
        } catch (t) {
          console.error("cleanup error:", t);
        }
    this.callbacks = this.callbacks.filter((e) => e !== null);
  }
}
function hi(o, e, { onDragStart: t = null, onDragging: i = null, onDragEnd: r = null } = {}) {
  const u = () => {
    const m = [...o.children].indexOf(e);
    e.draggable = !0, e.ondragstart = (f) => {
      f.dataTransfer.effectAllowed = "move", f.dataTransfer.dropEffect = "move", t && t(m);
    }, e.ondragover = (f) => (f.preventDefault(), !1), e.ondragenter = (f) => {
      f.preventDefault(), [...o.children].forEach(
        (w, ot) => {
          if (ot === m) {
            w.style.background = "var(--ui-primary)", w.style.color = "var(--ui-primary-fg)";
            return;
          }
          w.style.background = "inherit", w.style.color = "inherit";
        }
      ), i && i(m);
    }, e.ondrop = (f) => {
      f.preventDefault(), f.dataTransfer.dropEffect = "move", r && r(m), [...o.children].forEach((w) => {
        w.style.background = "inherit", w.style.color = "inherit";
      });
    };
  }, h = () => {
    e.draggable = !1, e.ondragstart = null, e.ondragover = null, e.ondragenter = null, e.ondrop = null;
  };
  return u(), {
    /**
     * @param {DraggableNative_Options} options
     */
    update(d) {
      Object.hasOwn(d, "onDragStart") && (t = d.onDragStart), Object.hasOwn(d, "onDragging") && (i = d.onDragStart), Object.hasOwn(d, "onDragEnd") && (r = d.onDragEnd);
    },
    destroy: h
  };
}
function pi(o, { onDragEnd: e = null, onDragStart: t = null } = {}) {
  let i = null, r = null, u = null, h = null, d = null, m = !1, f = null, w = null;
  const ot = (l) => {
    !i && Array.from(l.currentTarget.classList).includes("draggable") && (u = l.clientX, h = l.clientY, r = (/* @__PURE__ */ new Date()).getTime(), i = l.currentTarget, d || clearTimeout(d), d = setTimeout(() => {
      f = i.style.color, w = i.style.backgroundColor, i.style.color = "var(--ui-primary-fg)", i.style.backgroundColor = "var(--ui-primary)", o.classList.add("dragging"), m = !0, t && t();
    }, 200));
  }, Re = (l) => {
    if (!r || !i) return;
    if (!m && (/* @__PURE__ */ new Date()).getTime() - r < 200) {
      const Ee = Math.abs(u - l.clientX), Ae = Math.abs(h - l.clientY);
      if ((Ee > Ae ? Ee : Ae) < 24)
        return;
      Nt();
      return;
    }
    l.preventDefault(), m || (m = !0, t && t());
    const C = !!l.targetTouches && l.targetTouches[0] || l;
    let v = document.elementFromPoint(C.clientX, C.clientY);
    for (; !v.classList.contains("draggable") && v.parentElement; )
      v = v.parentElement;
    v.classList.contains("draggable") && li(i, v);
  }, Nt = () => {
    d !== null && (clearTimeout(d), d = null), i && (i.style.color = f, i.style.backgroundColor = w, i = null), r = null, o.classList.remove("dragging"), m && (e && e(), m = !1);
  };
  function li(l, C) {
    ci(l, C) ? o.insertBefore(l, C) : o.insertBefore(l, C.nextElementSibling);
  }
  function ci(l, C) {
    let v = l.previousElementSibling;
    for (; v; ) {
      if (v === C)
        return !0;
      v = v.previousElementSibling;
    }
    return !1;
  }
  return (() => {
    Array.from(o.children).forEach(
      (l) => {
        l.classList.add("draggable"), l.onmousedown = ot, l.ontouchstart = ot, l.onmousemove = Re, l.ontouchmove = Re, l.onmouseup = Nt, l.ontouchend = Nt;
      }
    );
  })(), {
    /** @param {DraggableMobile_Options} options */
    update: (l) => {
      Object.hasOwn(l, "onDragStart") && (t = l.onDragStart), Object.hasOwn(l, "onDragEnd") && (e = l.onDragEnd);
    },
    destroy: () => {
      Array.from(o.children).forEach(
        (l) => {
          l.classList.remove("draggable"), l.onmousedown = null, l.ontouchstart = null, l.onmousemove = null, l.ontouchmove = null, l.onmouseup = null, l.ontouchend = null;
        }
      );
    }
  };
}
const Bi = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createMobile: pi,
  createNative: hi
}, Symbol.toStringTag, { value: "Module" }));
var k;
class b {
  constructor() {
    /**
     * @type {any}
     */
    a(this, k, {});
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>) | null} listener
   * @returns {() => void} clean up function
   */
  on(e, t) {
    if (typeof t != "function")
      throw `invalid event listener passed for "${e.toString()}" event!`;
    return p(this, k)[e] || (p(this, k)[e] = []), p(this, k)[e].push(t), () => {
      this.off(e, t);
    };
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {((data: T[K]) => void|Promise<void>)} listener
   */
  off(e, t) {
    if (!p(this, k)[e])
      throw `no listeners found for ${e.toString()}, there is nothing to delete`;
    let i = !1, r = 0;
    for (const u of p(this, k)[e])
      u === t && (p(this, k)[e].splice(r, 1), i = !0), r++;
    if (!i)
      throw `listener not found for ${e.toString()}, there is nothing to delete`;
    return this;
  }
  /**
   * @template {keyof T} K
   * @param {K} key
   * @param {T[K]} data
   */
  dispatch(e, t) {
    if (t === void 0) throw "data is undefined!";
    if (p(this, k)[e])
      for (const i of p(this, k)[e])
        i(t);
    return this;
  }
}
k = new WeakMap();
let Kt = null;
function gi() {
  return Kt === null && (Kt = Array.from(document.styleSheets).map((o) => {
    const e = new CSSStyleSheet(), t = Array.from(o.cssRules).map((i) => i.cssText).join(" ");
    return e.replaceSync(t), e;
  })), Kt;
}
function g(o) {
  o.adoptedStyleSheets.push(...gi());
}
const je = {
  color: "var(--ui-ripple-fg, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  useClick: !1
};
function L(o, e = {}) {
  e = { ...je, ...e };
  let t = null;
  const i = (f) => {
    t = Qt(f, e), o.addEventListener("pointermove", u);
  }, r = () => {
    o.removeEventListener("pointermove", u), Wt(t), t = null;
  }, u = () => r(), h = (f) => {
    t = Qt(f, e), Wt(t), t = null;
  }, d = () => {
    o.classList.add("ripple-container"), o.style.overflow = "hidden", e.useClick === !0 ? o.addEventListener("click", h) : (o.addEventListener("pointerdown", i), o.addEventListener("pointerup", r), o.addEventListener("pointerleave", r));
  }, m = () => {
    o.classList.remove("ripple-container"), e.useClick === !0 ? o.removeEventListener("click", h) : (o.removeEventListener("pointerdown", i), o.removeEventListener("pointerup", r), o.removeEventListener("pointerleave", r), o.removeEventListener("pointermove", u));
  };
  return d(), {
    update: (f) => {
      e = {
        ...e,
        ...f
      }, m(), d();
    },
    destroy: m
  };
}
function Qt(o, e) {
  const t = document.createElement("div");
  t.classList.add("ripple"), t.style.position = "absolute", t.style.color = "inherit", t.style.borderRadius = "50%", t.style.pointerEvents = "none", t.style.width = "100px", t.style.height = "100px", t.style.marginTop = "-50px", t.style.marginLeft = "-50px", t.style.opacity = `${e.opacity}`, t.style.backgroundColor = e.color, t.style.transform = "scale(0) translate(0, 0)", t.style.transition = `transform ${e.spreadDuration} ${e.spreadTiming} 0s,opacity ${e.clearDuration} ${e.clearTiming} 0s`, o.currentTarget.appendChild(t);
  const i = o.currentTarget.getBoundingClientRect();
  if (e.centered)
    t.style.top = `${i.height / 2}px`, t.style.left = `${i.width / 2}px`;
  else {
    const u = !!o.targetTouches && o.targetTouches[0] || o;
    t.style.top = `${u.clientY - i.top}px`, t.style.left = `${u.clientX - i.left}px`;
  }
  const r = Math.max(i.width, i.height) * 0.02;
  return t.style.transform = `scale(${r}) translate(0, 0)`, t;
}
function Wt(o) {
  o && (o.addEventListener("transitionend", (e) => {
    e.propertyName === "opacity" && o.remove();
  }), o.style.opacity = "0");
}
const qi = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: L,
  defaultOptions: je,
  start: Qt,
  stop: Wt
}, Symbol.toStringTag, { value: "Module" }));
function Oi() {
  return /(android)/i.test(navigator.userAgent);
}
const n = String.raw, S = String.raw;
function $i(o) {
  return Object.entries(o).map(
    ([e, t]) => `${e.replace(/[A-Z]/g, (i) => `-${i.toLowerCase()}`)}:${t}`
  ).join(";") + ";";
}
const fi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 19.6693V4C5 3.44772 5.44772 3 6 3H18C18.5523 3 19 3.44772 19 4V19.6693C19 20.131 18.4277 20.346 18.1237 19.9985L12 13L5.87629 19.9985C5.57227 20.346 5 20.131 5 19.6693Z"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, mi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 13.3636L8.03559 16.3204C8.42388 16.6986 9.04279 16.6986 9.43108 16.3204L19 7"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Se = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M17 9.5L12 14.5L7 9.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, bi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M14.5 17L9.5 12L14.5 7"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Te = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M7 17L16.8995 7.10051"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M7 7.00001L16.8995 16.8995"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, vi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M13 3L16 6L19 9M13 3L5 3L5 21L19 21L19 9M13 3L13 9L19 9"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, ki = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 12V18C5 18.5523 5.44772 19 6 19H18C18.5523 19 19 18.5523 19 18V12"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M12 3L12 15M12 15L16 11M12 15L8 11"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, yi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <circle
                cx="9.5"
                cy="6"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="9.5"
                cy="10"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="9.5"
                cy="14"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="9.5"
                cy="18"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="6"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="10"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="14"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="18"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
        </g>
    </svg>
`, wi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M6 12H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 15.5H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 8.5H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Ci = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="transparent"></rect>
            <circle
                cx="12"
                cy="7"
                r="0.5"
                transform="rotate(90 12 7)"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="12"
                cy="12"
                r="0.5"
                transform="rotate(90 12 12)"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="12"
                cy="17"
                r="0.5"
                transform="rotate(90 12 17)"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
        </g>
    </svg>
`, xi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M15.6287 5.12132L4.31497 16.435M15.6287 5.12132L19.1642 8.65685M15.6287 5.12132L17.0429 3.70711C17.4334 3.31658 18.0666 3.31658 18.4571 3.70711L20.5784 5.82843C20.969 6.21895 20.969 6.85212 20.5784 7.24264L19.1642 8.65685M7.85051 19.9706L4.31497 16.435M7.85051 19.9706L19.1642 8.65685M7.85051 19.9706L3.25431 21.0312L4.31497 16.435"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Li = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M12 6V18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 12H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Mi = n`
    <svg
        style="color: inherit;"
        viewBox="0 0 64 64"
        fill="transparent"
        xmlns="http://www.w3.org/2000/svg"
    >
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <style type="text/css">
                .st0 {
                    fill: var(--ui-svg-bg, red);
                    transition: fill 0.25s linear;
                }
                .st1 {
                    opacity: 0.2;
                }
                .st2 {
                    fill: var(--ui-svg-bg, red);
                    transition: fill 0.25s linear;
                }
                .st3 {
                    fill: none;
                    stroke: var(--ui-svg-fg, currentColor);
                    stroke-width: 4;
                    stroke-linecap: round;
                    stroke-miterlimit: 10;
                    transition: fill 0.25s linear;
                }
            </style>
            <circle class="st0" cx="32" cy="32" r="32"></circle>
            <g class="st1">
                <path
                    class="st2"
                    d="M32,52c-9.9,0-18-8.1-18-18c0-6.4,3.4-12.3,8.9-15.5c1-0.6,2.2-0.2,2.7,0.7c0.6,1,0.2,2.2-0.7,2.7 C20.7,24.4,18,29.1,18,34c0,7.7,6.3,14,14,14c7.7,0,14-6.3,14-14c0-5.1-2.7-9.7-7.2-12.2c-1-0.5-1.3-1.8-0.8-2.7 c0.5-1,1.8-1.3,2.7-0.8C46.5,21.5,50,27.5,50,34C50,43.9,41.9,52,32,52z"
                ></path>
            </g>
            <g class="st1">
                <path
                    class="st2"
                    d="M32,36c-1.1,0-2-0.9-2-2V14c0-1.1,0.9-2,2-2c1.1,0,2,0.9,2,2v20C34,35.1,33.1,36,32,36z"
                ></path>
            </g>
            <path
                class="st3"
                d="M39.8,18c4.9,2.7,8.2,8,8.2,14c0,8.8-7.2,16-16,16c-8.8,0-16-7.2-16-16c0-5.9,3.2-11,7.9-13.8"
            ></path>
            <line class="st3" x1="32" y1="32" x2="32" y2="12"></line>
        </g>
    </svg>
`, Si = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M18.75 17H20C20.5523 17 21 16.5523 21 16V8C21 7.44772 20.5523 7 20 7H4C3.44772 7 3 7.44772 3 8V16C3 16.5523 3.44772 17 4 17H5.25"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 12C6 11.4477 6.44772 11 7 11H17C17.5523 11 18 11.4477 18 12V20C18 20.5523 17.5523 21 17 21H7C6.44772 21 6 20.5523 6 20V12Z"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 4C6 3.44772 6.44772 3 7 3H17C17.5523 3 18 3.44772 18 4V7H6V4Z"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 13.5H15.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 18.5H15.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 16H15.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Ri = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill=""></rect>
            <path
                d="M21.3687 13.5827C21.4144 13.3104 21.2306 13.0526 20.9583 13.0069C20.686 12.9612 20.4281 13.1449 20.3825 13.4173L21.3687 13.5827ZM12 20.5C7.30558 20.5 3.5 16.6944 3.5 12H2.5C2.5 17.2467 6.75329 21.5 12 21.5V20.5ZM3.5 12C3.5 7.30558 7.30558 3.5 12 3.5V2.5C6.75329 2.5 2.5 6.75329 2.5 12H3.5ZM12 3.5C15.3367 3.5 18.2252 5.4225 19.6167 8.22252L20.5122 7.77748C18.9583 4.65062 15.7308 2.5 12 2.5V3.5ZM20.3825 13.4173C19.7081 17.437 16.2112 20.5 12 20.5V21.5C16.7077 21.5 20.6148 18.0762 21.3687 13.5827L20.3825 13.4173Z"
                fill="currentColor"
            ></path>
            <path
                d="M20.4716 2.42157V8.07843H14.8147"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Ve = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <g clip-path="url(#clip0_15_152)">
                <rect width="24" height="24" fill="none"></rect>
                <circle
                    cx="10.5"
                    cy="10.5"
                    r="6.5"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path
                    d="M19.6464 20.3536C19.8417 20.5488 20.1583 20.5488 20.3536 20.3536C20.5488 20.1583 20.5488 19.8417 20.3536 19.6464L19.6464 20.3536ZM20.3536 19.6464L15.3536 14.6464L14.6464 15.3536L19.6464 20.3536L20.3536 19.6464Z"
                    fill="currentColor"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_15_152">
                    <rect width="24" height="24" fill="none"></rect>
                </clipPath>
            </defs>
        </g>
    </svg>
`, Ei = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M13.5 2L13.9961 1.93798C13.9649 1.68777 13.7522 1.5 13.5 1.5V2ZM10.5 2V1.5C10.2478 1.5 10.0351 1.68777 10.0039 1.93798L10.5 2ZM13.7747 4.19754L13.2786 4.25955C13.3047 4.46849 13.4589 4.63867 13.6642 4.68519L13.7747 4.19754ZM16.2617 5.22838L15.995 5.6513C16.1731 5.76362 16.4024 5.75233 16.5687 5.62306L16.2617 5.22838ZM18.0104 3.86826L18.364 3.51471C18.1857 3.3364 17.9025 3.31877 17.7034 3.47359L18.0104 3.86826ZM20.1317 5.98958L20.5264 6.29655C20.6812 6.09751 20.6636 5.81434 20.4853 5.63603L20.1317 5.98958ZM18.7716 7.73831L18.3769 7.43134C18.2477 7.59754 18.2364 7.82693 18.3487 8.00503L18.7716 7.73831ZM19.8025 10.2253L19.3148 10.3358C19.3613 10.5411 19.5315 10.6953 19.7404 10.7214L19.8025 10.2253ZM22 10.5H22.5C22.5 10.2478 22.3122 10.0351 22.062 10.0039L22 10.5ZM22 13.5L22.062 13.9961C22.3122 13.9649 22.5 13.7522 22.5 13.5H22ZM19.8025 13.7747L19.7404 13.2786C19.5315 13.3047 19.3613 13.4589 19.3148 13.6642L19.8025 13.7747ZM18.7716 16.2617L18.3487 15.995C18.2364 16.1731 18.2477 16.4025 18.3769 16.5687L18.7716 16.2617ZM20.1317 18.0104L20.4853 18.364C20.6636 18.1857 20.6812 17.9025 20.5264 17.7034L20.1317 18.0104ZM18.0104 20.1317L17.7034 20.5264C17.9025 20.6812 18.1857 20.6636 18.364 20.4853L18.0104 20.1317ZM16.2617 18.7716L16.5687 18.3769C16.4024 18.2477 16.1731 18.2364 15.995 18.3487L16.2617 18.7716ZM13.7747 19.8025L13.6642 19.3148C13.4589 19.3613 13.3047 19.5315 13.2786 19.7404L13.7747 19.8025ZM13.5 22V22.5C13.7522 22.5 13.9649 22.3122 13.9961 22.062L13.5 22ZM10.5 22L10.0039 22.062C10.0351 22.3122 10.2478 22.5 10.5 22.5V22ZM10.2253 19.8025L10.7214 19.7404C10.6953 19.5315 10.5411 19.3613 10.3358 19.3148L10.2253 19.8025ZM7.73832 18.7716L8.00504 18.3487C7.82694 18.2364 7.59756 18.2477 7.43135 18.3769L7.73832 18.7716ZM5.98959 20.1317L5.63604 20.4853C5.81435 20.6636 6.09752 20.6812 6.29656 20.5264L5.98959 20.1317ZM3.86827 18.0104L3.4736 17.7034C3.31878 17.9025 3.33641 18.1857 3.51472 18.364L3.86827 18.0104ZM5.22839 16.2617L5.62307 16.5687C5.75234 16.4025 5.76363 16.1731 5.65131 15.995L5.22839 16.2617ZM4.19754 13.7747L4.68519 13.6642C4.63867 13.4589 4.46849 13.3047 4.25955 13.2786L4.19754 13.7747ZM2 13.5H1.5C1.5 13.7522 1.68777 13.9649 1.93798 13.9961L2 13.5ZM2 10.5L1.93798 10.0039C1.68777 10.0351 1.5 10.2478 1.5 10.5H2ZM4.19754 10.2253L4.25955 10.7214C4.46849 10.6953 4.63867 10.5411 4.68519 10.3358L4.19754 10.2253ZM5.22839 7.73831L5.65131 8.00503C5.76363 7.82693 5.75234 7.59755 5.62307 7.43134L5.22839 7.73831ZM3.86827 5.98959L3.51472 5.63603C3.33641 5.81434 3.31878 6.09751 3.47359 6.29656L3.86827 5.98959ZM5.98959 3.86827L6.29656 3.47359C6.09752 3.31878 5.81434 3.33641 5.63604 3.51471L5.98959 3.86827ZM7.73832 5.22839L7.43135 5.62306C7.59755 5.75233 7.82694 5.76363 8.00504 5.6513L7.73832 5.22839ZM10.2253 4.19754L10.3358 4.68519C10.5411 4.63867 10.6953 4.46849 10.7214 4.25955L10.2253 4.19754ZM13.5 1.5H10.5V2.5H13.5V1.5ZM14.2708 4.13552L13.9961 1.93798L13.0039 2.06202L13.2786 4.25955L14.2708 4.13552ZM16.5284 4.80547C15.7279 4.30059 14.8369 3.92545 13.8851 3.70989L13.6642 4.68519C14.503 4.87517 15.2886 5.20583 15.995 5.6513L16.5284 4.80547ZM16.5687 5.62306L18.3174 4.26294L17.7034 3.47359L15.9547 4.83371L16.5687 5.62306ZM17.6569 4.22182L19.7782 6.34314L20.4853 5.63603L18.364 3.51471L17.6569 4.22182ZM19.7371 5.68261L18.3769 7.43134L19.1663 8.04528L20.5264 6.29655L19.7371 5.68261ZM20.2901 10.1149C20.0746 9.16313 19.6994 8.27213 19.1945 7.47158L18.3487 8.00503C18.7942 8.71138 19.1248 9.49695 19.3148 10.3358L20.2901 10.1149ZM22.062 10.0039L19.8645 9.72917L19.7404 10.7214L21.938 10.9961L22.062 10.0039ZM22.5 13.5V10.5H21.5V13.5H22.5ZM19.8645 14.2708L22.062 13.9961L21.938 13.0039L19.7404 13.2786L19.8645 14.2708ZM19.1945 16.5284C19.6994 15.7279 20.0746 14.8369 20.2901 13.8851L19.3148 13.6642C19.1248 14.503 18.7942 15.2886 18.3487 15.995L19.1945 16.5284ZM20.5264 17.7034L19.1663 15.9547L18.3769 16.5687L19.7371 18.3174L20.5264 17.7034ZM18.364 20.4853L20.4853 18.364L19.7782 17.6569L17.6569 19.7782L18.364 20.4853ZM15.9547 19.1663L17.7034 20.5264L18.3174 19.7371L16.5687 18.3769L15.9547 19.1663ZM13.8851 20.2901C14.8369 20.0746 15.7279 19.6994 16.5284 19.1945L15.995 18.3487C15.2886 18.7942 14.503 19.1248 13.6642 19.3148L13.8851 20.2901ZM13.9961 22.062L14.2708 19.8645L13.2786 19.7404L13.0039 21.938L13.9961 22.062ZM10.5 22.5H13.5V21.5H10.5V22.5ZM9.72917 19.8645L10.0039 22.062L10.9961 21.938L10.7214 19.7404L9.72917 19.8645ZM7.4716 19.1945C8.27214 19.6994 9.16314 20.0746 10.1149 20.2901L10.3358 19.3148C9.49696 19.1248 8.71139 18.7942 8.00504 18.3487L7.4716 19.1945ZM6.29656 20.5264L8.04529 19.1663L7.43135 18.3769L5.68262 19.7371L6.29656 20.5264ZM3.51472 18.364L5.63604 20.4853L6.34315 19.7782L4.22183 17.6569L3.51472 18.364ZM4.83372 15.9547L3.4736 17.7034L4.26295 18.3174L5.62307 16.5687L4.83372 15.9547ZM3.70989 13.8851C3.92545 14.8369 4.30059 15.7279 4.80547 16.5284L5.65131 15.995C5.20584 15.2886 4.87517 14.503 4.68519 13.6642L3.70989 13.8851ZM1.93798 13.9961L4.13552 14.2708L4.25955 13.2786L2.06202 13.0039L1.93798 13.9961ZM1.5 10.5V13.5H2.5V10.5H1.5ZM4.13552 9.72917L1.93798 10.0039L2.06202 10.9961L4.25955 10.7214L4.13552 9.72917ZM4.80547 7.47159C4.30059 8.27213 3.92545 9.16313 3.70989 10.1149L4.68519 10.3358C4.87517 9.49696 5.20583 8.71138 5.65131 8.00503L4.80547 7.47159ZM3.47359 6.29656L4.83371 8.04528L5.62307 7.43134L4.26295 5.68262L3.47359 6.29656ZM5.63604 3.51471L3.51472 5.63603L4.22182 6.34314L6.34314 4.22182L5.63604 3.51471ZM8.04529 4.83371L6.29656 3.47359L5.68262 4.26294L7.43135 5.62306L8.04529 4.83371ZM10.1149 3.70989C9.16313 3.92545 8.27214 4.30059 7.4716 4.80547L8.00504 5.6513C8.71139 5.20583 9.49696 4.87517 10.3358 4.68519L10.1149 3.70989ZM10.0039 1.93798L9.72917 4.13552L10.7214 4.25955L10.9961 2.06202L10.0039 1.93798Z"
                fill="currentColor"
            ></path>
            <circle
                cx="12"
                cy="12"
                r="4"
                stroke="currentColor"
                stroke-linejoin="round"
            ></circle>
        </g>
    </svg>
`, Ai = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <g clip-path="url(#clip0_15_72)">
                <rect width="24" height="24" fill="none"></rect>
                <circle
                    cx="7"
                    cy="12"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <circle
                    cx="17"
                    cy="6"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path d="M15 7L8.5 11" stroke="currentColor"></path>
                <circle
                    cx="17"
                    cy="18"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path d="M8.5 13.5L15 17" stroke="currentColor"></path>
            </g>
            <defs>
                <clipPath id="clip0_15_72">
                    <rect width="24" height="24" fill="none"></rect>
                </clipPath>
            </defs>
        </g>
    </svg>
`, Hi = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <g filter="url(#filter0_d_15_286)">
                <path
                    d="M3 8.26667V19C3 19.5523 3.44772 20 4 20H20C20.5523 20 21 19.5523 21 19V8.26667M3 8.26667V5C3 4.44772 3.44772 4 4 4H20C20.5523 4 21 4.44772 21 5V8.26667M3 8.26667H21"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></path>
            </g>
            <g filter="url(#filter1_d_15_286)">
                <circle
                    cx="12"
                    cy="14"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
            </g>
            <g filter="url(#filter2_d_15_286)">
                <path
                    d="M7 2V5"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                ></path>
            </g>
            <g filter="url(#filter3_d_15_286)">
                <path
                    d="M17 2V5"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                ></path>
            </g>
            <defs>
                <filter
                    id="filter0_d_15_286"
                    x="1.5"
                    y="3.5"
                    width="21"
                    height="19"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
                <filter
                    id="filter1_d_15_286"
                    x="8.5"
                    y="11.5"
                    width="7"
                    height="7"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
                <filter
                    id="filter2_d_15_286"
                    x="5.5"
                    y="1.5"
                    width="3"
                    height="6"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
                <filter
                    id="filter3_d_15_286"
                    x="15.5"
                    y="1.5"
                    width="3"
                    height="6"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
            </defs>
        </g>
    </svg>
`, ji = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 7.5H19L18 21H6L5 7.5Z"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
            <path
                d="M15.5 9.5L15 19"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M12 9.5V19"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 9.5L9 19"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M16 5H19C20.1046 5 21 5.89543 21 7V7.5H3V7C3 5.89543 3.89543 5 5 5H8M16 5L15 3H9L8 5M16 5H8"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Ti = n`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 12V18C5 18.5523 5.44772 19 6 19H18C18.5523 19 19 18.5523 19 18V12"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M12 15L12 3M12 3L8 7M12 3L16 7"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Vi = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bookmark: fi,
  checkmark: mi,
  chevronDown: Se,
  chevronLeft: bi,
  close: Te,
  documentNew: vi,
  download: ki,
  drag: yi,
  menu: wi,
  moreVertical: Ci,
  pen: xi,
  plus: Li,
  power: Mi,
  printer: Si,
  refresh: Ri,
  search: Ve,
  settings: Ei,
  share: Ai,
  today: Hi,
  trash: ji,
  upload: Ti
}, Symbol.toStringTag, { value: "Module" })), Fi = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  smoothieLineIcons: Vi
}, Symbol.toStringTag, { value: "Module" }));
var nt, _e;
const at = class at extends HTMLElement {
  constructor() {
    super();
    a(this, nt);
    this.ui = {
      root: this,
      /**
       * @param {import("./ui-alert").UIAlert} alert
       */
      add(t) {
        return this.root.shadowRoot.querySelector(".alerts-container").append(t), () => this.remove(t);
      },
      /**
       * @param {import("./ui-alert").UIAlert} alert
       */
      remove(t) {
        this.root.shadowRoot.querySelector(".alerts-container").removeChild(t);
      }
    }, c(this, nt, _e).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
nt = new WeakSet(), _e = function() {
  this.classList.add("no-scrollbar"), this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                :host {
                    display: block;
                    position: fixed !important;
                    z-index: 999;
                    background: transparent;

                    overflow: auto;
                }

                ui-flex-grid {
                    padding: 0;
                }

                ui-flex-grid:has(> *) {
                    padding: var(--ui-spacing);
                }
            </style>

            <style class="position">
                :host {
                    right: 0;
                    bottom: 0;
                }
            </style>

            <style class="size">
                :host {
                    width: fit-content;
                    max-width: 100%;
                    height: fit-content;
                    max-height: 100%;
                }
            </style>

            <ui-flex-grid class="alerts-container" gap="0.25rem">
            </ui-flex-grid>
        `;
}, s(at, "register", () => {
  customElements.get("ui-alerts") || customElements.define("ui-alerts", at);
});
let It = at;
var lt, Ze;
const E = class E extends HTMLElement {
  constructor() {
    super();
    a(this, lt);
    this.flex = "1", this.ui = {
      root: this,
      get flex() {
        return this.root.flex;
      },
      set flex(t) {
        this.root.flex = t || "1";
        const i = this.root.shadowRoot.querySelector('style[name="flex"]');
        i.textContent = S`
                    :host {
                        flex: ${this.root.flex};
                    }
                `;
      }
    }, c(this, lt, Ze).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "flex":
        this.ui.flex = r;
        break;
    }
  }
};
lt = new WeakSet(), Ze = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                }
            </style>

            <style name="flex">
                :host {
                    flex: 1;
                }
            </style>

            <slot></slot>
        `;
}, s(E, "register", () => {
  customElements.get("ui-flex-grid-item") || customElements.define("ui-flex-grid-item", E);
}), s(E, "observedAttributes", ["flex"]);
let X = E;
var ct, Ge;
const A = class A extends HTMLElement {
  constructor() {
    super();
    a(this, ct);
    this.gap = "0", this.ui = {
      root: this,
      get gap() {
        return this.root.gap;
      },
      set gap(t) {
        this.root.gap = t || "0";
        const i = this.root.shadowRoot.querySelector('style[name="gap"]');
        i.textContent = S`
                    :host > ::slotted(*) {
                        margin: 0 ${this.root.gap} !important;
                    }
                `;
      },
      get justify() {
        return this.root.style.justifyContent;
      },
      set justify(t) {
        this.root.style.justifyContent = t;
      },
      get align() {
        return this.root.style.alignItems;
      },
      set align(t) {
        this.root.style.alignItems = t;
      }
    }, c(this, ct, Ge).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "gap":
        this.ui.gap = r;
        break;
      case "justify":
        this.ui.justify = r;
        break;
      case "align":
        this.ui.align = r;
        break;
    }
  }
};
ct = new WeakSet(), Ge = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex !important;
                    flex-flow: row nowrap;

                    position: relative;
                    width: 100%;
                }
            </style>

            <style name="gap">
                :host > ::slotted(*) {
                    margin: 0 0 !important;
                }
            </style>

            <style>
                :host > ::slotted(*:first-child) {
                    margin-left: 0 !important;
                }

                :host > ::slotted(*:last-child) {
                    margin-right: 0 !important;
                }
            </style>

            <slot></slot>
        `;
}, s(A, "register", () => {
  customElements.get("ui-flex-grid-row") || customElements.define("ui-flex-grid-row", A);
}), s(A, "observedAttributes", ["gap", "justify", "align"]);
let Ut = A;
var ut, ze;
const H = class H extends HTMLElement {
  constructor() {
    super();
    a(this, ut);
    this.gap = "0", this.ui = {
      root: this,
      get gap() {
        return this.root.gap;
      },
      set gap(t) {
        this.root.gap = t || "0";
        const i = this.root.shadowRoot.querySelector('style[name="gap"]');
        i.textContent = S`
                    :host > ::slotted(*) {
                        margin: ${this.root.gap} 0 !important;
                    }
                `;
      }
    }, c(this, ut, ze).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "gap":
        this.ui.gap = r;
        break;
    }
  }
};
ut = new WeakSet(), ze = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex !important;
                    flex-flow: column nowrap;

                    position: relative;
                    width: 100%;
                    height: fit-content;
                }
            </style>

            <style name="gap">
                :host > ::slotted(*) {
                    margin: 0 0 !important;
                }
            </style>

            <style>
                :host > ::slotted(*:first-child) {
                    margin-top: 0 !important;
                }

                :host > ::slotted(*:last-child) {
                    margin-bottom: 0 !important;
                }
            </style>

            <slot></slot>
        `;
}, s(H, "register", () => {
  customElements.get("ui-flex-grid") || customElements.define("ui-flex-grid", H);
}), s(H, "observedAttributes", ["gap"]);
let te = H;
var dt, Be;
const ht = class ht extends X {
  /**
   * @param {UIAlert_Options} [options]
   */
  constructor(t = null) {
    super();
    a(this, dt);
    this.styleVariants = {
      info: S`
                :host {
                    color: var(--ui-card-fg);
                    background-color: var(--ui-card);
                }
            `,
      error: S`
                :host {
                    color: var(--ui-destructive-fg);
                    background-color: var(--ui-destructive);
                }
            `
    }, this.ui = {
      ...this.ui,
      root: this,
      /**
       * @param {UIAlert_Options | null} options
       */
      set(i) {
        i && (this.message = i.message, this.variant = i.variant);
      },
      get message() {
        return this.root.shadowRoot.querySelector("ui-primary").innerHTML;
      },
      /**
       * @param {string} value
       */
      set message(i) {
        const r = this.root.shadowRoot.querySelector("ui-primary");
        r.innerHTML = i || "";
      },
      get variant() {
        return this.root.getAttribute("variant");
      },
      /**
       * @param {UIAlert_Variants} value
       */
      set variant(i) {
        if (!i) {
          this.root.removeAttribute("variant");
          return;
        }
        this.root.setAttribute("variant", i);
      }
    }, c(this, dt, Be).call(this), t && this.ui.set(t);
  }
  static get observedAttributes() {
    return ["message", "variant", ...super.observedAttributes];
  }
  connectedCallback() {
    super.connectedCallback();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (super.attributeChangedCallback(t, i, r), t) {
      case "message":
        this.ui.message = r;
        break;
      case "variant":
        if (r !== "info" && r !== "error") return;
        this.shadowRoot.querySelector("style.variant").innerHTML = this.styleVariants[r] || "";
    }
  }
};
dt = new WeakSet(), Be = function() {
  this.shadowRoot.removeChild(this.shadowRoot.querySelector("slot")), this.shadowRoot.innerHTML += n`
            <style>
                :host {
                    position: relative !important;

                    border-radius: var(--ui-radius);
                    border: 1px solid var(--ui-borderColor);

                    padding: var(--ui-spacing);

                    width: 28rem;
                    max-width: calc(100% - var(--ui-spacing) * 4);
                }
            </style>

            <style class="variant"></style>

            <ui-primary style="font-size: 0.9rem;"></ui-primary>
        `;
}, s(ht, "register", () => {
  customElements.get("ui-alert") || customElements.define("ui-alert", ht);
});
let ee = ht;
var pt, qe;
const gt = class gt extends HTMLElement {
  constructor() {
    super();
    a(this, pt);
    this.ui = {
      root: this,
      get leftSlot() {
        return [...this.root.querySelectorAll('[slot="left"]')];
      },
      get centerSlot() {
        return [...this.root.querySelectorAll('[slot="center"]')];
      },
      get rightSlot() {
        return [...this.root.querySelectorAll('[slot="right"]')];
      },
      get position() {
        return this.root.getAttribute("position");
      },
      /**
       * @param {"top" | "bottom"} value
       */
      set position(t) {
        if (!t) {
          this.root.removeAttribute("position");
          return;
        }
        this.root.setAttribute("position", t);
      }
    }, c(this, pt, qe).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
pt = new WeakSet(), qe = function() {
  this.classList.add("has-backdrop-blur"), this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    width: 100%;
                    overflow: hidden;
                    padding: calc(var(--ui-spacing) / 2);
                }

                :host([position="top"]),
                :host([position="bottom"]) {
                    z-index: 100;
                    position: absolute !important;
                    left: 0;
                    right: 0;
                    height: var(--ui-app-bar-height);
                }

                :host([position="top"]) {
                    top: 0;
                    border-bottom: 1px solid var(--ui-borderColor);
                }

                :host([position="bottom"]) {
                    bottom: 0;
                    border-top: 1px solid var(--ui-borderColor);
                }

                :host > ui-flex-grid-row {
                    width: 100%;
                    height: 100%;
                    align-items: center;
                    justify-content: space-between;
                }

                :host > ui-flex-grid-row > * {
                    height: 100%;
                }

                :host > ui-flex-grid-row > *:nth-child(1),
                :host > ui-flex-grid-row > *:nth-child(3) {
                    width: fit-content;
                }

                :host > ui-flex-grid-row > [slot="left"] {
                    margin-left: 0 !important;
                }

                :host > ui-flex-grid-row > [slot="center"] {
                    width: 100%;
                }

                :host > ui-flex-grid-row > [slot="right"] {
                    margin-right: 0 !important;
                    justify-content: flex-end;
                }
            </style>

            <ui-flex-grid-row gap="0.25rem">
                <ui-flex-grid-row gap="0.25rem">
                    <slot name="left"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row gap="0.25rem" style="overflow: hidden;">
                    <slot name="center"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row gap="0.25rem">
                    <slot name="right"></slot>
                </ui-flex-grid-row>
            </ui-flex-grid-row>
        `;
}, s(gt, "register", () => {
  customElements.get("ui-app-bar") || customElements.define("ui-app-bar", gt);
});
let ie = gt;
var ft, Oe;
const mt = class mt extends HTMLElement {
  constructor() {
    super();
    a(this, ft);
    this.ui = {
      root: this,
      /**
       * @returns {T}
       */
      get child() {
        return this.root.querySelector("*");
      },
      /**
       * @param {string | null} [value]
       */
      show(t = null) {
        this.root.style.display = t;
      },
      hide() {
        this.root.style.display = "none";
      }
    }, c(this, ft, Oe).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
ft = new WeakSet(), Oe = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    flex: 1;
                }
            </style>

            <slot></slot>
        `;
}, s(mt, "register", () => {
  customElements.get("ui-app-bar-item") || customElements.define("ui-app-bar-item", mt);
});
let re = mt;
var bt, $e;
const j = class j extends HTMLElement {
  constructor() {
    super();
    a(this, bt);
    this.ripple = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIButton_Events>}
       */
      events: new b(),
      get noripple() {
        return !this.root.ripple;
      },
      set noripple(t) {
        if (!t) {
          this.root.ripple && this.root.ripple.destroy(), this.root.ripple = L(this.root);
          return;
        }
        this.root.ripple && (this.root.ripple.destroy(), this.root.ripple = null);
      },
      get color() {
        return this.root.getAttribute("color");
      },
      /**
       * @param {UIButton_Color} value
       */
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get variant() {
        return this.root.getAttribute("variant");
      },
      /**
       * @param {UIButton_Variant} value
       */
      set variant(t) {
        if (!t) {
          this.root.removeAttribute("variant");
          return;
        }
        this.root.setAttribute("variant", t);
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, c(this, bt, $e).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "noripple":
        this.ui.noripple = r !== null;
        break;
    }
  }
};
bt = new WeakSet(), $e = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex;
                    align-items: center;
                    justify-content: center;

                    position: relative;

                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2.5);

                    outline: none;
                    border: 1px solid currentColor;
                    border-radius: var(--ui-radius);

                    user-select: none;
                    overflow: hidden;
                    cursor: pointer;

                    text-transform: capitalize;
                    font-size: 1.1rem;
                    font-weight: 450;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-button-fontVariation);
                }

                :host([variant="full"]) {
                    border: none;
                }

                :host([variant="full"][color="primary"]) {
                    background-color: var(--ui-primary);
                    color: var(--ui-primary-fg);
                }

                :host([variant="full"][color="secondary"]) {
                    background-color: var(--ui-secondary);
                    color: var(--ui-secondary-fg);
                }

                :host([variant="full"][color="destructive"]) {
                    background-color: var(--ui-destructive);
                    color: var(--ui-destructive-fg);
                }

                :host([variant="outline"]) {
                    border-color: currentColor;
                    background-color: transparent;
                }

                :host([variant="outline"][color="primary"]) {
                    color: var(--ui-primary);
                }

                :host([variant="outline"][color="secondary"]) {
                    color: var(--ui-secondary);
                }

                :host([variant="outline"][color="destructive"]) {
                    color: var(--ui-destructive);
                }

                :host([variant="ghost"]) {
                    border-color: transparent;
                    background-color: transparent;
                    font-weight: 900;
                }

                :host([variant="ghost"][color="primary"]) {
                    color: var(--ui-primary);
                }

                :host([variant="ghost"][color="secondary"]) {
                    color: var(--ui-secondary);
                }

                :host([variant="ghost"][color="destructive"]) {
                    color: var(--ui-destructive);
                }

                :host([disabled]),
                :host([disabled]:hover),
                :host([disabled]:active) {
                    background-color: transparent;
                    opacity: 0.25;
                    cursor: default;
                    pointer-events: none;
                }
            </style>

            <slot></slot>
        `, typeof this.ripple != "function" && (this.ripple = L(this)), this.addEventListener("click", () => {
    this.ui.events.dispatch("click", this);
  });
}, s(j, "register", () => {
  customElements.get("ui-button") || customElements.define("ui-button", j);
}), s(j, "observedAttributes", ["noripple"]);
let oe = j;
var vt, Fe;
const T = class T extends HTMLElement {
  constructor() {
    super();
    a(this, vt);
    this.ripple = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIIconButton_Events>}
       */
      events: new b(),
      get noripple() {
        return !this.root.ripple;
      },
      set noripple(t) {
        if (!t) {
          this.root.ripple && this.root.ripple.destroy(), this.root.ripple = L(this.root);
          return;
        }
        this.root.ripple && (this.root.ripple.destroy(), this.root.ripple = null);
      },
      get color() {
        return this.root.getAttribute("color");
      },
      /**
       * @param {UIIconButton_Color} value
       */
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get ghost() {
        return this.root.hasAttribute("ghost");
      },
      set ghost(t) {
        if (!t) {
          this.root.removeAttribute("ghost");
          return;
        }
        this.root.setAttribute("ghost", "");
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, c(this, vt, Fe).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "noripple":
        this.ui.noripple = r !== null;
        break;
    }
  }
};
vt = new WeakSet(), Fe = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    position: relative;
                    width: 2.5rem;
                    height: 2.5rem;
                    padding: calc(var(--ui-spacing) / 2);
                    border: 1px solid currentColor;
                    border-radius: var(--ui-radius);
                    outline: none;
                    overflow: hidden;
                    cursor: pointer;
                    user-select: none;
                    font-size: 1.1rem;
                    font-weight: 450;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-button-fontVariation);
                    transition: color 0.5s linear;
                }

                :host([ghost]) {
                    border-color: transparent !important;
                    box-shadow: none;
                    font-weight: 900;
                }

                :host([color="primary"]) {
                    color: var(--ui-primary);
                    border-color: var(--ui-primary);
                }

                :host([color="secondary"]) {
                    color: var(--ui-secondary);
                    border-color: var(--ui-secondary);
                }

                :host([color="destructive"]) {
                    color: var(--ui-destructive);
                    border-color: var(--ui-destructive);
                }

                /* :disabled */

                :host([disabled]),
                :host([disabled]:hover),
                :host([disabled]:active) {
                    opacity: 0.25;
                    cursor: default;
                    pointer-events: none;
                }

                ui-svg {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
            </style>

            <ui-svg>
                <slot></slot>
            </ui-svg>
        `, typeof this.ripple != "function" && (this.ripple = L(this, { centered: !0 })), this.addEventListener("click", () => {
    this.ui.events.dispatch("click", this);
  });
}, s(T, "register", () => {
  customElements.get("ui-icon-button") || customElements.define("ui-icon-button", T);
}), s(T, "observedAttributes", ["noripple"]);
let se = T;
var kt, Pe;
const yt = class yt extends HTMLElement {
  constructor() {
    super();
    a(this, kt);
    this.ui = {}, c(this, kt, Pe).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
kt = new WeakSet(), Pe = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    width: 100%;
                    max-width: 65rem;
                    margin: 0 auto !important;
                    padding: var(--ui-spacing);
                }
            </style>

            <slot></slot>
        `;
}, s(yt, "register", () => {
  customElements.get("ui-container") || customElements.define("ui-container", yt);
});
let ne = yt;
var wt, De;
const V = class V extends HTMLElement {
  /**
   * @param {string} title
   */
  constructor(t) {
    super();
    a(this, wt);
    this._title = t || "", this.ui = {
      root: this,
      /** @type {Events<T>} */
      events: new b(),
      get title() {
        return this.root.shadowRoot.querySelector('[name="title"]').innerHTML;
      },
      set title(i) {
        const r = this.root.shadowRoot.querySelector('[name="title"]');
        this.root._title = r.innerHTML = i || "";
      },
      get fullscreen() {
        return this.root.hasAttribute("fullscreen");
      },
      set fullscreen(i) {
        if (!i) {
          this.root.removeAttribute("fullscreen");
          return;
        }
        this.root.setAttribute("fullscreen", "");
      },
      get nofooter() {
        return this.root.hasAttribute("nofooter");
      },
      set nofooter(i) {
        if (!i) {
          this.root.removeAttribute("nofooter");
          return;
        }
        this.root.setAttribute("nofooter", "");
      },
      /**
       * @param {boolean} modal
       * @param {boolean} [inert] - This will prevent the autofocus on input elements (default: true)
       */
      open(i = !1, r = !0) {
        const u = this.root.shadowRoot.querySelector("dialog"), h = u.inert;
        u.inert = r, i ? u.showModal() : u.show(), this.events.dispatch("open", null), u.inert = h;
      },
      close() {
        this.events.dispatch("close", null), this.root.shadowRoot.querySelector("dialog").close();
      }
    }, c(this, wt, De).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
    }
  }
  /**
   * @param {object} options
   * @param {string} [options.variant]
   * @param {string} [options.color]
   * @param {string} [options.flex]
   * @param {(() => void|Promise<void>) | null} [options.onClick]
   */
  static createAction({
    variant: t = "full",
    color: i = "primary",
    flex: r = "0",
    onClick: u = null
  }) {
    const h = new X();
    h.ui.flex = r, h.slot = "actions", h.innerHTML = n`
            <ui-button variant="${t}" color="${i}"></ui-button>
        `;
    let d;
    return u && (d = h.querySelector("ui-button"), d.ui.events.on("click", u)), {
      container: h,
      action: d
    };
  }
};
wt = new WeakSet(), De = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                dialog {
                    z-index: 998; /* UIAlerts z-index is 999 */

                    position: fixed !important;
                    top: 50%;
                    left: 50%;

                    max-width: 100%;
                    max-height: 100%;

                    margin: 0;
                    padding: 0;

                    border: none;
                    outline: none;

                    background-color: transparent;

                    transform: translate(-50%, -50%);
                }

                dialog::backdrop {
                    background-color: var(--ui-backdrop);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                }

                dialog > .container {
                    background-color: var(--ui-bg);
                    color: var(--ui-color);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    padding: var(--ui-spacing);

                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;

                    position: relative;
                }

                :host([fullscreen]) dialog {
                    width: 100%;
                    height: 100%;
                }

                :host([fullscreen]) dialog > .container {
                    width: calc(100% - var(--ui-spacing) * 2);
                    height: calc(
                        100% -
                            (
                                env(safe-area-inset-top, 0) +
                                    env(safe-area-inset-bottom, 0) +
                                    (var(--ui-spacing) * 2)
                            )
                    );

                    margin: var(--ui-spacing);
                    margin-top: calc(
                        env(safe-area-inset-top, 0) + var(--ui-spacing)
                    );
                    margin-bottom: calc(
                        env(safe-area-inset-bottom, 0) + var(--ui-spacing)
                    );
                }

                /*
                 * Header Styles
                 */

                .header {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;

                    border-top-right-radius: var(--ui-radius);
                    border-top-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-header-height);
                }

                .header [name="title"] {
                    margin: auto 0;
                }

                :host([fullscreen]) .header {
                    z-index: 15;
                    position: absolute;
                    top: var(--ui-spacing);
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                /*
                 * Content Styles
                 */

                .content {
                    padding: var(--ui-spacing);
                    height: fit-content;
                    min-width: fit-content;
                    width: 100%;
                }

                :host([fullscreen]) .content {
                    z-index: 10;
                    position: absolute;
                    top: calc(
                        var(--ui-dialog-header-height) + var(--ui-spacing)
                    );
                    bottom: calc(
                        var(--ui-dialog-footer-height) + var(--ui-spacing)
                    );
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    padding: unset;
                    height: unset;
                    width: unset;
                    min-width: unset;
                }

                :host([nofooter]) .content {
                    bottom: var(--ui-spacing);
                }

                /*
                 * Footer Styles
                 */

                .footer {
                    margin-top: var(--ui-spacing);
                    border-bottom-right-radius: var(--ui-radius);
                    border-bottom-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-footer-height);
                }

                :host([fullscreen]) .footer {
                    z-index: 15;
                    position: absolute;
                    right: var(--ui-spacing);
                    bottom: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                .footer ui-flex-grid-row {
                    height: 100%;
                    flex-wrap: nowrap;
                    justify-content: flex-end;
                    align-items: center;
                }

                :host([nofooter]) .footer {
                    display: none;
                }
            </style>

            <dialog class="no-scrollbar">
                <div class="container">
                    <div class="header">
                        <span style="white-space: nowrap;">
                            <h3 name="title"></h3>
                        </span>

                        <ui-icon-button
                            style="width: var(--ui-dialog-header-height); height: 100%;"
                            ghost
                        >
                            ${Te}
                        </ui-icon-button>
                    </div>

                    <div class="content">
                        <slot></slot>
                    </div>

                    <div class="footer">
                        <ui-flex-grid-row gap="calc(var(--ui-spacing) / 2)">
                            <slot name="actions"></slot>
                        </ui-flex-grid-row>
                    </div>
                </div>
            </dialog>
        `, this.ui.title = this._title;
  const t = this.shadowRoot.querySelector(".header ui-icon-button"), i = () => this.ui.close();
  t.addEventListener("click", i);
  const r = this.shadowRoot.querySelector("dialog"), u = (h) => h.preventDefault();
  r.addEventListener("cancel", u);
}, s(V, "register", () => {
  customElements.get("ui-dialog") || customElements.define("ui-dialog", V);
}), s(V, "observedAttributes", ["title"]);
let ae = V;
var Ct, Ye;
const xt = class xt extends HTMLElement {
  constructor() {
    super();
    a(this, Ct);
    this.ui = {
      root: this,
      /**
       * @type {Events<UIDrawer_Events>}
       */
      events: new b(),
      get open() {
        return this.root.hasAttribute("open");
      },
      set open(t) {
        if (!t) {
          this.root.removeAttribute("open"), this.events.dispatch("close", this.root);
          return;
        }
        history.pushState(null, "ui-drawer", location.href), this.root.setAttribute("open", ""), this.events.dispatch("open", this.root);
      }
    }, c(this, Ct, Ye).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
};
Ct = new WeakSet(), Ye = function() {
  this.classList.add("has-backdrop-blur"), this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;

                    position: absolute !important;
                    z-index: 150;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;

                    overflow: hidden;

                    transition: left 0s ease 0.5s;
                }

                :host([open]) {
                    left: 0;
                    transition: none;
                }

                aside {
                    position: absolute;
                    z-index: 150;
                    top: 0;
                    left: -100%;
                    width: var(--ui-drawer-width, fit-content);
                    max-width: calc(100% - 2.5rem);
                    height: 100%;

                    overflow-x: hidden;
                    overflow-y: auto;

                    border-right: 1px solid var(--ui-card-borderColor);

                    transition: left 0.5s ease;
                }

                :host([open]) aside {
                    left: 0;
                }
            </style>

            <aside class="has-backdrop-blur no-scrollbar">
                <slot></slot>
            </aside>
        `, this.shadowRoot.querySelector("aside").addEventListener("click", (t) => t.stopPropagation()), this.addEventListener("click", () => this.ui.open = !1);
}, s(xt, "register", () => {
  customElements.get("ui-drawer") || customElements.define("ui-drawer", xt);
});
let le = xt;
var Lt, Xe;
const _ = class _ extends HTMLElement {
  constructor() {
    super();
    a(this, Lt);
    this.ui = {
      root: this,
      get title() {
        return this.root.shadowRoot.querySelector(".title").innerHTML;
      },
      set title(t) {
        let i = this.root.shadowRoot.querySelector(".title");
        if (!t) {
          i.classList.remove("visible");
          return;
        }
        i.classList.add("visible"), i.innerHTML = n` <h3>${t}</h3> `;
      },
      get fold() {
        return this.root.hasAttribute("fold");
      },
      set fold(t) {
        if (!t) {
          this.root.removeAttribute("fold");
          return;
        }
        this.root.setAttribute("fold", "");
      },
      get nofold() {
        return this.root.hasAttribute("nofold");
      },
      set nofold(t) {
        if (!t) {
          this.root.removeAttribute("nofold");
          return;
        }
        this.root.setAttribute("nofold", "");
      }
    }, c(this, Lt, Xe).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
    }
  }
};
Lt = new WeakSet(), Xe = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                ul {
                    margin: 0;
                    list-style: none;
                    padding: var(--ui-spacing);
                    overflow: hidden;
                }

                ui-drawer-group-item {
                    display: flex;
                    cursor: pointer;
                }

                .title:not(.visible) {
                    display: none;
                }

                .icon {
                    transition: transform 0.25s ease;
                }

                :host([fold]) .icon {
                    transform: rotate(-90deg);
                }

                :host([fold]):host(:not([nofold])) ::slotted(*) {
                    display: none !important;
                }

                :host([nofold]) ui-drawer-group-item:nth-child(1) {
                    display: none;
                }
            </style>

            <ul>
                <ui-drawer-group-item
                    style="position: relative; border-radius: var(--ui-radius);"
                    role="button"
                >
                    <ui-flex-grid-row>
                        <ui-flex-grid-item class="title"></ui-flex-grid-item>

                        <ui-flex-grid-item class="icon" flex="0">
                            <ui-svg style="width: 2.5rem; height: 2.5rem;">
                                ${Se}
                            </ui-svg>
                        </ui-flex-grid-item>
                    </ui-flex-grid-row>
                </ui-drawer-group-item>

                <slot></slot>
            </ul>
        `;
  const t = this.shadowRoot.querySelector("ui-drawer-group-item");
  t.addEventListener("click", () => {
    this.ui.fold = !this.ui.fold;
  }), L(t);
}, s(_, "register", () => {
  customElements.get("ui-drawer-group") || customElements.define("ui-drawer-group", _);
}), s(_, "observedAttributes", ["title"]);
let ce = _;
var Mt, Ne;
const St = class St extends HTMLElement {
  constructor() {
    super();
    a(this, Mt);
    this.ui = {}, c(this, Mt, Ne).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
Mt = new WeakSet(), Ne = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    width: 100%;
                }

                li {
                    display: flex;
                    flex-direction: row;
                    flex-wrap: nowrap;

                    width: 100%;

                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 1.5);
                }

                ::slotted(*) {
                    width: 100%;
                }
            </style>

            <li>
                <slot></slot>
            </li>
        `;
}, s(St, "register", () => {
  customElements.get("ui-drawer-group-item") || customElements.define("ui-drawer-group-item", St);
});
let ue = St;
var Rt, Je;
const Z = class Z extends HTMLElement {
  constructor() {
    super();
    a(this, Rt);
    this.ui = {
      /** @type {Events<E>} */
      events: new b(),
      /**
       * @type {HTMLInputElement | null}
       */
      input: null,
      get checked() {
        return this.input.checked;
      },
      set checked(t) {
        this.input.checked = t;
      }
    }, c(this, Rt, Je).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "checked":
        this.ui.checked = r !== null;
        break;
    }
  }
  click() {
    this.ui.input.click();
  }
};
Rt = new WeakSet(), Je = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                input {
                    --ui-bg: "transparent";

                    display: inline-block;

                    height: 1.5rem;
                    width: 1.5rem;

                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);

                    border: 1px solid var(--ui-primary);
                    border-radius: var(--ui-radius);

                    accent-color: var(--ui-primary);
                    color: var(--ui-fg);
                    background-color: var(--ui-bg);

                    box-shadow: none;
                    outline: none;
                    cursor: pointer;

                    transition: border-color 0.25s linear;
                }

                input:disabled {
                    cursor: default;
                    user-select: none;
                }
            </style>

            <input slot="input" type="checkbox"></input>
        `, this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.onchange = () => {
    this.ui.events.dispatch("change", this.ui.checked);
  }, this.ui.input.oninput = () => {
    this.ui.events.dispatch("input", this.ui.checked);
  };
}, s(Z, "register", () => {
  customElements.get("ui-check") || customElements.define("ui-check", Z);
}), s(Z, "observedAttributes", ["checked"]);
let de = Z;
var J, K, Q, W, I, U, tt, et, it, rt, y, Ke, x;
const G = class G extends HTMLElement {
  constructor() {
    super();
    a(this, y);
    a(this, J, 1);
    a(this, K, p(this, J));
    a(this, Q, 0);
    a(this, W, p(this, Q));
    a(this, I, 0);
    a(this, U, p(this, I));
    a(this, tt, "var(--ui-fontSize)");
    a(this, et, p(this, tt));
    a(this, it, "var(--ui-fontFamily)");
    a(this, rt, p(this, it));
    this.ui = {
      root: this,
      get casl() {
        return p(this.root, K);
      },
      set casl(t) {
        var i;
        t === null && (t = p(this.root, J)), M(this.root, K, t), c(i = this.root, y, x).call(i);
      },
      get mono() {
        return p(this.root, W);
      },
      set mono(t) {
        var i;
        t === null && (t = p(this.root, Q)), M(this.root, W, t), c(i = this.root, y, x).call(i);
      },
      get slnt() {
        return p(this.root, U);
      },
      set slnt(t) {
        var i;
        t === null && (t = p(this.root, I)), M(this.root, U, t), c(i = this.root, y, x).call(i);
      },
      get size() {
        return p(this.root, et);
      },
      set size(t) {
        var i;
        t === null && (t = p(this.root, tt)), M(this.root, et, t), c(i = this.root, y, x).call(i);
      },
      get family() {
        return p(this.root, rt);
      },
      set family(t) {
        var i;
        t === null && (t = p(this.root, it)), M(this.root, rt, t), c(i = this.root, y, x).call(i);
      }
    }, c(this, y, Ke).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "casl":
        this.ui.casl = parseInt(r, 10);
        break;
      case "mono":
        this.ui.mono = parseInt(r, 10);
        break;
      case "slnt":
        this.ui.slnt = parseInt(r, 10);
        break;
      case "size":
        this.ui.size = r;
        break;
      case "family":
        this.ui.family = r;
        break;
    }
  }
};
J = new WeakMap(), K = new WeakMap(), Q = new WeakMap(), W = new WeakMap(), I = new WeakMap(), U = new WeakMap(), tt = new WeakMap(), et = new WeakMap(), it = new WeakMap(), rt = new WeakMap(), y = new WeakSet(), Ke = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                :host {
                    display: inline-block;
                    overflow-wrap: anywhere;
                }
            </style>

            <style class="custom"></style>

            <slot></slot>
        `, c(this, y, x).call(this);
}, x = function() {
  const t = this.shadowRoot.querySelector("style.custom");
  t.innerHTML = S`
            :host {
                font-size: ${this.ui.size};
                font-family: ${this.ui.family};
                font-variation-settings:
                    "CASL" ${this.ui.casl},
                    "MONO" ${this.ui.mono},
                    "slnt" ${this.ui.slnt};
            }
        `;
}, s(G, "register", () => {
  customElements.get("ui-text") || customElements.define("ui-text", G);
}), s(G, "observedAttributes", ["casl", "mono", "slnt", "size", "family"]);
let st = G;
var Et, Qe;
const z = class z extends HTMLElement {
  constructor() {
    super();
    a(this, Et);
    this.ripple = null, this.running = !1, this.onClick = async () => {
      this.ui.inputSlot.forEach(
        (t) => t.click()
      );
    }, this.onInputClick = async (t) => {
      t.stopPropagation();
    }, this.ui = {
      root: this,
      get ripple() {
        return this.root.running;
      },
      set ripple(t) {
        if (!t) {
          this.root.disableRipple();
          return;
        }
        this.root.enableRipple();
      },
      get primary() {
        return this.root.shadowRoot.querySelector("ui-primary").innerHTML;
      },
      set primary(t) {
        this.root.shadowRoot.querySelector("ui-primary").innerHTML = t || "";
      },
      get secondary() {
        return this.root.shadowRoot.querySelector("ui-secondary").innerHTML;
      },
      set secondary(t) {
        this.root.shadowRoot.querySelector("ui-secondary").innerHTML = t || "";
      },
      get inputSlot() {
        return [...this.root.querySelectorAll('[slot="input"]')];
      }
    }, c(this, Et, Qe).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "ripple":
        this.ui.ripple = r !== null;
        break;
      case "primary":
        this.ui.primary = r;
        break;
      case "secondary":
        this.ui.secondary = r;
        break;
    }
  }
  enableRipple() {
    if (this.ripple || (this.ripple = L(this), this.style.cursor = "pointer", this.running)) return;
    this.addEventListener("click", this.onClick), [...this.querySelectorAll('[slot="input"]')].forEach((i) => {
      i.addEventListener("click", this.onInputClick);
    }), this.running = !0;
  }
  disableRipple() {
    this.running && (this.ripple && this.ripple.destroy(), this.removeEventListener("click", this.onClick), this.ui.inputSlot.forEach((t) => {
      t.removeEventListener("click", this.onInputClick);
    }), this.running = !1);
  }
};
Et = new WeakSet(), Qe = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex !important;
                    flex-direction: row;

                    position: relative;
                    width: 100%;

                    padding: var(--ui-spacing);

                    border-radius: var(--ui-radius);
                }

                :host > .text {
                    flex: 1;

                    margin-right: var(--ui-spacing);
                }
            </style>

            <span class="text flex column justify-center">
                <ui-primary></ui-primary>
                <ui-secondary></ui-secondary>
            </span>

            <span class="input flex align-center justify-end">
                <slot name="input"></slot>
                <slot></slot>
            </span>
        `;
}, s(z, "register", () => {
  customElements.get("ui-label") || customElements.define("ui-label", z);
}), s(z, "observedAttributes", ["ripple", "secondary", "primary"]);
let he = z;
var At, We;
const Ht = class Ht extends st {
  constructor() {
    super();
    a(this, At);
    c(this, At, We).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
At = new WeakSet(), We = function() {
  this.ui.size = "1.1rem", this.ui.casl = 1, this.ui.mono = 0, this.ui.slnt = 0;
}, s(Ht, "register", () => {
  customElements.get("ui-primary") || customElements.define("ui-primary", Ht);
});
let pe = Ht;
var jt, Ie;
const Tt = class Tt extends st {
  constructor() {
    super();
    a(this, jt);
    c(this, jt, Ie).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
jt = new WeakSet(), Ie = function() {
  this.ui.size = "0.9rem", this.ui.casl = 1, this.ui.mono = 0, this.ui.slnt = -15;
}, s(Tt, "register", () => {
  customElements.get("ui-secondary") || customElements.define("ui-secondary", Tt);
});
let R = Tt;
var Vt, Ue;
const B = class B extends HTMLElement {
  constructor() {
    super();
    a(this, Vt);
    this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new b(),
      /** @type {HTMLInputElement | null} */
      input: null,
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        let i = this.root.querySelector('[slot="title"]');
        !t && i && this.root.removeChild(i), t && (i || (i = new R(), i.slot = "title", this.root.appendChild(i)), i.innerHTML = t);
      },
      get type() {
        return this.input.type;
      },
      set type(t) {
        this.input.type = t || "";
      },
      get value() {
        return this.input.value;
      },
      set value(t) {
        this.input.value = t;
      },
      get placeholder() {
        return this.input.placeholder;
      },
      set placeholder(t) {
        this.input.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get min() {
        return this.input.min;
      },
      set min(t) {
        this.input.min = t;
      },
      get max() {
        return this.input.max;
      },
      set max(t) {
        this.input.max = t;
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      }
    }, c(this, Vt, Ue).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
      case "type":
        this.ui.type = r;
        break;
      case "value":
        this.ui.value = r;
        break;
      case "placeholder":
        this.ui.placeholder = r;
        break;
      case "invalid":
        this.ui.input.ariaInvalid = r !== null ? "" : null;
        break;
      case "min":
        this.ui.min = r;
        break;
      case "max":
        this.ui.max = r;
        break;
    }
  }
};
Vt = new WeakSet(), Ue = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;

                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                input {
                    display: block;

                    width: 100%;

                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);

                    accent-color: var(--ui-primary);
                    background-color: transparent;

                    outline: none !important;
                    border: none !important;
                    border-radius: inherit;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                }

                .container {
                    width: 100%;

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    transition: border-color 0.25s linear;
                }

                .container:has(input:focus) {
                    border-color: var(--ui-primary);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }
            </style>

            <div class="container">
                <slot name="title"></slot>
                <input />
            </div>
        `, this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = this.getAttribute("type") || "text", this.ui.input.oninput = () => {
    this.ui.events.dispatch("input", this.ui.input.value);
  }, this.ui.input.onchange = () => {
    this.ui.events.dispatch("change", this.ui.input.value);
  };
}, s(B, "register", () => {
  customElements.get("ui-input") || customElements.define("ui-input", B);
}), s(B, "observedAttributes", [
  "title",
  "type",
  "value",
  "placeholder",
  "invalid",
  "min",
  "max"
]);
let ge = B;
var _t, ti;
const q = class q extends HTMLElement {
  constructor() {
    super();
    a(this, _t);
    this.storagekey = "", this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new b(),
      /** @type {HTMLInputElement | null} */
      input: null,
      /** @type {import("../ui-button").UIIconButton} */
      submit: this.querySelector('[name="submit"]'),
      get title() {
        return this.root.querySelector('[slot="title"]').innerHTML;
      },
      set title(t) {
        let i = this.root.querySelector('[slot="title"]');
        !t && i && this.root.removeChild(i), t && (i || (i = new R(), i.slot = "title", this.root.appendChild(i)), i.innerHTML = t);
      },
      get value() {
        return this.input.value;
      },
      set value(t) {
        this.input.value = t;
      },
      get placeholder() {
        return this.input.placeholder;
      },
      set placeholder(t) {
        this.input.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get nosubmit() {
        return this.submit.style.display === "none";
      },
      set nosubmit(t) {
        if (!t) {
          this.submit.style.display = null;
          return;
        }
        this.submit.style.display = "none";
      },
      get storage() {
        return this.root.hasAttribute("storage");
      },
      set storage(t) {
        if (!t) {
          this.root.removeAttribute("storage");
          return;
        }
        this.root.setAttribute("storage", "");
      },
      get storageprefix() {
        return this.root.getAttribute("storageprefix");
      },
      set storageprefix(t) {
        if (!t) {
          this.root.removeAttribute("storageprefix");
          return;
        }
        this.root.setAttribute("storageprefix", t);
      },
      get storagekey() {
        return this.root.storagekey;
      },
      set storagekey(t) {
        this.root.storagekey = t, this.storage && (this.value = localStorage.getItem(
          this.storageprefix + this.root.storagekey
        ) || "", this.events.dispatch("storage", this.value));
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      }
    }, c(this, _t, ti).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
      case "value":
        this.ui.value = r;
        break;
      case "placeholder":
        this.ui.placeholder = r;
        break;
      case "invalid":
        this.ui.input.ariaInvalid = r !== null ? "" : null;
        break;
      case "nosubmit":
        this.ui.nosubmit = r !== null;
        break;
      case "storagekey":
        this.ui.storagekey = r;
        break;
    }
  }
};
_t = new WeakSet(), ti = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;

                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                input {
                    display: block;

                    width: 100%;

                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);

                    accent-color: var(--ui-primary);
                    background-color: transparent;

                    outline: none;
                    border: none;
                    border-radius: inherit;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                }

                :host(:not([nosubmit])) input {
                    width: calc(100% - 2rem);
                }

                .container {
                    position: relative;
                    width: 100%;

                    border: none;
                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    transition: border-color 0.25s linear;
                }

                .container:has(input:focus) {
                    border-color: var(--ui-primary);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }

                ui-icon-button {
                    position: absolute;
                    top: 0;
                    right: 0;
                    height: 100%;

                    border-top-left-radius: 0;
                    border-bottom-left-radius: 0;
                }
            </style>

            <div class="container has-backdrop-blur">
                <slot name="title"></slot>
                <input type="search" />
                <ui-icon-button name="submit" ghost
                    >${Ve}</ui-icon-button
                >
            </div>
        `, this.ui.submit = this.shadowRoot.querySelector('[name="submit"]'), this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = "search", this.ui.input.addEventListener("keydown", async (i) => {
    this.ui.nosubmit || i.key === "Enter" && this.ui.submit.click();
  });
  let t = null;
  this.ui.input.addEventListener("input", async () => {
    this.ui.storage && (t !== null && clearTimeout(t), t = setTimeout(() => {
      localStorage.setItem(
        this.ui.storageprefix + this.ui.storagekey,
        this.ui.input.value
      ), t = null;
    }, 250)), this.ui.events.dispatch("input", this.ui.input.value);
  }), this.shadowRoot.querySelector("ui-icon-button").addEventListener("click", () => {
    this.ui.events.dispatch("submit", this.ui.input.value);
  });
}, s(q, "register", () => {
  customElements.get("ui-search") || customElements.define("ui-search", q);
}), s(q, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "nosubmit",
  "storagekey"
]);
let fe = q;
var Zt, ei;
const Gt = class Gt extends HTMLElement {
  constructor() {
    super();
    a(this, Zt);
    this.ui = {
      root: this,
      get value() {
        return this.root.getAttribute("value");
      },
      set value(t) {
        if (!t) {
          this.root.removeAttribute("value");
          return;
        }
        this.root.setAttribute("value", t);
      },
      get selected() {
        return this.root.hasAttribute("selected");
      },
      set selected(t) {
        if (!t) {
          this.root.removeAttribute("selected");
          return;
        }
        this.root.setAttribute("selected", "");
      }
    }, c(this, Zt, ei).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
};
Zt = new WeakSet(), ei = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                :host {
                    display: none;
                    align-items: center;

                    padding: var(--ui-spacing);
                    padding-right: 2.5rem;

                    height: calc(
                        1em * var(--ui-lineHeight) + var(--ui-spacing) * 2
                    );

                    white-space: nowrap;
                    text-overflow: ellipsis;

                    overflow: hidden;

                    transition:
                        background-color 0.25s linear,
                        color 0.25s linear;
                }
            </style>

            <slot></slot>
        `;
}, s(Gt, "register", () => {
  customElements.get("ui-select-option") || customElements.define("ui-select-option", Gt);
});
let N = Gt;
var zt, ii;
const O = class O extends HTMLElement {
  constructor() {
    super();
    a(this, zt);
    this.open = !1, this.ui = {
      root: this,
      /**
       *  @type {Events<UISelect_Events>}
       */
      events: new b(),
      get open() {
        return this.root.open;
      },
      set open(t) {
        this.root.open = t, t ? this.root.setAttribute("open", "") : this.root.removeAttribute("open"), this.root.style.setProperty(
          "--items-length",
          `${this.root.children.length || 1}`
        );
      },
      /**
       * @returns {UISelectOption[]}
       */
      options() {
        return [...this.root.children].filter(
          (t) => t instanceof N
        );
      },
      /**
       * @returns {UISelectOption | null}
       */
      selected() {
        try {
          return this.options().find(
            (t) => t.ui.selected
          ) || null;
        } catch {
          return null;
        }
      }
    }, c(this, zt, ii).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} n
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "open":
        const u = r !== null;
        u !== this.ui.open && (this.ui.open = u);
        break;
    }
  }
};
zt = new WeakSet(), ii = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    --ui-bg: "transparent";

                    position: relative !important;
                    display: block !important;

                    width: 100%;
                    height: calc(
                        1em * var(--ui-lineHeight) + var(--ui-spacing) * 2
                    );
                    transition: height 0.25s ease;

                    background-color: var(--ui-bg);
                    color: var(--ui-fg);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    line-height: 1.15;

                    overflow: hidden;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-select-fontVariation);
                }

                .options {
                    cursor: pointer;
                    display: none;
                    display: flex;
                    flex-direction: column;
                    min-height: 100%;
                }

                .icon {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 2.5rem;
                    height: 100%;
                    color: var(--ui-primary);
                }

                ::slotted(ui-select-option) {
                    display: flex;
                }

                :host([open]) {
                    height: calc(
                        (1em * var(--ui-lineHeight) + var(--ui-spacing) * 2) *
                            var(--items-length)
                    );
                }

                :host([open]) .options {
                    display: block;
                }

                :host([open]) .icon {
                    display: none;
                }

                :host([open]) ::slotted(ui-select-option[selected]) {
                    background-color: var(--ui-primary);
                    color: var(--ui-primary-fg);
                }

                :host([open])
                    ::slotted(ui-select-option:not([selected]):hover) {
                    background-color: hsla(
                        var(--ui-fg-h),
                        var(--ui-fg-s),
                        var(--ui-fg-l),
                        0.1
                    );
                }

                :host(:not([open]))
                    .options:has(> ::slotted(ui-select-option[selected])) {
                    display: block;
                }

                :host(:not([open]))
                    ::slotted(ui-select-option:not([selected])) {
                    display: none;
                }
            </style>

            <div class="options">
                <div class="icon"><ui-svg>${Se}</ui-svg></div>

                <slot></slot>
            </div>
        `;
  const t = (r) => {
    const u = async (h) => {
      (h.composedPath() || []).forEach((d) => {
        d instanceof N && ([...this.querySelectorAll("ui-select-option")].forEach(
          (m) => m.removeAttribute("selected")
        ), d.setAttribute("selected", ""), this.ui.events.dispatch("change", d));
      });
    };
    this.ui.open = !this.ui.open, this.ui.open ? (r.stopPropagation(), this.addEventListener("click", u)) : setTimeout(
      () => this.removeEventListener("click", u)
    );
  };
  this.shadowRoot.querySelector(".options").addEventListener("click", t);
}, s(O, "register", () => {
  customElements.get("ui-select") || customElements.define("ui-select", O);
}), s(O, "observedAttributes", ["open"]);
let me = O;
var Bt, ri;
const $ = class $ extends HTMLElement {
  constructor() {
    super();
    a(this, Bt);
    this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new b(),
      /** @type {HTMLTextAreaElement | null} */
      textarea: null,
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        let i = this.root.querySelector('[slot="title"]');
        !t && i && this.root.removeChild(i), t && (i || (i = new R(), i.slot = "title", this.root.appendChild(i)), i.innerHTML = t);
      },
      get value() {
        return this.textarea.value;
      },
      set value(t) {
        this.textarea.value = t;
      },
      get placeholder() {
        return this.textarea.placeholder;
      },
      set placeholder(t) {
        this.textarea.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get rows() {
        return this.textarea.rows;
      },
      set rows(t) {
        this.textarea.rows = t;
      },
      get cols() {
        return this.textarea.cols;
      },
      set cols(t) {
        this.textarea.cols = t;
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("textarea").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("textarea").blur();
      }
    }, c(this, Bt, ri).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
      case "value":
        this.ui.value = r;
        break;
      case "placeholder":
        this.ui.placeholder = r;
        break;
      case "invalid":
        this.ui.textarea.ariaInvalid = r !== null ? "" : null;
        break;
      case "rows":
        this.ui.rows = r !== null ? parseFloat(r) : null;
        break;
      case "cols":
        this.ui.cols = r !== null ? parseFloat(r) : null;
        break;
    }
  }
};
Bt = new WeakSet(), ri = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                textarea {
                    resize: none;
                    width: 100%;
                    display: block;
                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
                    border: none !important;
                    border-radius: inherit;
                    outline: none !important;
                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                    accent-color: var(--ui-primary);
                    background-color: transparent !important;
                }

                .container {
                    width: 100%;
                    height: 100%;
                    border: none;
                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);
                    transition: border-color 0.25s linear;
                }

                .container:has(textarea:focus) {
                    border-color: var(--ui-primary);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }
            </style>

            <div class="container">
                <slot name="title"></slot>
                <textarea></textarea>
            </div>
        `, this.ui.textarea = this.shadowRoot.querySelector("textarea"), this.ui.textarea.oninput = () => {
    this.ui.events.dispatch("input", this.ui.textarea.value);
  }, this.ui.textarea.onchange = () => {
    this.ui.events.dispatch("change", this.ui.textarea.value);
  };
}, s($, "register", () => {
  customElements.get("ui-textarea") || customElements.define("ui-textarea", $);
}), s($, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "rows",
  "cols"
]);
let be = $;
const F = class F extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      /**
       * @type {{
       *  [key: string]: {
       *      [key: string]: string;
       *  };
       * }}
       */
      data: {},
      /**
       * @type {Events<{ "change": import(".").UILangType}>}
       */
      events: new b(),
      get current() {
        return this.root.getAttribute("current");
      },
      set current(e) {
        this.root.setCurrent(e || "");
      },
      /** @returns {import(".").UILangType} */
      fallback() {
        return this.root.querySelector("ui-lang-type[fallback]");
      },
      /**
       * @param {string} group
       * @param {string} key
       */
      get(e, t) {
        var i, r;
        return ((r = (i = this.data) == null ? void 0 : i[e]) == null ? void 0 : r[t]) || null;
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "current":
        this.ui.current = i;
        break;
    }
  }
  /**
   * @private
   * @param {string} name
   */
  async setCurrent(e) {
    const t = this.querySelector(`ui-lang-type[name="${e}"]`) || this.ui.fallback();
    if (t) {
      if (!t.ui.href) throw "Missing href attribute!";
      try {
        this.ui.data = await (await fetch(t.ui.href)).json();
      } catch (i) {
        console.error(i);
      }
      this.ui.events.dispatch("change", t);
    }
  }
};
s(F, "register", () => {
  customElements.get("ui-lang") || customElements.define("ui-lang", F);
}), s(F, "observedAttributes", ["current"]);
let ve = F;
const qt = class qt extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      get name() {
        return this.root.getAttribute("name");
      },
      set name(e) {
        if (!e) {
          this.root.removeAttribute("name");
          return;
        }
        this.root.setAttribute("name", e);
      },
      get href() {
        return this.root.getAttribute("href");
      },
      set href(e) {
        if (!e) {
          this.root.removeAttribute("href");
          return;
        }
        this.root.setAttribute("href", e);
      },
      get fallback() {
        return this.root.hasAttribute("fallback");
      },
      set fallback(e) {
        if (!e) {
          this.root.removeAttribute("fallback");
          return;
        }
        this.root.setAttribute("fallback", "");
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(qt, "register", () => {
  customElements.get("ui-lang-type") || customElements.define("ui-lang-type", qt);
});
let ke = qt;
var Ot, oi;
const P = class P extends HTMLElement {
  constructor() {
    super();
    a(this, Ot);
    this.ui = {
      root: this,
      get nobg() {
        return this.root.hasAttribute("nobg");
      },
      set nobg(t) {
        const i = this.root.shadowRoot.querySelector(".background");
        if (!t) {
          i.style.display = null;
          return;
        }
        i.style.display = "none";
      }
    }, c(this, Ot, oi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "nobg":
        this.ui.nobg = r !== null;
        break;
    }
  }
};
Ot = new WeakSet(), oi = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                :host {
                    position: absolute !important;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                }

                .background {
                    z-index: 999;
                    position: absolute !important;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                }

                .spinner {
                    content: "";
                    box-sizing: border-box;

                    z-index: 1000;
                    position: absolute !important;
                    top: 50%;
                    left: 50%;
                    width: 2.5rem;
                    height: 2.5rem;

                    margin-top: -1.25rem;
                    margin-left: -1.25rem;

                    border: 2px solid var(--ui-borderColor);
                    border-top-color: var(--ui-primary);
                    border-radius: 50%;

                    animation: spinner 0.6s linear infinite;
                }

                @keyframes spinner {
                    to {
                        transform: rotate(360deg);
                    }
                }
            </style>

            <div class="background has-backdrop-blur"></div>
            <div class="spinner"></div>
        `;
}, s(P, "register", () => {
  customElements.get("ui-spinner") || customElements.define("ui-spinner", P);
}), s(P, "observedAttributes", ["nobg"]);
let ye = P;
var $t, si;
const D = class D extends HTMLElement {
  /**
   * @param {string} name
   */
  constructor(t) {
    super();
    a(this, $t);
    this._name = t, this.ui = {
      root: this,
      get name() {
        return this.root._name;
      },
      set name(i) {
        this.name = i || "";
      }
    }, c(this, $t, si).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} n
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "name":
        this.ui.name = r;
        break;
    }
  }
};
$t = new WeakSet(), si = function() {
  this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = n`
            <style>
                :host {
                    display: block !important;
                    position: absolute !important;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    opacity: 0;
                    animation: fade-in 0.5s;
                    transition: opacity 0.5s ease;
                }

                :host(:last-child) {
                    opacity: 1;
                }

                @keyframes fade-in {
                    0% {
                        opacity: 0;
                    }
                    100% {
                        opacity: 1;
                    }
                }
            </style>

            <slot></slot>
        `;
}, s(D, "register", () => {
  customElements.get("ui-stack-layout-page") || customElements.define("ui-stack-layout-page", D);
}), s(D, "observedAttributes", ["name"]);
let we = D;
var Ft, ni;
const Pt = class Pt extends HTMLElement {
  constructor() {
    super();
    a(this, Ft);
    this.pages = {}, this.stack = [], this.onpopstate = () => this.goBack(), this.ui = {
      root: this,
      /**
       * @type {Events<{
       *  "change": {
       *      oldPage: UIStackLayoutPage | null,
       *      newPage: UIStackLayoutPage | null
       *  }
       * }>}
       */
      events: new b(),
      lock: !1,
      size() {
        return this.root.stack.length;
      },
      clear() {
        for (; this.size() > 0; )
          this.root.removeChild(this.root.stack.pop());
      },
      goBack() {
        if (!(!this.size() || this.lock)) {
          if (this.root.onpopstate !== null) {
            history.back();
            return;
          }
          this.root.goBack();
        }
      },
      /**
       * @param {T} pageName
       * @param {() => (UIStackLayoutPage)} cb
       */
      register(t, i) {
        this.root.pages[t] = i;
      },
      /**
       * @param {T} pageName
       */
      unregister(t) {
        delete this.root.pages[t];
      },
      /**
       * @param {T} pageName
       * @param {((page: UIStackLayoutPage) => void|Promise<void>) | null} [cb]
       * @param {boolean} [keepOldPage]
       */
      set(t, i = null, r = !1) {
        if (this.lock) return;
        const u = this.root.pages[t]();
        this.root.stack.push(this.root.appendChild(u)), typeof i == "function" && i(u);
        let h = null;
        this.size() > 1 && !r && (h = this.root.stack[this.root.stack.length - 2], h.parentElement.removeChild(h)), this.root.dispatchChangeEvent(h), this.root.onpopstate !== null && history.pushState(null, document.title, location.href);
      }
    }, c(this, Ft, ni).call(this);
  }
  connectedCallback() {
    window.addEventListener("popstate", this.onpopstate);
  }
  disconnectedCallback() {
    window.removeEventListener("popstate", this.onpopstate);
  }
  goBack() {
    if (this.ui.size() === 0) {
      this.dispatchChangeEvent(null);
      return;
    }
    const t = this.removeChild(this.stack.pop());
    this.stack.length > 0 && (this.stack[this.stack.length - 1].parentElement || this.appendChild(this.stack[this.stack.length - 1])), this.dispatchChangeEvent(t);
  }
  /**
   * @param {UIStackLayoutPage} oldChild
   */
  async dispatchChangeEvent(t) {
    this.ui.events.dispatch("change", {
      newPage: this.stack[this.stack.length - 1] || null,
      oldPage: t || this.stack[this.stack.length - 2] || null
    });
  }
};
Ft = new WeakSet(), ni = function() {
  this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = n`
            <style>
                :host {
                    display: block !important;
                    position: relative !important;
                    width: 100%;
                    height: 100%;
                }
            </style>

            <slot></slot>
        `;
}, s(Pt, "register", () => {
  customElements.get("ui-stack-layout") || customElements.define("ui-stack-layout", Pt);
});
let Ce = Pt;
const Dt = class Dt extends HTMLElement {
  constructor() {
    super(), this.stores = {}, this.ui = {
      root: this,
      /**
       * @type {Events<T>}
       */
      events: new b(),
      get storage() {
        return this.root.hasAttribute("storage");
      },
      set storage(e) {
        if (!e) {
          this.root.removeAttribute("storage");
          return;
        }
        this.root.setAttribute("storage", "");
      },
      get storageprefix() {
        return this.root.getAttribute("storageprefix");
      },
      set storageprefix(e) {
        if (!e) {
          this.root.removeAttribute("storageprefix");
          return;
        }
        this.root.setAttribute("storageprefix", e);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @returns {T[K]}
       */
      get(e) {
        if (this.storage) {
          const t = localStorage.getItem(
            (this.storageprefix || "") + e.toString()
          );
          if (t !== null)
            return JSON.parse(t);
        }
        return this.root.stores[e];
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {T[K]} data
       * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
       * `this.enableLocalStorage` flag needs to be set to `true` for this to work
       */
      set(e, t, i = !1) {
        if (i && this.storage) {
          const r = JSON.parse(
            localStorage.getItem(
              (this.storageprefix || "") + e.toString()
            ) || "null"
          );
          this.root.stores[e] = r ?? t;
        } else
          this.root.stores[e] = t;
        this.storage && localStorage.setItem(
          (this.storageprefix || "") + e.toString(),
          JSON.stringify(this.root.stores[e])
        ), this.events.dispatch(e, this.root.stores[e]);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => any} callback
       */
      update(e, t) {
        if (typeof t != "function")
          throw "callback is not a function";
        let i = null;
        if (this.storage) {
          const r = localStorage.getItem(
            (this.storageprefix || "") + e.toString()
          );
          r !== null && (i = JSON.parse(r));
        }
        i === null && (i = this.root.stores[e]), this.set(e, t(i));
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => void|Promise<void>} callback
       * @param {boolean} [trigger] - this will run the callback first
       * @returns {() => void} clean up function
       */
      on(e, t, i = !1) {
        if (typeof t != "function")
          throw "callback is not a function";
        return i && t(this.get(e)), this.events.on(e, t);
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
s(Dt, "register", () => {
  customElements.get("ui-store") || customElements.define("ui-store", Dt);
});
let xe = Dt;
const Y = class Y extends HTMLElement {
  constructor() {
    super(), this.mediaHandler = null, this.themes = {}, this.currentTheme = null, this.mode = "", this.ui = {
      root: this,
      get auto() {
        return !!this.root.media;
      },
      set auto(e) {
        this.root.setAuto(e);
      },
      get mode() {
        return this.root.mode;
      },
      set mode(e) {
        this.root.setMode(e);
      },
      /**
       * @param {string} themeName
       * @param {string} href
       */
      add(e, t) {
        this.root.themes[e] = t;
      },
      /**
       * @param {string} themeName
       */
      set(e) {
        var i;
        if (!this.root.themes[e])
          throw `theme "${e}" is missing in this.themes`;
        if (((i = this.root.currentTheme) == null ? void 0 : i.name) == e)
          return;
        {
          const r = document.getElementById("theme");
          r && (document.head.removeChild(r), this.root.currentTheme = null);
        }
        const t = document.createElement("link");
        t.id = "theme", t.rel = "stylesheet", t.href = this.root.themes[e], document.head.appendChild(t), this.root.currentTheme = {
          name: e,
          href: this.root.themes[e]
        };
      }
    };
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "auto":
        this.ui.auto = i !== null;
        break;
      case "mode":
        this.ui.mode = i;
        break;
    }
  }
  /**
   * @param {boolean} state
   * @param {HTMLElement} target
   */
  setAuto(e, t = document.body) {
    if (!e) {
      if (!this.media) return;
      this.media.removeEventListener("change", this.mediaHandler), this.media = null, this.mediaHandler = null;
      return;
    }
    if (this.setMode(null, t), this.media) {
      this.mediaHandler(this.media);
      return;
    }
    this.mediaHandler = (i) => {
      i.matches ? t.setAttribute("data-theme", "dark") : t.setAttribute("data-theme", "light");
    }, this.media = window.matchMedia("(prefers-color-scheme: dark)"), this.media.addEventListener("change", this.mediaHandler), this.mediaHandler(this.media);
  }
  /**
   * @param {string | null} value
   * @param {HTMLElement} target
   */
  setMode(e, t = document.body) {
    this.mode = e, this.mode ? t.setAttribute("data-theme", e) : t.removeAttribute("data-theme");
  }
};
s(Y, "register", () => {
  customElements.get("ui-theme-handler") || customElements.define("ui-theme-handler", Y);
}), s(Y, "observedAttributes", ["auto", "mode"]);
let Le = Y;
var Yt, ai;
const Xt = class Xt extends HTMLElement {
  constructor() {
    super();
    a(this, Yt);
    this.ui = {}, c(this, Yt, ai).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
Yt = new WeakSet(), ai = function() {
  this.attachShadow({ mode: "open" }), g(this.shadowRoot), this.shadowRoot.innerHTML = n`
            <style>
                :host {
                    display: block;

                    position: relative;
                    width: 100%;
                    height: 100%;

                    color: inherit;
                }

                ::slotted(svg) {
                    width: 100%;
                    height: 100%;
                }
            </style>

            <slot></slot>
        `;
}, s(Xt, "register", () => {
  customElements.get("ui-svg") || customElements.define("ui-svg", Xt);
});
let Me = Xt;
function Pi() {
  It.register(), ee.register(), re.register(), ie.register(), oe.register(), se.register(), ne.register(), ae.register(), ue.register(), ce.register(), le.register(), X.register(), Ut.register(), te.register(), de.register(), ge.register(), fe.register(), N.register(), me.register(), be.register(), ke.register(), ve.register(), ye.register(), Ce.register(), we.register(), xe.register(), Me.register(), he.register(), pe.register(), R.register(), Le.register();
}
export {
  zi as CleanUp,
  b as Events,
  ee as UIAlert,
  It as UIAlerts,
  ie as UIAppBar,
  re as UIAppBarItem,
  oe as UIButton,
  de as UICheck,
  ne as UIContainer,
  ae as UIDialog,
  le as UIDrawer,
  ce as UIDrawerGroup,
  ue as UIDrawerGroupItem,
  te as UIFlexGrid,
  X as UIFlexGridItem,
  Ut as UIFlexGridRow,
  se as UIIconButton,
  ge as UIInput,
  he as UILabel,
  ve as UILang,
  ke as UILangType,
  pe as UIPrimary,
  fe as UISearch,
  R as UISecondary,
  me as UISelect,
  N as UISelectOption,
  ye as UISpinner,
  Ce as UIStackLayout,
  we as UIStackLayoutPage,
  xe as UIStore,
  st as UIText,
  be as UITextarea,
  Le as UIThemeHandler,
  S as css,
  Bi as draggable,
  gi as globalStyleSheets,
  g as globalStylesToShadowRoot,
  n as html,
  Oi as isAndroid,
  Pi as register,
  qi as ripple,
  $i as styles,
  Fi as svg
};
