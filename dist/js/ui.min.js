let m = null;
function E() {
  return m === null && (m = Array.from(document.styleSheets).map((r) => {
    const t = new CSSStyleSheet(), e = Array.from(r.cssRules).map((l) => l.cssText).join(" ");
    return t.replaceSync(e), t;
  })), m;
}
function w(r) {
  r.adoptedStyleSheets.push(...E());
}
class $ {
  constructor() {
    this.listeners = {};
  }
  addListener(t, e) {
    return this.listeners[t] || (this.listeners[t] = []), this.listeners[t].push(e), () => this.removeListener(t, e);
  }
  removeListener(t, e) {
    this.listeners[t] && (this.listeners[t] = this.listeners[t].filter((l) => l !== e));
  }
  dispatch(t, e) {
    this.listeners[t] && this.listeners[t].forEach((l) => l(e));
  }
}
class C {
  constructor() {
    this.callbacks = [];
  }
  add(...t) {
    this.callbacks.push(...t);
  }
  run() {
    this.callbacks.filter((t) => (t(), !1));
  }
}
const S = {
  onDragStart: null,
  onDragging: null,
  onDragEnd: null
};
function L(r, t, e) {
  e = { ...S, ...e };
  const l = [...r.children].indexOf(t);
  return t.draggable = !0, t.ondragstart = (n) => {
    n.dataTransfer && (n.dataTransfer.effectAllowed = "move", n.dataTransfer.dropEffect = "move"), r.classList.add("ui-dragging"), e.onDragStart && e.onDragStart(l);
  }, t.ondragover = (n) => (n.preventDefault(), !1), t.ondragenter = (n) => {
    n.preventDefault(), [...r.children].forEach((s, i) => {
      if (i === l) {
        s.style.background = "var(--ui-primary)", s.style.color = "var(--ui-primary-text)";
        return;
      }
      s.style.background = "inherit", s.style.color = "inherit";
    }), e.onDragging && e.onDragging(l);
  }, t.ondrop = (n) => {
    n.preventDefault(), n.dataTransfer && (n.dataTransfer.dropEffect = "move"), r.classList.remove("ui-dragging"), e.onDragEnd && e.onDragEnd(l), [...r.children].forEach((s) => {
      s.style.background = "inherit", s.style.color = "inherit";
    });
  }, () => {
    t.draggable = !1, t.ondragstart = null, t.ondragover = null, t.ondragenter = null, t.ondrop = null;
  };
}
const D = {
  onDragStart: null,
  onDragEnd: null
};
function T(r, t) {
  t = { ...D, ...t };
  let e = null, l = null, n = null, s = !1, i = "", c = "";
  const y = (a) => {
    const u = a.currentTarget;
    !e && Array.from(u.classList).includes("draggable") && (l = (/* @__PURE__ */ new Date()).getTime(), e = u, n && clearTimeout(n), n = setTimeout(() => {
      e && (i = e.style.color, c = e.style.backgroundColor, e.style.color = "var(--ui-primary-text)", e.style.backgroundColor = "var(--ui-primary)", r.classList.add("ui-dragging"), s = !0, t != null && t.onDragStart && t.onDragStart());
    }, 200));
  }, h = (a) => {
    if (!l || !e) return;
    if (!s && (/* @__PURE__ */ new Date()).getTime() - l < 200) {
      f();
      return;
    }
    a.preventDefault(), s || (s = !0, t != null && t.onDragStart && t.onDragStart());
    let u;
    if (a instanceof TouchEvent) {
      const g = a.targetTouches[0];
      u = {
        clientX: g.clientX,
        clientY: g.clientY
      };
    } else
      u = {
        clientX: a.clientX,
        clientY: a.clientY
      };
    let o = document.elementFromPoint(u.clientX, u.clientY);
    if (o) {
      for (; !o.classList.contains("draggable") && o.parentElement; )
        o = o.parentElement;
      o.classList.contains("draggable") && ((() => {
        let d = e == null ? void 0 : e.previousElementSibling;
        for (; d; ) {
          if (d === o)
            return !0;
          d = d.previousElementSibling;
        }
        return !1;
      })() ? r.insertBefore(e, o) : r.insertBefore(e, o.nextElementSibling));
    }
  }, f = () => {
    n !== null && (clearTimeout(n), n = null), e && (e.style.color = i, e.style.backgroundColor = c, e = null), l = null, r.classList.remove("ui-dragging"), s && (s = !1, t != null && t.onDragEnd && t.onDragEnd());
  };
  return [...r.children].forEach((a) => {
    a.classList.add("draggable"), a.onmousedown = y, a.ontouchstart = y, a.onmousemove = h, a.ontouchmove = h, r.onmouseleave = a.onmouseup = f, a.ontouchend = f;
  }), () => {
    [...r.children].forEach((a) => {
      a.classList.remove("draggable"), a.onmousedown = null, a.ontouchstart = null, a.onmousemove = null, a.ontouchmove = null, r.onmouseleave = a.onmouseup = null, a.ontouchend = null;
    });
  };
}
const k = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createMobile: T,
  createNative: L
}, Symbol.toStringTag, { value: "Module" })), b = {
  color: "var(--ui-ripple-color, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  usePointer: !1
};
function x(r, t) {
  t = { ...b, ...t || {} };
  let e = null;
  const l = (c) => {
    e = p(c, t), r.addEventListener("pointermove", s);
  }, n = () => {
    r.removeEventListener("pointermove", s), v(e), e = null;
  }, s = () => n(), i = (c) => {
    e = p(c, t), v(e), e = null;
  };
  return r.classList.add("ripple-container"), r.style.overflow = "hidden", t.usePointer ? (r.addEventListener("pointerdown", l), r.addEventListener("pointerup", n), r.addEventListener("pointerleave", n)) : r.addEventListener("click", i), () => {
    if (r.classList.remove("ripple-container"), t.usePointer) {
      r.removeEventListener("pointerdown", l), r.removeEventListener("pointerup", n), r.removeEventListener("pointerleave", n), r.removeEventListener("pointermove", s);
      return;
    }
    r.removeEventListener("click", i);
  };
}
function p(r, t) {
  const e = document.createElement("div"), l = r.currentTarget;
  l.appendChild(e), e.classList.add("ripple"), e.style.position = "absolute", e.style.color = "inherit", e.style.borderRadius = "50%", e.style.pointerEvents = "none", e.style.width = "100px", e.style.height = "100px", e.style.marginTop = "-50px", e.style.marginLeft = "-50px", e.style.opacity = `${t.opacity}`, e.style.backgroundColor = `${t.color}`, e.style.transform = "scale(0) translate(0, 0)", e.style.transition = `transform ${t.spreadDuration} ${t.spreadTiming} 0s,opacity ${t.clearDuration} ${t.clearTiming} 0s`;
  const n = l.getBoundingClientRect();
  t.centered ? (e.style.top = `${n.height / 2}px`, e.style.left = `${n.width / 2}px`) : (e.style.top = `${r.clientY - n.top}px`, e.style.left = `${r.clientX - n.left}px`);
  const s = Math.max(n.width, n.height) * 0.02;
  return e.style.transform = `scale(${s}) translate(0, 0)`, e;
}
function v(r) {
  r && (r.addEventListener("transitionend", (t) => {
    t.propertyName === "opacity" && r.remove();
  }), r.style.opacity = "0");
}
const O = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: x,
  defaultOptions: b,
  start: p,
  stop: v
}, Symbol.toStringTag, { value: "Module" }));
function P() {
  return /(android)/i.test(navigator.userAgent);
}
function _(r) {
  return Object.entries(r).map(([t, e]) => `${t.replace(/[A-Z]/g, (l) => `-${l.toLowerCase()}`)}:${e}`).join(";") + ";";
}
export {
  C as CleanUp,
  $ as Events,
  w as addGlobalStylesToShadowRoot,
  k as draggable,
  P as isAndroid,
  O as ripple,
  _ as styles
};
