var Vi = Object.defineProperty;
var qe = (o) => {
  throw TypeError(o);
};
var Oi = (o, e, t) => e in o ? Vi(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[e] = t;
var a = (o, e, t) => Oi(o, typeof e != "symbol" ? e + "" : e, t), ie = (o, e, t) => e.has(o) || qe("Cannot " + t);
var dt = (o, e, t) => (ie(o, e, "read from private field"), t ? t.call(o) : e.get(o)), p = (o, e, t) => e.has(o) ? qe("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(o) : e.set(o, t), De = (o, e, t, i) => (ie(o, e, "write to private field"), i ? i.call(o, t) : e.set(o, t), t), g = (o, e, t) => (ie(o, e, "access private method"), t);
const Pi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 19.6693V4C5 3.44772 5.44772 3 6 3H18C18.5523 3 19 3.44772 19 4V19.6693C19 20.131 18.4277 20.346 18.1237 19.9985L12 13L5.87629 19.9985C5.57227 20.346 5 20.131 5 19.6693Z"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Zi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 13.3636L8.03559 16.3204C8.42388 16.6986 9.04279 16.6986 9.43108 16.3204L19 7"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Oe = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M17 9.5L12 14.5L7 9.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, zi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M14.5 17L9.5 12L14.5 7"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, ii = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M7 17L16.8995 7.10051"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M7 7.00001L16.8995 16.8995"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Bi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M13 3L16 6L19 9M13 3L5 3L5 21L19 21L19 9M13 3L13 9L19 9"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Gi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 12V18C5 18.5523 5.44772 19 6 19H18C18.5523 19 19 18.5523 19 18V12"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M12 3L12 15M12 15L16 11M12 15L8 11"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, qi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <circle
                cx="9.5"
                cy="6"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="9.5"
                cy="10"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="9.5"
                cy="14"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="9.5"
                cy="18"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="6"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="10"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="14"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="14.5"
                cy="18"
                r="0.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
        </g>
    </svg>
`, Di = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M6 12H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 15.5H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 8.5H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Ni = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="transparent"></rect>
            <circle
                cx="12"
                cy="7"
                r="0.5"
                transform="rotate(90 12 7)"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="12"
                cy="12"
                r="0.5"
                transform="rotate(90 12 12)"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
            <circle
                cx="12"
                cy="17"
                r="0.5"
                transform="rotate(90 12 17)"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></circle>
        </g>
    </svg>
`, Fi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M15.6287 5.12132L4.31497 16.435M15.6287 5.12132L19.1642 8.65685M15.6287 5.12132L17.0429 3.70711C17.4334 3.31658 18.0666 3.31658 18.4571 3.70711L20.5784 5.82843C20.969 6.21895 20.969 6.85212 20.5784 7.24264L19.1642 8.65685M7.85051 19.9706L4.31497 16.435M7.85051 19.9706L19.1642 8.65685M7.85051 19.9706L3.25431 21.0312L4.31497 16.435"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Ui = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M12 6V18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 12H18"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Yi = l`
    <svg
        style="color: inherit;"
        viewBox="0 0 64 64"
        fill="transparent"
        xmlns="http://www.w3.org/2000/svg"
    >
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <style type="text/css">
                .st0 {
                    fill: var(--ui-svg-bg, red);
                    transition: fill 0.25s linear;
                }
                .st1 {
                    opacity: 0.2;
                }
                .st2 {
                    fill: var(--ui-svg-bg, red);
                    transition: fill 0.25s linear;
                }
                .st3 {
                    fill: none;
                    stroke: var(--ui-svg-fg, currentColor);
                    stroke-width: 4;
                    stroke-linecap: round;
                    stroke-miterlimit: 10;
                    transition: fill 0.25s linear;
                }
            </style>
            <circle class="st0" cx="32" cy="32" r="32"></circle>
            <g class="st1">
                <path
                    class="st2"
                    d="M32,52c-9.9,0-18-8.1-18-18c0-6.4,3.4-12.3,8.9-15.5c1-0.6,2.2-0.2,2.7,0.7c0.6,1,0.2,2.2-0.7,2.7 C20.7,24.4,18,29.1,18,34c0,7.7,6.3,14,14,14c7.7,0,14-6.3,14-14c0-5.1-2.7-9.7-7.2-12.2c-1-0.5-1.3-1.8-0.8-2.7 c0.5-1,1.8-1.3,2.7-0.8C46.5,21.5,50,27.5,50,34C50,43.9,41.9,52,32,52z"
                ></path>
            </g>
            <g class="st1">
                <path
                    class="st2"
                    d="M32,36c-1.1,0-2-0.9-2-2V14c0-1.1,0.9-2,2-2c1.1,0,2,0.9,2,2v20C34,35.1,33.1,36,32,36z"
                ></path>
            </g>
            <path
                class="st3"
                d="M39.8,18c4.9,2.7,8.2,8,8.2,14c0,8.8-7.2,16-16,16c-8.8,0-16-7.2-16-16c0-5.9,3.2-11,7.9-13.8"
            ></path>
            <line class="st3" x1="32" y1="32" x2="32" y2="12"></line>
        </g>
    </svg>
`, Wi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M18.75 17H20C20.5523 17 21 16.5523 21 16V8C21 7.44772 20.5523 7 20 7H4C3.44772 7 3 7.44772 3 8V16C3 16.5523 3.44772 17 4 17H5.25"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 12C6 11.4477 6.44772 11 7 11H17C17.5523 11 18 11.4477 18 12V20C18 20.5523 17.5523 21 17 21H7C6.44772 21 6 20.5523 6 20V12Z"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M6 4C6 3.44772 6.44772 3 7 3H17C17.5523 3 18 3.44772 18 4V7H6V4Z"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 13.5H15.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 18.5H15.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 16H15.5"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, Ji = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill=""></rect>
            <path
                d="M21.3687 13.5827C21.4144 13.3104 21.2306 13.0526 20.9583 13.0069C20.686 12.9612 20.4281 13.1449 20.3825 13.4173L21.3687 13.5827ZM12 20.5C7.30558 20.5 3.5 16.6944 3.5 12H2.5C2.5 17.2467 6.75329 21.5 12 21.5V20.5ZM3.5 12C3.5 7.30558 7.30558 3.5 12 3.5V2.5C6.75329 2.5 2.5 6.75329 2.5 12H3.5ZM12 3.5C15.3367 3.5 18.2252 5.4225 19.6167 8.22252L20.5122 7.77748C18.9583 4.65062 15.7308 2.5 12 2.5V3.5ZM20.3825 13.4173C19.7081 17.437 16.2112 20.5 12 20.5V21.5C16.7077 21.5 20.6148 18.0762 21.3687 13.5827L20.3825 13.4173Z"
                fill="currentColor"
            ></path>
            <path
                d="M20.4716 2.42157V8.07843H14.8147"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, ri = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <g clip-path="url(#clip0_15_152)">
                <rect width="24" height="24" fill="none"></rect>
                <circle
                    cx="10.5"
                    cy="10.5"
                    r="6.5"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path
                    d="M19.6464 20.3536C19.8417 20.5488 20.1583 20.5488 20.3536 20.3536C20.5488 20.1583 20.5488 19.8417 20.3536 19.6464L19.6464 20.3536ZM20.3536 19.6464L15.3536 14.6464L14.6464 15.3536L19.6464 20.3536L20.3536 19.6464Z"
                    fill="currentColor"
                ></path>
            </g>
            <defs>
                <clipPath id="clip0_15_152">
                    <rect width="24" height="24" fill="none"></rect>
                </clipPath>
            </defs>
        </g>
    </svg>
`, Xi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M13.5 2L13.9961 1.93798C13.9649 1.68777 13.7522 1.5 13.5 1.5V2ZM10.5 2V1.5C10.2478 1.5 10.0351 1.68777 10.0039 1.93798L10.5 2ZM13.7747 4.19754L13.2786 4.25955C13.3047 4.46849 13.4589 4.63867 13.6642 4.68519L13.7747 4.19754ZM16.2617 5.22838L15.995 5.6513C16.1731 5.76362 16.4024 5.75233 16.5687 5.62306L16.2617 5.22838ZM18.0104 3.86826L18.364 3.51471C18.1857 3.3364 17.9025 3.31877 17.7034 3.47359L18.0104 3.86826ZM20.1317 5.98958L20.5264 6.29655C20.6812 6.09751 20.6636 5.81434 20.4853 5.63603L20.1317 5.98958ZM18.7716 7.73831L18.3769 7.43134C18.2477 7.59754 18.2364 7.82693 18.3487 8.00503L18.7716 7.73831ZM19.8025 10.2253L19.3148 10.3358C19.3613 10.5411 19.5315 10.6953 19.7404 10.7214L19.8025 10.2253ZM22 10.5H22.5C22.5 10.2478 22.3122 10.0351 22.062 10.0039L22 10.5ZM22 13.5L22.062 13.9961C22.3122 13.9649 22.5 13.7522 22.5 13.5H22ZM19.8025 13.7747L19.7404 13.2786C19.5315 13.3047 19.3613 13.4589 19.3148 13.6642L19.8025 13.7747ZM18.7716 16.2617L18.3487 15.995C18.2364 16.1731 18.2477 16.4025 18.3769 16.5687L18.7716 16.2617ZM20.1317 18.0104L20.4853 18.364C20.6636 18.1857 20.6812 17.9025 20.5264 17.7034L20.1317 18.0104ZM18.0104 20.1317L17.7034 20.5264C17.9025 20.6812 18.1857 20.6636 18.364 20.4853L18.0104 20.1317ZM16.2617 18.7716L16.5687 18.3769C16.4024 18.2477 16.1731 18.2364 15.995 18.3487L16.2617 18.7716ZM13.7747 19.8025L13.6642 19.3148C13.4589 19.3613 13.3047 19.5315 13.2786 19.7404L13.7747 19.8025ZM13.5 22V22.5C13.7522 22.5 13.9649 22.3122 13.9961 22.062L13.5 22ZM10.5 22L10.0039 22.062C10.0351 22.3122 10.2478 22.5 10.5 22.5V22ZM10.2253 19.8025L10.7214 19.7404C10.6953 19.5315 10.5411 19.3613 10.3358 19.3148L10.2253 19.8025ZM7.73832 18.7716L8.00504 18.3487C7.82694 18.2364 7.59756 18.2477 7.43135 18.3769L7.73832 18.7716ZM5.98959 20.1317L5.63604 20.4853C5.81435 20.6636 6.09752 20.6812 6.29656 20.5264L5.98959 20.1317ZM3.86827 18.0104L3.4736 17.7034C3.31878 17.9025 3.33641 18.1857 3.51472 18.364L3.86827 18.0104ZM5.22839 16.2617L5.62307 16.5687C5.75234 16.4025 5.76363 16.1731 5.65131 15.995L5.22839 16.2617ZM4.19754 13.7747L4.68519 13.6642C4.63867 13.4589 4.46849 13.3047 4.25955 13.2786L4.19754 13.7747ZM2 13.5H1.5C1.5 13.7522 1.68777 13.9649 1.93798 13.9961L2 13.5ZM2 10.5L1.93798 10.0039C1.68777 10.0351 1.5 10.2478 1.5 10.5H2ZM4.19754 10.2253L4.25955 10.7214C4.46849 10.6953 4.63867 10.5411 4.68519 10.3358L4.19754 10.2253ZM5.22839 7.73831L5.65131 8.00503C5.76363 7.82693 5.75234 7.59755 5.62307 7.43134L5.22839 7.73831ZM3.86827 5.98959L3.51472 5.63603C3.33641 5.81434 3.31878 6.09751 3.47359 6.29656L3.86827 5.98959ZM5.98959 3.86827L6.29656 3.47359C6.09752 3.31878 5.81434 3.33641 5.63604 3.51471L5.98959 3.86827ZM7.73832 5.22839L7.43135 5.62306C7.59755 5.75233 7.82694 5.76363 8.00504 5.6513L7.73832 5.22839ZM10.2253 4.19754L10.3358 4.68519C10.5411 4.63867 10.6953 4.46849 10.7214 4.25955L10.2253 4.19754ZM13.5 1.5H10.5V2.5H13.5V1.5ZM14.2708 4.13552L13.9961 1.93798L13.0039 2.06202L13.2786 4.25955L14.2708 4.13552ZM16.5284 4.80547C15.7279 4.30059 14.8369 3.92545 13.8851 3.70989L13.6642 4.68519C14.503 4.87517 15.2886 5.20583 15.995 5.6513L16.5284 4.80547ZM16.5687 5.62306L18.3174 4.26294L17.7034 3.47359L15.9547 4.83371L16.5687 5.62306ZM17.6569 4.22182L19.7782 6.34314L20.4853 5.63603L18.364 3.51471L17.6569 4.22182ZM19.7371 5.68261L18.3769 7.43134L19.1663 8.04528L20.5264 6.29655L19.7371 5.68261ZM20.2901 10.1149C20.0746 9.16313 19.6994 8.27213 19.1945 7.47158L18.3487 8.00503C18.7942 8.71138 19.1248 9.49695 19.3148 10.3358L20.2901 10.1149ZM22.062 10.0039L19.8645 9.72917L19.7404 10.7214L21.938 10.9961L22.062 10.0039ZM22.5 13.5V10.5H21.5V13.5H22.5ZM19.8645 14.2708L22.062 13.9961L21.938 13.0039L19.7404 13.2786L19.8645 14.2708ZM19.1945 16.5284C19.6994 15.7279 20.0746 14.8369 20.2901 13.8851L19.3148 13.6642C19.1248 14.503 18.7942 15.2886 18.3487 15.995L19.1945 16.5284ZM20.5264 17.7034L19.1663 15.9547L18.3769 16.5687L19.7371 18.3174L20.5264 17.7034ZM18.364 20.4853L20.4853 18.364L19.7782 17.6569L17.6569 19.7782L18.364 20.4853ZM15.9547 19.1663L17.7034 20.5264L18.3174 19.7371L16.5687 18.3769L15.9547 19.1663ZM13.8851 20.2901C14.8369 20.0746 15.7279 19.6994 16.5284 19.1945L15.995 18.3487C15.2886 18.7942 14.503 19.1248 13.6642 19.3148L13.8851 20.2901ZM13.9961 22.062L14.2708 19.8645L13.2786 19.7404L13.0039 21.938L13.9961 22.062ZM10.5 22.5H13.5V21.5H10.5V22.5ZM9.72917 19.8645L10.0039 22.062L10.9961 21.938L10.7214 19.7404L9.72917 19.8645ZM7.4716 19.1945C8.27214 19.6994 9.16314 20.0746 10.1149 20.2901L10.3358 19.3148C9.49696 19.1248 8.71139 18.7942 8.00504 18.3487L7.4716 19.1945ZM6.29656 20.5264L8.04529 19.1663L7.43135 18.3769L5.68262 19.7371L6.29656 20.5264ZM3.51472 18.364L5.63604 20.4853L6.34315 19.7782L4.22183 17.6569L3.51472 18.364ZM4.83372 15.9547L3.4736 17.7034L4.26295 18.3174L5.62307 16.5687L4.83372 15.9547ZM3.70989 13.8851C3.92545 14.8369 4.30059 15.7279 4.80547 16.5284L5.65131 15.995C5.20584 15.2886 4.87517 14.503 4.68519 13.6642L3.70989 13.8851ZM1.93798 13.9961L4.13552 14.2708L4.25955 13.2786L2.06202 13.0039L1.93798 13.9961ZM1.5 10.5V13.5H2.5V10.5H1.5ZM4.13552 9.72917L1.93798 10.0039L2.06202 10.9961L4.25955 10.7214L4.13552 9.72917ZM4.80547 7.47159C4.30059 8.27213 3.92545 9.16313 3.70989 10.1149L4.68519 10.3358C4.87517 9.49696 5.20583 8.71138 5.65131 8.00503L4.80547 7.47159ZM3.47359 6.29656L4.83371 8.04528L5.62307 7.43134L4.26295 5.68262L3.47359 6.29656ZM5.63604 3.51471L3.51472 5.63603L4.22182 6.34314L6.34314 4.22182L5.63604 3.51471ZM8.04529 4.83371L6.29656 3.47359L5.68262 4.26294L7.43135 5.62306L8.04529 4.83371ZM10.1149 3.70989C9.16313 3.92545 8.27214 4.30059 7.4716 4.80547L8.00504 5.6513C8.71139 5.20583 9.49696 4.87517 10.3358 4.68519L10.1149 3.70989ZM10.0039 1.93798L9.72917 4.13552L10.7214 4.25955L10.9961 2.06202L10.0039 1.93798Z"
                fill="currentColor"
            ></path>
            <circle
                cx="12"
                cy="12"
                r="4"
                stroke="currentColor"
                stroke-linejoin="round"
            ></circle>
        </g>
    </svg>
`, Ki = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <g clip-path="url(#clip0_15_72)">
                <rect width="24" height="24" fill="none"></rect>
                <circle
                    cx="7"
                    cy="12"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <circle
                    cx="17"
                    cy="6"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path d="M15 7L8.5 11" stroke="currentColor"></path>
                <circle
                    cx="17"
                    cy="18"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
                <path d="M8.5 13.5L15 17" stroke="currentColor"></path>
            </g>
            <defs>
                <clipPath id="clip0_15_72">
                    <rect width="24" height="24" fill="none"></rect>
                </clipPath>
            </defs>
        </g>
    </svg>
`, Qi = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <g filter="url(#filter0_d_15_286)">
                <path
                    d="M3 8.26667V19C3 19.5523 3.44772 20 4 20H20C20.5523 20 21 19.5523 21 19V8.26667M3 8.26667V5C3 4.44772 3.44772 4 4 4H20C20.5523 4 21 4.44772 21 5V8.26667M3 8.26667H21"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></path>
            </g>
            <g filter="url(#filter1_d_15_286)">
                <circle
                    cx="12"
                    cy="14"
                    r="2"
                    stroke="currentColor"
                    stroke-linejoin="round"
                ></circle>
            </g>
            <g filter="url(#filter2_d_15_286)">
                <path
                    d="M7 2V5"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                ></path>
            </g>
            <g filter="url(#filter3_d_15_286)">
                <path
                    d="M17 2V5"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                ></path>
            </g>
            <defs>
                <filter
                    id="filter0_d_15_286"
                    x="1.5"
                    y="3.5"
                    width="21"
                    height="19"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
                <filter
                    id="filter1_d_15_286"
                    x="8.5"
                    y="11.5"
                    width="7"
                    height="7"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
                <filter
                    id="filter2_d_15_286"
                    x="5.5"
                    y="1.5"
                    width="3"
                    height="6"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
                <filter
                    id="filter3_d_15_286"
                    x="15.5"
                    y="1.5"
                    width="3"
                    height="6"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                >
                    <feFlood
                        flood-opacity="0"
                        result="BackgroundImageFix"
                    ></feFlood>
                    <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                    ></feColorMatrix>
                    <feOffset dy="1"></feOffset>
                    <feGaussianBlur stdDeviation="0.5"></feGaussianBlur>
                    <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
                    ></feColorMatrix>
                    <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_15_286"
                    ></feBlend>
                    <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_15_286"
                        result="shape"
                    ></feBlend>
                </filter>
            </defs>
        </g>
    </svg>
`, Ii = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 7.5H19L18 21H6L5 7.5Z"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
            <path
                d="M15.5 9.5L15 19"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M12 9.5V19"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M8.5 9.5L9 19"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M16 5H19C20.1046 5 21 5.89543 21 7V7.5H3V7C3 5.89543 3.89543 5 5 5H8M16 5L15 3H9L8 5M16 5H8"
                stroke="currentColor"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, tr = l`
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
        ></g>
        <g id="SVGRepo_iconCarrier">
            <rect width="24" height="24" fill="none"></rect>
            <path
                d="M5 12V18C5 18.5523 5.44772 19 6 19H18C18.5523 19 19 18.5523 19 18V12"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M12 15L12 3M12 3L8 7M12 3L16 7"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </g>
    </svg>
`, er = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bookmark: Pi,
  checkmark: Zi,
  chevronDown: Oe,
  chevronLeft: zi,
  close: ii,
  documentNew: Bi,
  download: Gi,
  drag: qi,
  menu: Di,
  moreVertical: Ni,
  pen: Fi,
  plus: Ui,
  power: Yi,
  printer: Wi,
  refresh: Ji,
  search: ri,
  settings: Xi,
  share: Ki,
  today: Qi,
  trash: Ii,
  upload: tr
}, Symbol.toStringTag, { value: "Module" })), zr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  smoothieLineIcons: er
}, Symbol.toStringTag, { value: "Module" }));
let re = null;
function ir() {
  return re === null && (re = Array.from(document.styleSheets).map((o) => {
    const e = new CSSStyleSheet(), t = Array.from(o.cssRules).map((i) => i.cssText).join(" ");
    return e.replaceSync(t), e;
  })), re;
}
function m(o) {
  o.adoptedStyleSheets.push(...ir());
}
class w {
  constructor() {
    a(this, "listeners", {});
  }
  add(e, t) {
    return this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t), () => this.remove(e, t);
  }
  remove(e, t) {
    this.listeners[e] && (this.listeners[e] = this.listeners[e].filter(
      (i) => i !== t
    ));
  }
  dispatch(e, t) {
    this.listeners[e] && this.listeners[e].forEach((i) => i(t));
  }
}
class Br {
  constructor() {
    a(this, "callbacks", []);
  }
  add(...e) {
    this.callbacks.push(...e);
  }
  run() {
    this.callbacks.filter((e) => (e(), !1));
  }
}
const rr = {
  onDragStart: null,
  onDragging: null,
  onDragEnd: null
};
function or(o, e, t) {
  t = { ...rr, ...t };
  const i = [...o.children].indexOf(e);
  return e.draggable = !0, e.ondragstart = (r) => {
    r.dataTransfer.effectAllowed = "move", r.dataTransfer.dropEffect = "move", t.onDragStart && t.onDragStart(i);
  }, e.ondragover = (r) => (r.preventDefault(), !1), e.ondragenter = (r) => {
    r.preventDefault(), [...o.children].forEach((s, n) => {
      if (n === i) {
        s.style.background = "var(--ui-primary)", s.style.color = "var(--ui-primary-fg)";
        return;
      }
      s.style.background = "inherit", s.style.color = "inherit";
    }), t.onDragging && t.onDragging(i);
  }, e.ondrop = (r) => {
    r.preventDefault(), r.dataTransfer.dropEffect = "move", t.onDragEnd && t.onDragEnd(i), [...o.children].forEach((s) => {
      s.style.background = "inherit", s.style.color = "inherit";
    });
  }, () => {
    e.draggable = !1, e.ondragstart = null, e.ondragover = null, e.ondragenter = null, e.ondrop = null;
  };
}
const sr = {
  onDragStart: null,
  onDragEnd: null
};
function nr(o, e) {
  e = { ...sr, ...e };
  let t = null, i = null, r = null, s = null, n = null, c = !1, u = null, f = null;
  const b = (h) => {
    !t && Array.from(h.currentTarget.classList).includes("draggable") && (r = h.clientX, s = h.clientY, i = (/* @__PURE__ */ new Date()).getTime(), t = h.currentTarget, n || clearTimeout(n), n = setTimeout(() => {
      u = t.style.color, f = t.style.backgroundColor, t.style.color = "var(--ui-primary-fg)", t.style.backgroundColor = "var(--ui-primary)", o.classList.add("dragging"), c = !0, e.onDragStart && e.onDragStart();
    }, 200));
  }, d = (h) => {
    if (!i || !t) return;
    if (!c && (/* @__PURE__ */ new Date()).getTime() - i < 200) {
      const ee = Math.abs(r - h.clientX), A = Math.abs(s - h.clientY);
      if ((ee > A ? ee : A) < 24)
        return;
      y();
      return;
    }
    h.preventDefault(), c || (c = !0, e.onDragStart && e.onDragStart());
    const _ = !!h.targetTouches && h.targetTouches[0] || h;
    let C = document.elementFromPoint(_.clientX, _.clientY);
    for (; !C.classList.contains("draggable") && C.parentElement; )
      C = C.parentElement;
    C.classList.contains("draggable") && ((() => {
      let A = t.previousElementSibling;
      for (; A; ) {
        if (A === C)
          return !0;
        A = A.previousElementSibling;
      }
      return !1;
    })() ? o.insertBefore(t, C) : o.insertBefore(t, C.nextElementSibling));
  }, y = () => {
    n !== null && (clearTimeout(n), n = null), t && (t.style.color = u, t.style.backgroundColor = f, t = null), i = null, o.classList.remove("dragging"), c && (c = !1, e.onDragEnd && e.onDragEnd());
  };
  return Array.from(o.children).forEach((h) => {
    h.classList.add("draggable"), h.onmousedown = b, h.ontouchstart = b, h.onmousemove = d, h.ontouchmove = d, h.onmouseup = y, h.ontouchend = y;
  }), () => {
    Array.from(o.children).forEach((h) => {
      h.classList.remove("draggable"), h.onmousedown = null, h.ontouchstart = null, h.onmousemove = null, h.ontouchmove = null, h.onmouseup = null, h.ontouchend = null;
    });
  };
}
const Gr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createMobile: nr,
  createNative: or
}, Symbol.toStringTag, { value: "Module" })), oi = {
  color: "var(--ui-ripple-fg, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  useClick: !1
};
function R(o, e) {
  e = { ...oi, ...e || {} };
  let t = null;
  const i = (c) => {
    t = le(c, e), o.addEventListener("pointermove", s);
  }, r = () => {
    o.removeEventListener("pointermove", s), ce(t), t = null;
  }, s = () => r(), n = (c) => {
    t = le(c, e), ce(t), t = null;
  };
  return o.classList.add("ripple-container"), o.style.overflow = "hidden", e.useClick === !0 ? o.addEventListener("click", n) : (o.addEventListener("pointerdown", i), o.addEventListener("pointerup", r), o.addEventListener("pointerleave", r)), () => {
    if (o.classList.remove("ripple-container"), e.useClick === !0) {
      o.removeEventListener("click", n);
      return;
    }
    o.removeEventListener("pointerdown", i), o.removeEventListener("pointerup", r), o.removeEventListener("pointerleave", r), o.removeEventListener("pointermove", s);
  };
}
function le(o, e) {
  const t = document.createElement("div");
  o.currentTarget.appendChild(t), t.classList.add("ripple"), t.style.position = "absolute", t.style.color = "inherit", t.style.borderRadius = "50%", t.style.pointerEvents = "none", t.style.width = "100px", t.style.height = "100px", t.style.marginTop = "-50px", t.style.marginLeft = "-50px", t.style.opacity = `${e.opacity}`, t.style.backgroundColor = e.color, t.style.transform = "scale(0) translate(0, 0)", t.style.transition = `transform ${e.spreadDuration} ${e.spreadTiming} 0s,opacity ${e.clearDuration} ${e.clearTiming} 0s`;
  const i = o.currentTarget.getBoundingClientRect();
  e.centered ? (t.style.top = `${i.height / 2}px`, t.style.left = `${i.width / 2}px`) : (t.style.top = `${o.clientY - i.top}px`, t.style.left = `${o.clientX - i.left}px`);
  const r = Math.max(i.width, i.height) * 0.02;
  return t.style.transform = `scale(${r}) translate(0, 0)`, t;
}
function ce(o) {
  o && (o.addEventListener("transitionend", (e) => {
    e.propertyName === "opacity" && o.remove();
  }), o.style.opacity = "0");
}
const qr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: R,
  defaultOptions: oi,
  start: le,
  stop: ce
}, Symbol.toStringTag, { value: "Module" }));
function Dr() {
  return /(android)/i.test(navigator.userAgent);
}
const l = String.raw, rt = String.raw;
function Nr(o) {
  return Object.entries(o).map(
    ([e, t]) => `${e.replace(/[A-Z]/g, (i) => `-${i.toLowerCase()}`)}:${t}`
  ).join(";") + ";";
}
var mt, si;
const bt = class bt extends HTMLElement {
  constructor() {
    super();
    p(this, mt);
    this.ui = {
      root: this,
      /**
       * @param {import("./ui-alert").UIAlert} alert
       */
      add(t) {
        return this.root.shadowRoot.querySelector(".alerts-container").append(t), () => this.remove(t);
      },
      /**
       * @param {import("./ui-alert").UIAlert} alert
       */
      remove(t) {
        this.root.shadowRoot.querySelector(".alerts-container").removeChild(t);
      }
    }, g(this, mt, si).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
mt = new WeakSet(), si = function() {
  this.classList.add("no-scrollbar"), this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                :host {
                    display: block;
                    position: fixed !important;
                    z-index: 999;
                    background: transparent;

                    overflow: auto;
                }

                ui-flex-grid {
                    padding: 0;
                }

                ui-flex-grid:has(> *) {
                    padding: var(--ui-spacing);
                }
            </style>

            <style class="position">
                :host {
                    right: 0;
                    bottom: 0;
                }
            </style>

            <style class="size">
                :host {
                    width: fit-content;
                    max-width: 100%;
                    height: fit-content;
                    max-height: 100%;
                }
            </style>

            <ui-flex-grid class="alerts-container" gap="0.25rem">
            </ui-flex-grid>
        `;
}, a(bt, "register", () => {
  customElements.get("ui-alerts") || (console.debug('[ui] Register "ui-alerts" component'), customElements.define("ui-alerts", bt));
});
let ue = bt;
ue.register();
var vt, ni;
const G = class G extends HTMLElement {
  constructor() {
    super();
    p(this, vt);
    this.flex = "1", this.ui = {
      root: this,
      get flex() {
        return this.root.flex;
      },
      set flex(t) {
        this.root.flex = t || "1";
        const i = this.root.shadowRoot.querySelector('style[name="flex"]');
        i.textContent = rt`
                    :host {
                        flex: ${this.root.flex};
                    }
                `;
      }
    }, g(this, vt, ni).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "flex":
        this.ui.flex = r;
        break;
    }
  }
};
vt = new WeakSet(), ni = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: content;
                }

                ::slotted(*) {
                    flex-grow: 1;
                }
            </style>

            <style name="flex">
                :host {
                    flex: 1;
                }
            </style>

            <slot></slot>
        `;
}, a(G, "register", () => {
  customElements.get("ui-flex-grid-item") || (console.debug('[ui] Register "ui-flex-grid-item" component'), customElements.define("ui-flex-grid-item", G));
}), a(G, "observedAttributes", ["flex"]);
let ot = G;
ot.register();
var yt, ai;
const q = class q extends HTMLElement {
  constructor() {
    super();
    p(this, yt);
    this.gap = "0", this.ui = {
      root: this,
      get gap() {
        return this.root.gap;
      },
      set gap(t) {
        this.root.gap = t || "0";
        const i = this.root.shadowRoot.querySelector('style[name="gap"]');
        i.textContent = rt`
                    :host > ::slotted(*) {
                        margin: 0 ${this.root.gap} !important;
                    }
                `;
      },
      get justify() {
        return this.root.style.justifyContent;
      },
      set justify(t) {
        this.root.style.justifyContent = t;
      },
      get align() {
        return this.root.style.alignItems;
      },
      set align(t) {
        this.root.style.alignItems = t;
      }
    }, g(this, yt, ai).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "gap":
        this.ui.gap = r;
        break;
      case "justify":
        this.ui.justify = r;
        break;
      case "align":
        this.ui.align = r;
        break;
    }
  }
};
yt = new WeakSet(), ai = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex !important;
                    flex-flow: row nowrap;

                    position: relative;
                    width: 100%;
                }
            </style>

            <style name="gap">
                :host > ::slotted(*) {
                    margin: 0 0 !important;
                }
            </style>

            <style>
                :host > ::slotted(*:first-child) {
                    margin-left: 0 !important;
                }

                :host > ::slotted(*:last-child) {
                    margin-right: 0 !important;
                }
            </style>

            <slot></slot>
        `;
}, a(q, "register", () => {
  customElements.get("ui-flex-grid-row") || (console.debug('[ui] Register "ui-flex-grid-row" component'), customElements.define("ui-flex-grid-row", q));
}), a(q, "observedAttributes", ["gap", "justify", "align"]);
let he = q;
he.register();
var wt, li;
const D = class D extends HTMLElement {
  constructor() {
    super();
    p(this, wt);
    this.gap = "0", this.ui = {
      root: this,
      get gap() {
        return this.root.gap;
      },
      set gap(t) {
        this.root.gap = t || "0";
        const i = this.root.shadowRoot.querySelector('style[name="gap"]');
        i.textContent = rt`
                    :host > ::slotted(*) {
                        margin: ${this.root.gap} 0 !important;
                    }
                `;
      },
      get justify() {
        return this.root.style.justifyContent;
      },
      set justify(t) {
        this.root.style.justifyContent = t;
      },
      get align() {
        return this.root.style.alignItems;
      },
      set align(t) {
        this.root.style.alignItems = t;
      }
    }, g(this, wt, li).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "gap":
        this.ui.gap = r;
        break;
      case "justify":
        this.ui.justify = r;
        break;
      case "align":
        this.ui.align = r;
        break;
    }
  }
};
wt = new WeakSet(), li = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex !important;
                    flex-flow: column nowrap;

                    position: relative;
                    width: 100%;
                    height: fit-content;
                }
            </style>

            <style name="gap">
                :host > ::slotted(*) {
                    margin: 0 0 !important;
                }
            </style>

            <style>
                :host > ::slotted(*:first-child) {
                    margin-top: 0 !important;
                }

                :host > ::slotted(*:last-child) {
                    margin-bottom: 0 !important;
                }
            </style>

            <slot></slot>
        `;
}, a(D, "register", () => {
  customElements.get("ui-flex-grid") || (console.debug('[ui] Register "ui-flex-grid" component'), customElements.define("ui-flex-grid", D));
}), a(D, "observedAttributes", ["gap", "justify", "align"]);
let de = D;
de.register();
var kt, ci;
const Ct = class Ct extends ot {
  /**
   * @param {UIAlert_Options} [options]
   */
  constructor(t = null) {
    super();
    p(this, kt);
    this.styleVariants = {
      info: rt`
                :host {
                    color: var(--ui-card-fg);
                    background-color: var(--ui-card);
                }
            `,
      error: rt`
                :host {
                    color: var(--ui-destructive-fg);
                    background-color: var(--ui-destructive);
                }
            `
    }, this.ui = {
      ...this.ui,
      root: this,
      /**
       * @param {UIAlert_Options | null} options
       */
      set(i) {
        i && (this.message = i.message, this.variant = i.variant);
      },
      get message() {
        return this.root.shadowRoot.querySelector("ui-primary").innerHTML;
      },
      /**
       * @param {string} value
       */
      set message(i) {
        const r = this.root.shadowRoot.querySelector("ui-primary");
        r.innerHTML = i || "";
      },
      get variant() {
        return this.root.getAttribute("variant");
      },
      /**
       * @param {UIAlert_Variants} value
       */
      set variant(i) {
        if (!i) {
          this.root.removeAttribute("variant");
          return;
        }
        this.root.setAttribute("variant", i);
      }
    }, g(this, kt, ci).call(this), t && this.ui.set(t);
  }
  static get observedAttributes() {
    return ["message", "variant", ...super.observedAttributes];
  }
  connectedCallback() {
    super.connectedCallback();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (super.attributeChangedCallback(t, i, r), t) {
      case "message":
        this.ui.message = r;
        break;
      case "variant":
        if (r !== "info" && r !== "error") return;
        this.shadowRoot.querySelector("style.variant").innerHTML = this.styleVariants[r] || "";
    }
  }
};
kt = new WeakSet(), ci = function() {
  this.shadowRoot.removeChild(this.shadowRoot.querySelector("slot")), this.shadowRoot.innerHTML += l`
            <style>
                :host {
                    position: relative !important;

                    border-radius: var(--ui-radius);
                    border: 1px solid var(--ui-borderColor);

                    padding: var(--ui-spacing);

                    width: 28rem;
                    max-width: 100%;
                }
            </style>

            <style class="variant"></style>

            <ui-primary style="font-size: 0.9rem;"></ui-primary>
        `;
}, a(Ct, "register", () => {
  customElements.get("ui-alert") || (console.debug('[ui] Register "ui-alert" component'), customElements.define("ui-alert", Ct));
});
let pe = Ct;
pe.register();
var xt, ui;
const Lt = class Lt extends HTMLElement {
  constructor() {
    super();
    p(this, xt);
    this.ui = {
      root: this,
      get leftSlot() {
        return [...this.root.querySelectorAll('[slot="left"]')];
      },
      get centerSlot() {
        return [...this.root.querySelectorAll('[slot="center"]')];
      },
      get rightSlot() {
        return [...this.root.querySelectorAll('[slot="right"]')];
      },
      get position() {
        return this.root.getAttribute("position");
      },
      /**
       * @param {"top" | "bottom"} value
       */
      set position(t) {
        if (!t) {
          this.root.removeAttribute("position");
          return;
        }
        this.root.setAttribute("position", t);
      }
    }, g(this, xt, ui).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
xt = new WeakSet(), ui = function() {
  this.classList.add("has-backdrop-blur"), this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    width: 100%;
                    overflow: hidden;
                    padding: calc(var(--ui-spacing) / 2);
                }

                :host([position="top"]),
                :host([position="bottom"]) {
                    z-index: 100;
                    position: absolute !important;
                    left: 0;
                    right: 0;
                    height: var(--ui-app-bar-height);
                }

                :host([position="top"]) {
                    top: 0;
                    border-bottom: 1px solid var(--ui-borderColor);
                }

                :host([position="bottom"]) {
                    bottom: 0;
                    border-top: 1px solid var(--ui-borderColor);
                }

                :host > ui-flex-grid-row {
                    width: 100%;
                    height: 100%;
                    align-items: center;
                    justify-content: space-between;
                }

                :host > ui-flex-grid-row > * {
                    height: 100%;
                }

                :host > ui-flex-grid-row > *:nth-child(1),
                :host > ui-flex-grid-row > *:nth-child(3) {
                    width: fit-content;
                }

                :host > ui-flex-grid-row > [slot="left"] {
                    margin-left: 0 !important;
                }

                :host > ui-flex-grid-row > [slot="center"] {
                    width: 100%;
                }

                :host > ui-flex-grid-row > [slot="right"] {
                    margin-right: 0 !important;
                    justify-content: flex-end;
                }
            </style>

            <ui-flex-grid-row gap="0.25rem">
                <ui-flex-grid-row gap="0.25rem" align="center">
                    <slot name="left"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row
                    gap="0.25rem"
                    style="overflow: hidden;"
                    align="center"
                >
                    <slot name="center"></slot>
                </ui-flex-grid-row>

                <ui-flex-grid-row gap="0.25rem" align="center">
                    <slot name="right"></slot>
                </ui-flex-grid-row>
            </ui-flex-grid-row>
        `;
}, a(Lt, "register", () => {
  customElements.get("ui-app-bar") || (console.debug('[ui] Register "ui-app-bar" component'), customElements.define("ui-app-bar", Lt));
});
let ge = Lt;
ge.register();
var St, hi;
const _t = class _t extends HTMLElement {
  constructor() {
    super();
    p(this, St);
    this.ui = {
      root: this,
      /**
       * @returns {T}
       */
      get child() {
        return this.root.querySelector("*");
      },
      /**
       * @param {string | null} [value]
       */
      show(t = null) {
        this.root.style.display = t;
      },
      hide() {
        this.root.style.display = "none";
      }
    }, g(this, St, hi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
St = new WeakSet(), hi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: content;
                    flex: 1;
                }

                ::slotted(*) {
                    flex-grow: 1;
                }
            </style>

            <slot></slot>
        `;
}, a(_t, "register", () => {
  customElements.get("ui-app-bar-item") || (console.debug('[ui] Register "ui-app-bar-item" component'), customElements.define("ui-app-bar-item", _t));
});
let fe = _t;
fe.register();
var At, di;
const N = class N extends HTMLElement {
  constructor() {
    super();
    p(this, At);
    this.ripple = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIButton_Events>}
       */
      events: new w(),
      get noripple() {
        return !this.root.ripple;
      },
      set noripple(t) {
        if (!t) {
          this.root.ripple && this.root.ripple.destroy(), this.root.ripple = R(this.root);
          return;
        }
        this.root.ripple && (this.root.ripple.destroy(), this.root.ripple = null);
      },
      get color() {
        return this.root.getAttribute("color");
      },
      /**
       * @param {UIButton_Color} value
       */
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get variant() {
        return this.root.getAttribute("variant");
      },
      /**
       * @param {UIButton_Variant} value
       */
      set variant(t) {
        if (!t) {
          this.root.removeAttribute("variant");
          return;
        }
        this.root.setAttribute("variant", t);
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, g(this, At, di).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "noripple":
        this.ui.noripple = r !== null;
        break;
    }
  }
};
At = new WeakSet(), di = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: flex;
                    align-items: center;
                    justify-content: center;

                    position: relative;

                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2.5);

                    outline: none;
                    border: 1px solid currentColor;
                    border-radius: var(--ui-radius);

                    user-select: none;
                    overflow: hidden;
                    cursor: pointer;

                    text-transform: capitalize;
                    font-size: 1.1rem;
                    font-weight: 450;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-button-fontVariation);
                }

                :host([variant="full"]) {
                    border: none;
                }

                :host([variant="full"][color="primary"]) {
                    background-color: var(--ui-primary);
                    color: var(--ui-primary-fg);
                }

                :host([variant="full"][color="secondary"]) {
                    background-color: var(--ui-secondary);
                    color: var(--ui-secondary-fg);
                }

                :host([variant="full"][color="destructive"]) {
                    background-color: var(--ui-destructive);
                    color: var(--ui-destructive-fg);
                }

                :host([variant="outline"]) {
                    border-color: currentColor;
                    background-color: transparent;
                }

                :host([variant="outline"][color="primary"]) {
                    color: var(--ui-primary);
                }

                :host([variant="outline"][color="secondary"]) {
                    color: var(--ui-secondary);
                }

                :host([variant="outline"][color="destructive"]) {
                    color: var(--ui-destructive);
                }

                :host([variant="ghost"]) {
                    border-color: transparent;
                    background-color: transparent;
                    font-weight: 900;
                }

                :host([variant="ghost"][color="primary"]) {
                    color: var(--ui-primary);
                }

                :host([variant="ghost"][color="secondary"]) {
                    color: var(--ui-secondary);
                }

                :host([variant="ghost"][color="destructive"]) {
                    color: var(--ui-destructive);
                }

                :host([disabled]),
                :host([disabled]:hover),
                :host([disabled]:active) {
                    background-color: transparent;
                    opacity: 0.25;
                    cursor: default;
                    pointer-events: none;
                }
            </style>

            <slot></slot>
        `, typeof this.ripple != "function" && (this.ripple = R(this)), this.addEventListener("click", (t) => {
    this.ui.events.dispatch("click", t);
  });
}, a(N, "register", () => {
  customElements.get("ui-button") || (console.debug('[ui] Register "ui-button" component'), customElements.define("ui-button", N));
}), a(N, "observedAttributes", ["noripple"]);
let me = N;
me.register();
var $t, pi;
const F = class F extends HTMLElement {
  constructor() {
    super();
    p(this, $t);
    this.ripple = null, this.ui = {
      root: this,
      /**
       * @type {Events<UIIconButton_Events>}
       */
      events: new w(),
      get noripple() {
        return !this.root.ripple;
      },
      set noripple(t) {
        if (!t) {
          this.root.ripple && this.root.ripple.destroy(), this.root.ripple = R(this.root);
          return;
        }
        this.root.ripple && (this.root.ripple.destroy(), this.root.ripple = null);
      },
      get color() {
        return this.root.getAttribute("color");
      },
      /**
       * @param {UIIconButton_Color} value
       */
      set color(t) {
        if (!t) {
          this.root.removeAttribute("color");
          return;
        }
        this.root.setAttribute("color", t);
      },
      get ghost() {
        return this.root.hasAttribute("ghost");
      },
      set ghost(t) {
        if (!t) {
          this.root.removeAttribute("ghost");
          return;
        }
        this.root.setAttribute("ghost", "");
      },
      get disabled() {
        return this.root.hasAttribute("disabled");
      },
      set disabled(t) {
        if (!t) {
          this.root.removeAttribute("disabled");
          return;
        }
        this.root.setAttribute("disabled", "");
      }
    }, g(this, $t, pi).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "noripple":
        this.ui.noripple = r !== null;
        break;
    }
  }
};
$t = new WeakSet(), pi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    position: relative;
                    width: 2.5rem;
                    height: 2.5rem;
                    padding: calc(var(--ui-spacing) / 2);
                    border: 1px solid currentColor;
                    border-radius: var(--ui-radius);
                    outline: none;
                    overflow: hidden;
                    cursor: pointer;
                    user-select: none;
                    font-size: 1.1rem;
                    font-weight: 450;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-button-fontVariation);
                    transition: color 0.5s linear;
                }

                :host([ghost]) {
                    border-color: transparent !important;
                    box-shadow: none;
                    font-weight: 900;
                }

                :host([color="primary"]) {
                    color: var(--ui-primary);
                    border-color: var(--ui-primary);
                }

                :host([color="secondary"]) {
                    color: var(--ui-secondary);
                    border-color: var(--ui-secondary);
                }

                :host([color="destructive"]) {
                    color: var(--ui-destructive);
                    border-color: var(--ui-destructive);
                }

                /* :disabled */

                :host([disabled]),
                :host([disabled]:hover),
                :host([disabled]:active) {
                    opacity: 0.25;
                    cursor: default;
                    pointer-events: none;
                }

                ui-svg {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
            </style>

            <ui-svg>
                <slot></slot>
            </ui-svg>
        `, typeof this.ripple != "function" && (this.ripple = R(this, { centered: !0 })), this.addEventListener("click", (t) => {
    this.ui.events.dispatch("click", t);
  });
}, a(F, "register", () => {
  customElements.get("ui-icon-button") || (console.debug('[ui] Register "ui-icon-button" component'), customElements.define("ui-icon-button", F));
}), a(F, "observedAttributes", ["noripple"]);
let be = F;
be.register();
var Mt, gi;
const Et = class Et extends HTMLElement {
  constructor() {
    super();
    p(this, Mt);
    this.ui = {}, g(this, Mt, gi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
Mt = new WeakSet(), gi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    width: 100%;
                    max-width: 65rem;
                    margin: 0 auto !important;
                    padding: var(--ui-spacing);
                }
            </style>

            <slot></slot>
        `;
}, a(Et, "register", () => {
  customElements.get("ui-container") || (console.debug('[ui] Register "ui-container" component'), customElements.define("ui-container", Et));
});
let ve = Et;
ve.register();
var Rt, fi;
const U = class U extends HTMLElement {
  /**
   * @param {string} title
   */
  constructor(t) {
    super();
    p(this, Rt);
    this._title = t || "", this.ui = {
      root: this,
      /** @type {Events<T>} */
      events: new w(),
      get title() {
        return this.root.shadowRoot.querySelector('[name="title"]').innerHTML;
      },
      set title(i) {
        const r = this.root.shadowRoot.querySelector('[name="title"]');
        this.root._title = r.innerHTML = i || "";
      },
      get fullscreen() {
        return this.root.hasAttribute("fullscreen");
      },
      set fullscreen(i) {
        if (!i) {
          this.root.removeAttribute("fullscreen");
          return;
        }
        this.root.setAttribute("fullscreen", "");
      },
      get nofooter() {
        return this.root.hasAttribute("nofooter");
      },
      set nofooter(i) {
        if (!i) {
          this.root.removeAttribute("nofooter");
          return;
        }
        this.root.setAttribute("nofooter", "");
      },
      /**
       * @param {boolean} modal
       * @param {boolean} [inert] - This will prevent the autofocus on input elements (default: true)
       */
      open(i = !1, r = !0) {
        const s = this.root.shadowRoot.querySelector("dialog"), n = s.inert;
        s.inert = r, i ? s.showModal() : s.show(), this.events.dispatch("open", null), s.inert = n;
      },
      close() {
        this.events.dispatch("close", null), this.root.shadowRoot.querySelector("dialog").close();
      }
    }, g(this, Rt, fi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
    }
  }
  /**
   * @param {object} options
   * @param {string} [options.variant]
   * @param {string} [options.color]
   * @param {string} [options.flex]
   * @param {(() => void|Promise<void>) | null} [options.onClick]
   */
  static createAction({
    variant: t = "full",
    color: i = "primary",
    flex: r = "0",
    onClick: s = null
  }) {
    const n = new ot();
    n.ui.flex = r, n.slot = "actions", n.innerHTML = l`
            <ui-button variant="${t}" color="${i}"></ui-button>
        `;
    let c;
    return s && (c = n.querySelector("ui-button"), c.ui.events.on("click", s)), {
      container: n,
      action: c
    };
  }
};
Rt = new WeakSet(), fi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                dialog {
                    z-index: 998; /* UIAlerts z-index is 999 */

                    position: fixed !important;
                    top: 50%;
                    left: 50%;

                    max-width: 100%;
                    max-height: 100%;

                    margin: 0;
                    padding: 0;

                    border: none;
                    outline: none;

                    background-color: transparent;

                    transform: translate(-50%, -50%);
                }

                dialog::backdrop {
                    background-color: var(--ui-backdrop);
                    -webkit-backdrop-filter: var(--ui-backdropFilter);
                    backdrop-filter: var(--ui-backdropFilter);
                }

                dialog > .container {
                    background-color: var(--ui-bg);
                    color: var(--ui-fg);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    padding: var(--ui-spacing);

                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;

                    position: relative;
                }

                :host([fullscreen]) dialog {
                    width: 100%;
                    height: 100%;
                }

                :host([fullscreen]) dialog > .container {
                    width: calc(100% - var(--ui-spacing) * 2);
                    height: calc(
                        100% -
                            (
                                env(safe-area-inset-top, 0) +
                                    env(safe-area-inset-bottom, 0) +
                                    (var(--ui-spacing) * 2)
                            )
                    );

                    margin: var(--ui-spacing);
                    margin-top: calc(
                        env(safe-area-inset-top, 0) + var(--ui-spacing)
                    );
                    margin-bottom: calc(
                        env(safe-area-inset-bottom, 0) + var(--ui-spacing)
                    );
                }

                /*
                 * Header Styles
                 */

                .header {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;

                    border-top-right-radius: var(--ui-radius);
                    border-top-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-header-height);
                }

                .header [name="title"] {
                    margin: auto 0;
                }

                :host([fullscreen]) .header {
                    z-index: 15;
                    position: absolute;
                    top: var(--ui-spacing);
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                /*
                 * Content Styles
                 */

                .content {
                    padding: var(--ui-spacing);
                    height: fit-content;
                    min-width: fit-content;
                    width: 100%;
                }

                :host([fullscreen]) .content {
                    z-index: 10;
                    position: absolute;
                    top: calc(
                        var(--ui-dialog-header-height) + var(--ui-spacing)
                    );
                    bottom: calc(
                        var(--ui-dialog-footer-height) + var(--ui-spacing)
                    );
                    right: var(--ui-spacing);
                    left: var(--ui-spacing);
                    padding: unset;
                    height: unset;
                    width: unset;
                    min-width: unset;
                }

                :host([nofooter]) .content {
                    bottom: var(--ui-spacing);
                }

                /*
                 * Footer Styles
                 */

                .footer {
                    margin-top: var(--ui-spacing);
                    border-bottom-right-radius: var(--ui-radius);
                    border-bottom-left-radius: var(--ui-radius);

                    width: 100%;
                    height: var(--ui-dialog-footer-height);
                }

                :host([fullscreen]) .footer {
                    z-index: 15;
                    position: absolute;
                    right: var(--ui-spacing);
                    bottom: var(--ui-spacing);
                    left: var(--ui-spacing);
                    width: calc(100% - var(--ui-spacing) * 2);
                }

                .footer ui-flex-grid-row {
                    height: 100%;
                    flex-wrap: nowrap;
                    justify-content: flex-end;
                    align-items: center;
                }

                :host([nofooter]) .footer {
                    display: none;
                }
            </style>

            <dialog class="no-scrollbar">
                <div class="container">
                    <div class="header">
                        <span style="white-space: nowrap;">
                            <h3 name="title"></h3>
                        </span>

                        <ui-icon-button
                            style="width: var(--ui-dialog-header-height); height: 100%;"
                            ghost
                        >
                            ${ii}
                        </ui-icon-button>
                    </div>

                    <div class="content">
                        <slot></slot>
                    </div>

                    <div class="footer">
                        <ui-flex-grid-row gap="calc(var(--ui-spacing) / 2)">
                            <slot name="actions"></slot>
                        </ui-flex-grid-row>
                    </div>
                </div>
            </dialog>
        `, this.ui.title = this._title;
  const t = this.shadowRoot.querySelector(".header ui-icon-button"), i = () => this.ui.close();
  t.addEventListener("click", i);
  const r = this.shadowRoot.querySelector("dialog"), s = (n) => n.preventDefault();
  r.addEventListener("cancel", s);
}, a(U, "register", () => {
  customElements.get("ui-dialog") || (console.debug('[ui] Register "ui-dialog" component'), customElements.define("ui-dialog", U));
}), a(U, "observedAttributes", ["title"]);
let ye = U;
ye.register();
var Ht, mi;
const Tt = class Tt extends HTMLElement {
  constructor() {
    super();
    p(this, Ht);
    this.ui = {
      root: this,
      /**
       * @type {Events<UIDrawer_Events>}
       */
      events: new w(),
      get open() {
        return this.root.hasAttribute("open");
      },
      set open(t) {
        if (!t) {
          this.root.removeAttribute("open"), this.events.dispatch("close", null);
          return;
        }
        history.pushState(null, "ui-drawer", location.href), this.root.setAttribute("open", ""), this.events.dispatch("open", null);
      }
    }, g(this, Ht, mi).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
};
Ht = new WeakSet(), mi = function() {
  this.classList.add("has-backdrop-blur"), this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;

                    position: absolute !important;
                    z-index: 150;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;

                    overflow: hidden;

                    transition: left 0s ease 0.5s;
                }

                :host([open]) {
                    left: 0;
                    transition: none;
                }

                aside {
                    position: absolute;
                    z-index: 150;
                    top: 0;
                    left: -100%;
                    width: var(--ui-drawer-width, fit-content);
                    max-width: calc(100% - 2.5rem);
                    height: 100%;

                    overflow-x: hidden;
                    overflow-y: auto;

                    border-right: 1px solid var(--ui-card-borderColor);

                    transition: left 0.5s ease;
                }

                :host([open]) aside {
                    left: 0;
                }
            </style>

            <aside class="has-backdrop-blur no-scrollbar">
                <slot></slot>
            </aside>
        `, this.shadowRoot.querySelector("aside").addEventListener("click", (t) => t.stopPropagation()), this.addEventListener("click", () => this.ui.open = !1);
}, a(Tt, "register", () => {
  customElements.get("ui-drawer") || (console.debug('[ui] Register "ui-drawer" component'), customElements.define("ui-drawer", Tt));
});
let we = Tt;
we.register();
var jt, bi;
const Y = class Y extends HTMLElement {
  constructor() {
    super();
    p(this, jt);
    this.ui = {
      root: this,
      get title() {
        return this.root.shadowRoot.querySelector(".title").innerHTML;
      },
      set title(t) {
        let i = this.root.shadowRoot.querySelector(".title");
        if (!t) {
          i.classList.remove("visible");
          return;
        }
        i.classList.add("visible"), i.innerHTML = l` <h3>${t}</h3> `;
      },
      get fold() {
        return this.root.hasAttribute("fold");
      },
      set fold(t) {
        if (!t) {
          this.root.removeAttribute("fold");
          return;
        }
        this.root.setAttribute("fold", "");
      },
      get nofold() {
        return this.root.hasAttribute("nofold");
      },
      set nofold(t) {
        if (!t) {
          this.root.removeAttribute("nofold");
          return;
        }
        this.root.setAttribute("nofold", "");
      }
    }, g(this, jt, bi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
    }
  }
};
jt = new WeakSet(), bi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                ul {
                    margin: 0;
                    list-style: none;
                    padding: var(--ui-spacing);
                    overflow: hidden;
                }

                ui-drawer-group-item {
                    display: flex;
                    cursor: pointer;
                }

                .title:not(.visible) {
                    display: none;
                }

                .icon {
                    transition: transform 0.25s ease;
                }

                :host([fold]) .icon {
                    transform: rotate(-90deg);
                }

                :host([fold]):host(:not([nofold])) ::slotted(*) {
                    display: none !important;
                }

                :host([nofold]) ui-drawer-group-item:nth-child(1) {
                    display: none;
                }
            </style>

            <ul>
                <ui-drawer-group-item
                    style="position: relative; border-radius: var(--ui-radius);"
                    role="button"
                >
                    <ui-flex-grid-row>
                        <ui-flex-grid-item class="title"></ui-flex-grid-item>

                        <ui-flex-grid-item class="icon" flex="0">
                            <ui-svg style="width: 2.5rem; height: 2.5rem;">
                                ${Oe}
                            </ui-svg>
                        </ui-flex-grid-item>
                    </ui-flex-grid-row>
                </ui-drawer-group-item>

                <slot></slot>
            </ul>
        `;
  const t = this.shadowRoot.querySelector("ui-drawer-group-item");
  t.addEventListener("click", () => {
    this.ui.fold = !this.ui.fold;
  }), R(t);
}, a(Y, "register", () => {
  customElements.get("ui-drawer-group") || (console.debug('[ui] Register "ui-drawer-group" component'), customElements.define("ui-drawer-group", Y));
}), a(Y, "observedAttributes", ["title"]);
let ke = Y;
ke.register();
var Vt, vi;
const Ot = class Ot extends HTMLElement {
  constructor() {
    super();
    p(this, Vt);
    this.ui = {}, g(this, Vt, vi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
Vt = new WeakSet(), vi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    width: 100%;
                }

                li {
                    display: flex;
                    flex-direction: row;
                    flex-wrap: nowrap;

                    width: 100%;

                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 1.5);
                }

                ::slotted(*) {
                    width: 100%;
                }
            </style>

            <li>
                <slot></slot>
            </li>
        `;
}, a(Ot, "register", () => {
  customElements.get("ui-drawer-group-item") || (console.debug('[ui] Register "ui-drawer-group-item" component'), customElements.define("ui-drawer-group-item", Ot));
});
let Ce = Ot;
Ce.register();
var Pt, yi;
const W = class W extends HTMLElement {
  constructor() {
    super();
    p(this, Pt);
    this.ui = {
      /** @type {Events<E>} */
      events: new w(),
      /**
       * @type {HTMLInputElement | null}
       */
      input: null,
      get checked() {
        return this.input.checked;
      },
      set checked(t) {
        this.input.checked = t;
      }
    }, g(this, Pt, yi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "checked":
        this.ui.checked = r !== null;
        break;
    }
  }
  click() {
    this.ui.input.click();
  }
};
Pt = new WeakSet(), yi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                input {
                    --ui-bg: "transparent";

                    display: inline-block;

                    height: 1.5rem;
                    width: 1.5rem;

                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);

                    border: 1px solid var(--ui-primary);
                    border-radius: var(--ui-radius);

                    accent-color: var(--ui-primary);
                    color: var(--ui-fg);
                    background-color: var(--ui-bg);

                    box-shadow: none;
                    outline: none;
                    cursor: pointer;

                    transition: border-color 0.25s linear;
                }

                input:disabled {
                    cursor: default;
                    user-select: none;
                }
            </style>

            <input type="checkbox"></input>
        `, this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.onchange = () => {
    this.ui.events.dispatch("change", this.ui.checked);
  }, this.ui.input.oninput = () => {
    this.ui.events.dispatch("input", this.ui.checked);
  };
}, a(W, "register", () => {
  customElements.get("ui-check") || (console.debug('[ui] Register "ui-check" component'), customElements.define("ui-check", W));
}), a(W, "observedAttributes", ["checked"]);
let xe = W;
xe.register();
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const pt = globalThis, Pe = pt.ShadowRoot && (pt.ShadyCSS === void 0 || pt.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, Ze = Symbol(), Ne = /* @__PURE__ */ new WeakMap();
let wi = class {
  constructor(e, t, i) {
    if (this._$cssResult$ = !0, i !== Ze) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = e, this.t = t;
  }
  get styleSheet() {
    let e = this.o;
    const t = this.t;
    if (Pe && e === void 0) {
      const i = t !== void 0 && t.length === 1;
      i && (e = Ne.get(t)), e === void 0 && ((this.o = e = new CSSStyleSheet()).replaceSync(this.cssText), i && Ne.set(t, e));
    }
    return e;
  }
  toString() {
    return this.cssText;
  }
};
const ar = (o) => new wi(typeof o == "string" ? o : o + "", void 0, Ze), lr = (o, ...e) => {
  const t = o.length === 1 ? o[0] : e.reduce((i, r, s) => i + ((n) => {
    if (n._$cssResult$ === !0) return n.cssText;
    if (typeof n == "number") return n;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + n + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(r) + o[s + 1], o[0]);
  return new wi(t, o, Ze);
}, cr = (o, e) => {
  if (Pe) o.adoptedStyleSheets = e.map((t) => t instanceof CSSStyleSheet ? t : t.styleSheet);
  else for (const t of e) {
    const i = document.createElement("style"), r = pt.litNonce;
    r !== void 0 && i.setAttribute("nonce", r), i.textContent = t.cssText, o.appendChild(i);
  }
}, Fe = Pe ? (o) => o : (o) => o instanceof CSSStyleSheet ? ((e) => {
  let t = "";
  for (const i of e.cssRules) t += i.cssText;
  return ar(t);
})(o) : o;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const { is: ur, defineProperty: hr, getOwnPropertyDescriptor: dr, getOwnPropertyNames: pr, getOwnPropertySymbols: gr, getPrototypeOf: fr } = Object, L = globalThis, Ue = L.trustedTypes, mr = Ue ? Ue.emptyScript : "", oe = L.reactiveElementPolyfillSupport, z = (o, e) => o, gt = { toAttribute(o, e) {
  switch (e) {
    case Boolean:
      o = o ? mr : null;
      break;
    case Object:
    case Array:
      o = o == null ? o : JSON.stringify(o);
  }
  return o;
}, fromAttribute(o, e) {
  let t = o;
  switch (e) {
    case Boolean:
      t = o !== null;
      break;
    case Number:
      t = o === null ? null : Number(o);
      break;
    case Object:
    case Array:
      try {
        t = JSON.parse(o);
      } catch {
        t = null;
      }
  }
  return t;
} }, ze = (o, e) => !ur(o, e), Ye = { attribute: !0, type: String, converter: gt, reflect: !1, hasChanged: ze };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), L.litPropertyMetadata ?? (L.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
class T extends HTMLElement {
  static addInitializer(e) {
    this._$Ei(), (this.l ?? (this.l = [])).push(e);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(e, t = Ye) {
    if (t.state && (t.attribute = !1), this._$Ei(), this.elementProperties.set(e, t), !t.noAccessor) {
      const i = Symbol(), r = this.getPropertyDescriptor(e, i, t);
      r !== void 0 && hr(this.prototype, e, r);
    }
  }
  static getPropertyDescriptor(e, t, i) {
    const { get: r, set: s } = dr(this.prototype, e) ?? { get() {
      return this[t];
    }, set(n) {
      this[t] = n;
    } };
    return { get() {
      return r == null ? void 0 : r.call(this);
    }, set(n) {
      const c = r == null ? void 0 : r.call(this);
      s.call(this, n), this.requestUpdate(e, c, i);
    }, configurable: !0, enumerable: !0 };
  }
  static getPropertyOptions(e) {
    return this.elementProperties.get(e) ?? Ye;
  }
  static _$Ei() {
    if (this.hasOwnProperty(z("elementProperties"))) return;
    const e = fr(this);
    e.finalize(), e.l !== void 0 && (this.l = [...e.l]), this.elementProperties = new Map(e.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(z("finalized"))) return;
    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(z("properties"))) {
      const t = this.properties, i = [...pr(t), ...gr(t)];
      for (const r of i) this.createProperty(r, t[r]);
    }
    const e = this[Symbol.metadata];
    if (e !== null) {
      const t = litPropertyMetadata.get(e);
      if (t !== void 0) for (const [i, r] of t) this.elementProperties.set(i, r);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [t, i] of this.elementProperties) {
      const r = this._$Eu(t, i);
      r !== void 0 && this._$Eh.set(r, t);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(e) {
    const t = [];
    if (Array.isArray(e)) {
      const i = new Set(e.flat(1 / 0).reverse());
      for (const r of i) t.unshift(Fe(r));
    } else e !== void 0 && t.push(Fe(e));
    return t;
  }
  static _$Eu(e, t) {
    const i = t.attribute;
    return i === !1 ? void 0 : typeof i == "string" ? i : typeof e == "string" ? e.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var e;
    this._$ES = new Promise((t) => this.enableUpdating = t), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (e = this.constructor.l) == null || e.forEach((t) => t(this));
  }
  addController(e) {
    var t;
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(e), this.renderRoot !== void 0 && this.isConnected && ((t = e.hostConnected) == null || t.call(e));
  }
  removeController(e) {
    var t;
    (t = this._$EO) == null || t.delete(e);
  }
  _$E_() {
    const e = /* @__PURE__ */ new Map(), t = this.constructor.elementProperties;
    for (const i of t.keys()) this.hasOwnProperty(i) && (e.set(i, this[i]), delete this[i]);
    e.size > 0 && (this._$Ep = e);
  }
  createRenderRoot() {
    const e = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return cr(e, this.constructor.elementStyles), e;
  }
  connectedCallback() {
    var e;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), (e = this._$EO) == null || e.forEach((t) => {
      var i;
      return (i = t.hostConnected) == null ? void 0 : i.call(t);
    });
  }
  enableUpdating(e) {
  }
  disconnectedCallback() {
    var e;
    (e = this._$EO) == null || e.forEach((t) => {
      var i;
      return (i = t.hostDisconnected) == null ? void 0 : i.call(t);
    });
  }
  attributeChangedCallback(e, t, i) {
    this._$AK(e, i);
  }
  _$EC(e, t) {
    var s;
    const i = this.constructor.elementProperties.get(e), r = this.constructor._$Eu(e, i);
    if (r !== void 0 && i.reflect === !0) {
      const n = (((s = i.converter) == null ? void 0 : s.toAttribute) !== void 0 ? i.converter : gt).toAttribute(t, i.type);
      this._$Em = e, n == null ? this.removeAttribute(r) : this.setAttribute(r, n), this._$Em = null;
    }
  }
  _$AK(e, t) {
    var s;
    const i = this.constructor, r = i._$Eh.get(e);
    if (r !== void 0 && this._$Em !== r) {
      const n = i.getPropertyOptions(r), c = typeof n.converter == "function" ? { fromAttribute: n.converter } : ((s = n.converter) == null ? void 0 : s.fromAttribute) !== void 0 ? n.converter : gt;
      this._$Em = r, this[r] = c.fromAttribute(t, n.type), this._$Em = null;
    }
  }
  requestUpdate(e, t, i) {
    if (e !== void 0) {
      if (i ?? (i = this.constructor.getPropertyOptions(e)), !(i.hasChanged ?? ze)(this[e], t)) return;
      this.P(e, t, i);
    }
    this.isUpdatePending === !1 && (this._$ES = this._$ET());
  }
  P(e, t, i) {
    this._$AL.has(e) || this._$AL.set(e, t), i.reflect === !0 && this._$Em !== e && (this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Set())).add(e);
  }
  async _$ET() {
    this.isUpdatePending = !0;
    try {
      await this._$ES;
    } catch (t) {
      Promise.reject(t);
    }
    const e = this.scheduleUpdate();
    return e != null && await e, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var i;
    if (!this.isUpdatePending) return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [s, n] of this._$Ep) this[s] = n;
        this._$Ep = void 0;
      }
      const r = this.constructor.elementProperties;
      if (r.size > 0) for (const [s, n] of r) n.wrapped !== !0 || this._$AL.has(s) || this[s] === void 0 || this.P(s, this[s], n);
    }
    let e = !1;
    const t = this._$AL;
    try {
      e = this.shouldUpdate(t), e ? (this.willUpdate(t), (i = this._$EO) == null || i.forEach((r) => {
        var s;
        return (s = r.hostUpdate) == null ? void 0 : s.call(r);
      }), this.update(t)) : this._$EU();
    } catch (r) {
      throw e = !1, this._$EU(), r;
    }
    e && this._$AE(t);
  }
  willUpdate(e) {
  }
  _$AE(e) {
    var t;
    (t = this._$EO) == null || t.forEach((i) => {
      var r;
      return (r = i.hostUpdated) == null ? void 0 : r.call(i);
    }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(e)), this.updated(e);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = !1;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(e) {
    return !0;
  }
  update(e) {
    this._$Ej && (this._$Ej = this._$Ej.forEach((t) => this._$EC(t, this[t]))), this._$EU();
  }
  updated(e) {
  }
  firstUpdated(e) {
  }
}
T.elementStyles = [], T.shadowRootOptions = { mode: "open" }, T[z("elementProperties")] = /* @__PURE__ */ new Map(), T[z("finalized")] = /* @__PURE__ */ new Map(), oe == null || oe({ ReactiveElement: T }), (L.reactiveElementVersions ?? (L.reactiveElementVersions = [])).push("2.0.4");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const B = globalThis, ft = B.trustedTypes, We = ft ? ft.createPolicy("lit-html", { createHTML: (o) => o }) : void 0, ki = "$lit$", x = `lit$${Math.random().toFixed(9).slice(2)}$`, Ci = "?" + x, br = `<${Ci}>`, H = document, st = () => H.createComment(""), nt = (o) => o === null || typeof o != "object" && typeof o != "function", Be = Array.isArray, vr = (o) => Be(o) || typeof (o == null ? void 0 : o[Symbol.iterator]) == "function", se = `[ 	
\f\r]`, Z = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, Je = /-->/g, Xe = />/g, $ = RegExp(`>|${se}(?:([^\\s"'>=/]+)(${se}*=${se}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g"), Ke = /'/g, Qe = /"/g, xi = /^(?:script|style|textarea|title)$/i, yr = (o) => (e, ...t) => ({ _$litType$: o, strings: e, values: t }), wr = yr(1), V = Symbol.for("lit-noChange"), v = Symbol.for("lit-nothing"), Ie = /* @__PURE__ */ new WeakMap(), M = H.createTreeWalker(H, 129);
function Li(o, e) {
  if (!Be(o) || !o.hasOwnProperty("raw")) throw Error("invalid template strings array");
  return We !== void 0 ? We.createHTML(e) : e;
}
const kr = (o, e) => {
  const t = o.length - 1, i = [];
  let r, s = e === 2 ? "<svg>" : e === 3 ? "<math>" : "", n = Z;
  for (let c = 0; c < t; c++) {
    const u = o[c];
    let f, b, d = -1, y = 0;
    for (; y < u.length && (n.lastIndex = y, b = n.exec(u), b !== null); ) y = n.lastIndex, n === Z ? b[1] === "!--" ? n = Je : b[1] !== void 0 ? n = Xe : b[2] !== void 0 ? (xi.test(b[2]) && (r = RegExp("</" + b[2], "g")), n = $) : b[3] !== void 0 && (n = $) : n === $ ? b[0] === ">" ? (n = r ?? Z, d = -1) : b[1] === void 0 ? d = -2 : (d = n.lastIndex - b[2].length, f = b[1], n = b[3] === void 0 ? $ : b[3] === '"' ? Qe : Ke) : n === Qe || n === Ke ? n = $ : n === Je || n === Xe ? n = Z : (n = $, r = void 0);
    const h = n === $ && o[c + 1].startsWith("/>") ? " " : "";
    s += n === Z ? u + br : d >= 0 ? (i.push(f), u.slice(0, d) + ki + u.slice(d) + x + h) : u + x + (d === -2 ? c : h);
  }
  return [Li(o, s + (o[t] || "<?>") + (e === 2 ? "</svg>" : e === 3 ? "</math>" : "")), i];
};
class at {
  constructor({ strings: e, _$litType$: t }, i) {
    let r;
    this.parts = [];
    let s = 0, n = 0;
    const c = e.length - 1, u = this.parts, [f, b] = kr(e, t);
    if (this.el = at.createElement(f, i), M.currentNode = this.el.content, t === 2 || t === 3) {
      const d = this.el.content.firstChild;
      d.replaceWith(...d.childNodes);
    }
    for (; (r = M.nextNode()) !== null && u.length < c; ) {
      if (r.nodeType === 1) {
        if (r.hasAttributes()) for (const d of r.getAttributeNames()) if (d.endsWith(ki)) {
          const y = b[n++], h = r.getAttribute(d).split(x), _ = /([.?@])?(.*)/.exec(y);
          u.push({ type: 1, index: s, name: _[2], strings: h, ctor: _[1] === "." ? xr : _[1] === "?" ? Lr : _[1] === "@" ? Sr : It }), r.removeAttribute(d);
        } else d.startsWith(x) && (u.push({ type: 6, index: s }), r.removeAttribute(d));
        if (xi.test(r.tagName)) {
          const d = r.textContent.split(x), y = d.length - 1;
          if (y > 0) {
            r.textContent = ft ? ft.emptyScript : "";
            for (let h = 0; h < y; h++) r.append(d[h], st()), M.nextNode(), u.push({ type: 2, index: ++s });
            r.append(d[y], st());
          }
        }
      } else if (r.nodeType === 8) if (r.data === Ci) u.push({ type: 2, index: s });
      else {
        let d = -1;
        for (; (d = r.data.indexOf(x, d + 1)) !== -1; ) u.push({ type: 7, index: s }), d += x.length - 1;
      }
      s++;
    }
  }
  static createElement(e, t) {
    const i = H.createElement("template");
    return i.innerHTML = e, i;
  }
}
function O(o, e, t = o, i) {
  var n, c;
  if (e === V) return e;
  let r = i !== void 0 ? (n = t._$Co) == null ? void 0 : n[i] : t._$Cl;
  const s = nt(e) ? void 0 : e._$litDirective$;
  return (r == null ? void 0 : r.constructor) !== s && ((c = r == null ? void 0 : r._$AO) == null || c.call(r, !1), s === void 0 ? r = void 0 : (r = new s(o), r._$AT(o, t, i)), i !== void 0 ? (t._$Co ?? (t._$Co = []))[i] = r : t._$Cl = r), r !== void 0 && (e = O(o, r._$AS(o, e.values), r, i)), e;
}
class Cr {
  constructor(e, t) {
    this._$AV = [], this._$AN = void 0, this._$AD = e, this._$AM = t;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(e) {
    const { el: { content: t }, parts: i } = this._$AD, r = ((e == null ? void 0 : e.creationScope) ?? H).importNode(t, !0);
    M.currentNode = r;
    let s = M.nextNode(), n = 0, c = 0, u = i[0];
    for (; u !== void 0; ) {
      if (n === u.index) {
        let f;
        u.type === 2 ? f = new ht(s, s.nextSibling, this, e) : u.type === 1 ? f = new u.ctor(s, u.name, u.strings, this, e) : u.type === 6 && (f = new _r(s, this, e)), this._$AV.push(f), u = i[++c];
      }
      n !== (u == null ? void 0 : u.index) && (s = M.nextNode(), n++);
    }
    return M.currentNode = H, r;
  }
  p(e) {
    let t = 0;
    for (const i of this._$AV) i !== void 0 && (i.strings !== void 0 ? (i._$AI(e, i, t), t += i.strings.length - 2) : i._$AI(e[t])), t++;
  }
}
class ht {
  get _$AU() {
    var e;
    return ((e = this._$AM) == null ? void 0 : e._$AU) ?? this._$Cv;
  }
  constructor(e, t, i, r) {
    this.type = 2, this._$AH = v, this._$AN = void 0, this._$AA = e, this._$AB = t, this._$AM = i, this.options = r, this._$Cv = (r == null ? void 0 : r.isConnected) ?? !0;
  }
  get parentNode() {
    let e = this._$AA.parentNode;
    const t = this._$AM;
    return t !== void 0 && (e == null ? void 0 : e.nodeType) === 11 && (e = t.parentNode), e;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(e, t = this) {
    e = O(this, e, t), nt(e) ? e === v || e == null || e === "" ? (this._$AH !== v && this._$AR(), this._$AH = v) : e !== this._$AH && e !== V && this._(e) : e._$litType$ !== void 0 ? this.$(e) : e.nodeType !== void 0 ? this.T(e) : vr(e) ? this.k(e) : this._(e);
  }
  O(e) {
    return this._$AA.parentNode.insertBefore(e, this._$AB);
  }
  T(e) {
    this._$AH !== e && (this._$AR(), this._$AH = this.O(e));
  }
  _(e) {
    this._$AH !== v && nt(this._$AH) ? this._$AA.nextSibling.data = e : this.T(H.createTextNode(e)), this._$AH = e;
  }
  $(e) {
    var s;
    const { values: t, _$litType$: i } = e, r = typeof i == "number" ? this._$AC(e) : (i.el === void 0 && (i.el = at.createElement(Li(i.h, i.h[0]), this.options)), i);
    if (((s = this._$AH) == null ? void 0 : s._$AD) === r) this._$AH.p(t);
    else {
      const n = new Cr(r, this), c = n.u(this.options);
      n.p(t), this.T(c), this._$AH = n;
    }
  }
  _$AC(e) {
    let t = Ie.get(e.strings);
    return t === void 0 && Ie.set(e.strings, t = new at(e)), t;
  }
  k(e) {
    Be(this._$AH) || (this._$AH = [], this._$AR());
    const t = this._$AH;
    let i, r = 0;
    for (const s of e) r === t.length ? t.push(i = new ht(this.O(st()), this.O(st()), this, this.options)) : i = t[r], i._$AI(s), r++;
    r < t.length && (this._$AR(i && i._$AB.nextSibling, r), t.length = r);
  }
  _$AR(e = this._$AA.nextSibling, t) {
    var i;
    for ((i = this._$AP) == null ? void 0 : i.call(this, !1, !0, t); e && e !== this._$AB; ) {
      const r = e.nextSibling;
      e.remove(), e = r;
    }
  }
  setConnected(e) {
    var t;
    this._$AM === void 0 && (this._$Cv = e, (t = this._$AP) == null || t.call(this, e));
  }
}
class It {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(e, t, i, r, s) {
    this.type = 1, this._$AH = v, this._$AN = void 0, this.element = e, this.name = t, this._$AM = r, this.options = s, i.length > 2 || i[0] !== "" || i[1] !== "" ? (this._$AH = Array(i.length - 1).fill(new String()), this.strings = i) : this._$AH = v;
  }
  _$AI(e, t = this, i, r) {
    const s = this.strings;
    let n = !1;
    if (s === void 0) e = O(this, e, t, 0), n = !nt(e) || e !== this._$AH && e !== V, n && (this._$AH = e);
    else {
      const c = e;
      let u, f;
      for (e = s[0], u = 0; u < s.length - 1; u++) f = O(this, c[i + u], t, u), f === V && (f = this._$AH[u]), n || (n = !nt(f) || f !== this._$AH[u]), f === v ? e = v : e !== v && (e += (f ?? "") + s[u + 1]), this._$AH[u] = f;
    }
    n && !r && this.j(e);
  }
  j(e) {
    e === v ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, e ?? "");
  }
}
class xr extends It {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(e) {
    this.element[this.name] = e === v ? void 0 : e;
  }
}
class Lr extends It {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(e) {
    this.element.toggleAttribute(this.name, !!e && e !== v);
  }
}
class Sr extends It {
  constructor(e, t, i, r, s) {
    super(e, t, i, r, s), this.type = 5;
  }
  _$AI(e, t = this) {
    if ((e = O(this, e, t, 0) ?? v) === V) return;
    const i = this._$AH, r = e === v && i !== v || e.capture !== i.capture || e.once !== i.once || e.passive !== i.passive, s = e !== v && (i === v || r);
    r && this.element.removeEventListener(this.name, this, i), s && this.element.addEventListener(this.name, this, e), this._$AH = e;
  }
  handleEvent(e) {
    var t;
    typeof this._$AH == "function" ? this._$AH.call(((t = this.options) == null ? void 0 : t.host) ?? this.element, e) : this._$AH.handleEvent(e);
  }
}
class _r {
  constructor(e, t, i) {
    this.element = e, this.type = 6, this._$AN = void 0, this._$AM = t, this.options = i;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(e) {
    O(this, e);
  }
}
const ne = B.litHtmlPolyfillSupport;
ne == null || ne(at, ht), (B.litHtmlVersions ?? (B.litHtmlVersions = [])).push("3.2.1");
const Ar = (o, e, t) => {
  const i = (t == null ? void 0 : t.renderBefore) ?? e;
  let r = i._$litPart$;
  if (r === void 0) {
    const s = (t == null ? void 0 : t.renderBefore) ?? null;
    i._$litPart$ = r = new ht(e.insertBefore(st(), s), s, void 0, t ?? {});
  }
  return r._$AI(o), r;
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
let j = class extends T {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var t;
    const e = super.createRenderRoot();
    return (t = this.renderOptions).renderBefore ?? (t.renderBefore = e.firstChild), e;
  }
  update(e) {
    const t = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(e), this._$Do = Ar(t, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var e;
    super.connectedCallback(), (e = this._$Do) == null || e.setConnected(!0);
  }
  disconnectedCallback() {
    var e;
    super.disconnectedCallback(), (e = this._$Do) == null || e.setConnected(!1);
  }
  render() {
    return V;
  }
};
var ei;
j._$litElement$ = !0, j.finalized = !0, (ei = globalThis.litElementHydrateSupport) == null || ei.call(globalThis, { LitElement: j });
const ae = globalThis.litElementPolyfillSupport;
ae == null || ae({ LitElement: j });
(globalThis.litElementVersions ?? (globalThis.litElementVersions = [])).push("4.1.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Ge = (o) => (e, t) => {
  t !== void 0 ? t.addInitializer(() => {
    customElements.define(o, e);
  }) : customElements.define(o, e);
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const $r = { attribute: !0, type: String, converter: gt, reflect: !1, hasChanged: ze }, Mr = (o = $r, e, t) => {
  const { kind: i, metadata: r } = t;
  let s = globalThis.litPropertyMetadata.get(r);
  if (s === void 0 && globalThis.litPropertyMetadata.set(r, s = /* @__PURE__ */ new Map()), s.set(t.name, o), i === "accessor") {
    const { name: n } = t;
    return { set(c) {
      const u = e.get.call(this);
      e.set.call(this, c), this.requestUpdate(n, u, o);
    }, init(c) {
      return c !== void 0 && this.P(n, void 0, o), c;
    } };
  }
  if (i === "setter") {
    const { name: n } = t;
    return function(c) {
      const u = this[n];
      e.call(this, c), this.requestUpdate(n, u, o);
    };
  }
  throw Error("Unsupported decorator location: " + i);
};
function S(o) {
  return (e, t) => typeof t == "object" ? Mr(o, e, t) : ((i, r, s) => {
    const n = r.hasOwnProperty(s);
    return r.constructor.createProperty(s, n ? { ...i, wrapped: !0 } : i), n ? Object.getOwnPropertyDescriptor(r, s) : void 0;
  })(o, e, t);
}
var Er = Object.defineProperty, Rr = Object.getOwnPropertyDescriptor, P = (o, e, t, i) => {
  for (var r = i > 1 ? void 0 : i ? Rr(e, t) : e, s = o.length - 1, n; s >= 0; s--)
    (n = o[s]) && (r = (i ? n(e, t, r) : n(r)) || r);
  return i && r && Er(e, t, r), r;
};
let k = class extends j {
  constructor() {
    super(...arguments);
    a(this, "casl", 1);
    a(this, "mono", 0);
    a(this, "slnt", 0);
    a(this, "size", "var(--ui-fontSize)");
    a(this, "family", "var(--ui-fontFamily)");
  }
  static get styles() {
    return lr`
            :host {
                display: inline-block;
                overflow-wrap: anywhere;

                font-size: var(--ui-text-size, var(--ui-fontSize));
                font-family: var(--ui-text-family, var(--ui-fontFamily));
                font-variation-settings:
                    "CASL" var(--ui-text-casl, 1),
                    "MONO" var(--ui-text-mono, 0),
                    "slnt" var(--ui-text-slnt, 0);
            }
        `;
  }
  render() {
    return wr` <slot></slot> `;
  }
  attributeChangedCallback(e, t, i) {
    switch (super.attributeChangedCallback(e, t, i), e) {
      case "casl":
      case "mono":
      case "slnt":
      case "size":
      case "family":
        if (i === null) {
          this.style.removeProperty(`--${e}`);
          return;
        }
        this.style.setProperty(`--${e}`, i);
        break;
    }
  }
};
P([
  S()
], k.prototype, "casl", 2);
P([
  S()
], k.prototype, "mono", 2);
P([
  S()
], k.prototype, "slnt", 2);
P([
  S()
], k.prototype, "size", 2);
P([
  S()
], k.prototype, "family", 2);
k = P([
  Ge("ui-text")
], k);
var Zt, Si;
const J = class J extends HTMLElement {
  constructor() {
    super();
    p(this, Zt);
    this.ripple = null, this.running = !1, this.onClick = async () => {
      this.ui.inputSlot.forEach((t) => {
        t.click();
      });
    }, this.onInputClick = async (t) => {
      t.stopPropagation();
    }, this.ui = {
      root: this,
      get ripple() {
        return this.root.running;
      },
      set ripple(t) {
        if (!t) {
          this.root.disableRipple();
          return;
        }
        this.root.enableRipple();
      },
      get primary() {
        return this.root.shadowRoot.querySelector("ui-primary").innerHTML;
      },
      set primary(t) {
        this.root.shadowRoot.querySelector("ui-primary").innerHTML = t || "";
      },
      get secondary() {
        return this.root.shadowRoot.querySelector("ui-secondary").innerHTML;
      },
      set secondary(t) {
        this.root.shadowRoot.querySelector("ui-secondary").innerHTML = t || "";
      },
      get inputSlot() {
        return [...this.root.querySelectorAll('[slot="inputs"]')];
      }
    }, g(this, Zt, Si).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "ripple":
        this.ui.ripple = r !== null;
        break;
      case "primary":
        this.ui.primary = r;
        break;
      case "secondary":
        this.ui.secondary = r;
        break;
    }
  }
  enableRipple() {
    if (this.ripple || (this.ripple = R(
      this.shadowRoot.querySelector(".container")
    ), this.style.cursor = "pointer", this.running)) return;
    this.addEventListener("click", this.onClick), [...this.querySelectorAll('[slot="inputs"]')].forEach((i) => {
      i.addEventListener("click", this.onInputClick);
    }), this.running = !0;
  }
  disableRipple() {
    this.running && (this.ripple && this.ripple.destroy(), this.removeEventListener("click", this.onClick), this.ui.inputSlot.forEach((t) => {
      t.removeEventListener("click", this.onInputClick);
    }), this.running = !1);
  }
};
Zt = new WeakSet(), Si = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                }

                .container {
                    display: flex !important;
                    flex-direction: row;

                    position: relative;
                    width: 100%;

                    padding: var(--ui-spacing);

                    border-radius: var(--ui-radius);
                }

                .container > .text {
                    flex: 1;

                    margin-right: var(--ui-spacing);
                }
            </style>

            <div class="container">
                <span class="text flex column justify-center">
                    <ui-primary></ui-primary>
                    <ui-secondary></ui-secondary>
                </span>

                <span class="flex row justify-end align-center">
                    <slot name="inputs"></slot>
                    <slot></slot>
                </span>
            </div>
        `;
}, a(J, "register", () => {
  customElements.get("ui-label") || (console.debug('[ui] Register "ui-label" component'), customElements.define("ui-label", J));
}), a(J, "observedAttributes", ["ripple", "secondary", "primary"]);
let Le = J;
Le.register();
var zt, _i;
const Bt = class Bt extends k {
  constructor() {
    super();
    p(this, zt);
    g(this, zt, _i).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
zt = new WeakSet(), _i = function() {
  this.ui.size = "1.1rem", this.ui.casl = 1, this.ui.mono = 0, this.ui.slnt = 0;
}, a(Bt, "register", () => {
  customElements.get("ui-primary") || (console.debug('[ui] Register "ui-primary" component'), customElements.define("ui-primary", Bt));
});
let Se = Bt;
Se.register();
var Hr = Object.defineProperty, Tr = Object.getOwnPropertyDescriptor, jr = (o, e, t, i) => {
  for (var r = i > 1 ? void 0 : i ? Tr(e, t) : e, s = o.length - 1, n; s >= 0; s--)
    (n = o[s]) && (r = (i ? n(e, t, r) : n(r)) || r);
  return i && r && Hr(e, t, r), r;
};
let lt = class extends k {
  update(o) {
    super.update(o), this.size = "0.9rem", this.casl = 1, this.mono = 0, this.slnt = -15;
  }
};
lt = jr([
  Ge("ui-secondary")
], lt);
var Gt, Ai;
const X = class X extends HTMLElement {
  constructor() {
    super();
    p(this, Gt);
    this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new w(),
      /** @type {HTMLInputElement | null} */
      input: null,
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        let i = this.root.querySelector('[slot="title"]');
        !t && i && this.root.removeChild(i), t && (i || (i = new lt(), i.slot = "title", this.root.appendChild(i)), i.innerHTML = t);
      },
      get type() {
        return this.input.type;
      },
      set type(t) {
        this.input.type = t || "";
      },
      get value() {
        return this.input.value;
      },
      set value(t) {
        this.input.value = t;
      },
      get placeholder() {
        return this.input.placeholder;
      },
      set placeholder(t) {
        this.input.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get min() {
        return this.input.min;
      },
      set min(t) {
        this.input.min = t;
      },
      get max() {
        return this.input.max;
      },
      set max(t) {
        this.input.max = t;
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      }
    }, g(this, Gt, Ai).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
      case "type":
        this.ui.type = r;
        break;
      case "value":
        this.ui.value = r;
        break;
      case "placeholder":
        this.ui.placeholder = r;
        break;
      case "invalid":
        this.ui.input.ariaInvalid = r !== null ? "" : null;
        break;
      case "min":
        this.ui.min = r;
        break;
      case "max":
        this.ui.max = r;
        break;
    }
  }
};
Gt = new WeakSet(), Ai = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;

                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                input {
                    display: block;

                    width: 100%;

                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);

                    accent-color: var(--ui-primary);
                    background-color: transparent;

                    outline: none !important;
                    border: none !important;
                    border-radius: inherit;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                }

                .container {
                    width: 100%;

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    transition: border-color 0.25s linear;
                }

                .container:has(input:focus) {
                    border-color: var(--ui-primary);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }
            </style>

            <div class="container">
                <slot name="title"></slot>
                <input />
            </div>
        `, this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = this.getAttribute("type") || "text", this.ui.input.oninput = () => {
    this.ui.events.dispatch("input", this.ui.input.value);
  }, this.ui.input.onchange = () => {
    this.ui.events.dispatch("change", this.ui.input.value);
  };
}, a(X, "register", () => {
  customElements.get("ui-input") || (console.debug('[ui] Register "ui-input" component'), customElements.define("ui-input", X));
}), a(X, "observedAttributes", [
  "title",
  "type",
  "value",
  "placeholder",
  "invalid",
  "min",
  "max"
]);
let _e = X;
_e.register();
var qt, $i;
const K = class K extends HTMLElement {
  constructor() {
    super();
    p(this, qt);
    this.storagekey = "", this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new w(),
      /** @type {HTMLInputElement | null} */
      input: null,
      /** @type {import("../ui-button").UIIconButton} */
      submit: this.querySelector('[name="submit"]'),
      get title() {
        return this.root.querySelector('[slot="title"]').innerHTML;
      },
      set title(t) {
        let i = this.root.querySelector('[slot="title"]');
        !t && i && this.root.removeChild(i), t && (i || (i = new lt(), i.slot = "title", this.root.appendChild(i)), i.innerHTML = t);
      },
      get value() {
        return this.input.value;
      },
      set value(t) {
        this.input.value = t;
      },
      get placeholder() {
        return this.input.placeholder;
      },
      set placeholder(t) {
        this.input.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get nosubmit() {
        return this.submit.style.display === "none";
      },
      set nosubmit(t) {
        if (!t) {
          this.submit.style.display = null;
          return;
        }
        this.submit.style.display = "none";
      },
      get storage() {
        return this.root.hasAttribute("storage");
      },
      set storage(t) {
        if (!t) {
          this.root.removeAttribute("storage");
          return;
        }
        this.root.setAttribute("storage", "");
      },
      get storageprefix() {
        return this.root.getAttribute("storageprefix");
      },
      set storageprefix(t) {
        if (!t) {
          this.root.removeAttribute("storageprefix");
          return;
        }
        this.root.setAttribute("storageprefix", t);
      },
      get storagekey() {
        return this.root.storagekey;
      },
      set storagekey(t) {
        this.root.storagekey = t, this.storage && (this.value = localStorage.getItem(
          this.storageprefix + this.root.storagekey
        ) || "", this.events.dispatch("storage", this.value));
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("input").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("input").blur();
      }
    }, g(this, qt, $i).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
      case "value":
        this.ui.value = r;
        break;
      case "placeholder":
        this.ui.placeholder = r;
        break;
      case "invalid":
        this.ui.input.ariaInvalid = r !== null ? "" : null;
        break;
      case "nosubmit":
        this.ui.nosubmit = r !== null;
        break;
      case "storagekey":
        this.ui.storagekey = r;
        break;
    }
  }
};
qt = new WeakSet(), $i = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;

                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                input {
                    display: block;

                    width: 100%;

                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);

                    accent-color: var(--ui-primary);
                    background-color: transparent;

                    outline: none;
                    border: none;
                    border-radius: inherit;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                }

                :host(:not([nosubmit])) input {
                    width: calc(100% - 2rem);
                }

                .container {
                    position: relative;
                    width: 100%;

                    border: none;
                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    transition: border-color 0.25s linear;
                }

                .container:has(input:focus) {
                    border-color: var(--ui-primary);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }

                ui-icon-button {
                    position: absolute;
                    top: 0;
                    right: 0;
                    height: 100%;

                    border-top-left-radius: 0;
                    border-bottom-left-radius: 0;
                }
            </style>

            <div class="container has-backdrop-blur">
                <slot name="title"></slot>
                <input type="search" />
                <ui-icon-button name="submit" ghost
                    >${ri}</ui-icon-button
                >
            </div>
        `, this.ui.submit = this.shadowRoot.querySelector('[name="submit"]'), this.ui.input = this.shadowRoot.querySelector("input"), this.ui.input.type = "search", this.ui.input.addEventListener("keydown", async (i) => {
    this.ui.nosubmit || i.key === "Enter" && this.ui.submit.click();
  });
  let t = null;
  this.ui.input.addEventListener("input", async () => {
    this.ui.storage && (t !== null && clearTimeout(t), t = setTimeout(() => {
      localStorage.setItem(
        this.ui.storageprefix + this.ui.storagekey,
        this.ui.input.value
      ), t = null;
    }, 250)), this.ui.events.dispatch("input", this.ui.input.value);
  }), this.shadowRoot.querySelector("ui-icon-button").addEventListener("click", () => {
    this.ui.events.dispatch("submit", this.ui.input.value);
  });
}, a(K, "register", () => {
  customElements.get("ui-search") || (console.debug('[ui] Register "ui-search" component'), customElements.define("ui-search", K));
}), a(K, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "nosubmit",
  "storagekey"
]);
let Ae = K;
Ae.register();
var Dt, Mi;
const Nt = class Nt extends HTMLElement {
  constructor() {
    super();
    p(this, Dt);
    this.ui = {
      root: this,
      get value() {
        return this.root.getAttribute("value");
      },
      set value(t) {
        if (!t) {
          this.root.removeAttribute("value");
          return;
        }
        this.root.setAttribute("value", t);
      },
      get selected() {
        return this.root.hasAttribute("selected");
      },
      set selected(t) {
        if (!t) {
          this.root.removeAttribute("selected");
          return;
        }
        this.root.setAttribute("selected", "");
      }
    }, g(this, Dt, Mi).call(this);
  }
  connectedCallback() {
    this.setAttribute("role", "button");
  }
  disconnectedCallback() {
  }
};
Dt = new WeakSet(), Mi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                :host {
                    display: none;
                    align-items: center;

                    padding: var(--ui-spacing);
                    padding-right: 2.5rem;

                    height: calc(
                        1em * var(--ui-lineHeight) + var(--ui-spacing) * 2
                    );

                    white-space: nowrap;
                    text-overflow: ellipsis;

                    overflow: hidden;

                    transition:
                        background-color 0.25s linear,
                        color 0.25s linear;
                }
            </style>

            <slot></slot>
        `;
}, a(Nt, "register", () => {
  customElements.get("ui-select-option") || (console.debug('[ui] Register "ui-select-option" component'), customElements.define("ui-select-option", Nt));
});
let ct = Nt;
ct.register();
var E, Ft, Ei;
const Q = class Q extends HTMLElement {
  constructor() {
    super();
    p(this, Ft);
    p(this, E, !1);
    this.open = !1, this.ui = {
      root: this,
      /**
       *  @type {Events<UISelect_Events>}
       */
      events: new w(),
      get open() {
        return this.root.open || dt(this.root, E);
      },
      set open(t) {
        this.keepOpen && (t = dt(this.root, E)), this.root.open = t, t ? this.root.setAttribute("open", "") : this.root.removeAttribute("open"), this.root.style.setProperty(
          "--items-length",
          `${this.root.children.length || 1}`
        );
      },
      get keepOpen() {
        return dt(this.root, E);
      },
      set keepOpen(t) {
        De(this.root, E, !!t), this.open = this.open;
      },
      /**
       * @returns {UISelectOption[]}
       */
      options() {
        return [...this.root.children].filter(
          (t) => t instanceof ct
        );
      },
      /**
       * @returns {UISelectOption | null}
       */
      selected() {
        try {
          return this.options().find(
            (t) => t.ui.selected
          ) || null;
        } catch {
          return null;
        }
      }
    }, g(this, Ft, Ei).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} n
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "open":
        const s = r !== null;
        s !== this.ui.open && (this.ui.open = s);
        break;
      case "keep-open":
        this.ui.keepOpen = !0;
        break;
    }
  }
};
E = new WeakMap(), Ft = new WeakSet(), Ei = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    --ui-bg: "transparent";

                    position: relative !important;
                    display: block !important;

                    width: 100%;
                    height: calc(
                        1em * var(--ui-lineHeight) + var(--ui-spacing) * 2
                    );
                    transition: height 0.25s ease;

                    background-color: var(--ui-bg);
                    color: var(--ui-fg);

                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);

                    line-height: 1.15;

                    overflow: hidden;

                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-select-fontVariation);
                }

                .options {
                    cursor: pointer;
                    display: none;
                    display: flex;
                    flex-direction: column;
                    min-height: 100%;
                }

                .icon {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 2.5rem;
                    height: 100%;
                    color: var(--ui-primary);
                }

                ::slotted(ui-select-option) {
                    display: flex;
                }

                :host([open]) {
                    height: calc(
                        (1em * var(--ui-lineHeight) + var(--ui-spacing) * 2) *
                            var(--items-length)
                    );
                }

                :host([open]) .options {
                    display: block;
                }

                :host([open]) .icon {
                    display: none;
                }

                :host([open]) ::slotted(ui-select-option[selected]) {
                    background-color: var(--ui-primary);
                    color: var(--ui-primary-fg);
                }

                :host([open])
                    ::slotted(ui-select-option:not([selected]):hover) {
                    background-color: hsla(var(--ui-fg--hsl), 0.1);
                }

                :host(:not([open]))
                    .options:has(> ::slotted(ui-select-option[selected])) {
                    display: block;
                }

                :host(:not([open]))
                    ::slotted(ui-select-option:not([selected])) {
                    display: none;
                }
            </style>

            <div class="options">
                <div class="icon"><ui-svg>${Oe}</ui-svg></div>

                <slot></slot>
            </div>
        `;
  const t = async (s) => {
    (s.composedPath() || []).forEach((n) => {
      n instanceof ct && ([...this.querySelectorAll("ui-select-option")].forEach(
        (c) => c.removeAttribute("selected")
      ), n.setAttribute("selected", ""), this.ui.events.dispatch("change", n));
    });
  }, i = async (s) => {
    if (this.ui.keepOpen) {
      await t(s);
      return;
    }
    this.ui.open = !this.ui.open, this.ui.open ? (s.stopPropagation(), this.addEventListener("click", t)) : setTimeout(
      () => this.removeEventListener("click", t)
    );
  };
  this.shadowRoot.querySelector(".options").addEventListener("click", i);
}, a(Q, "register", () => {
  customElements.get("ui-select") || (console.debug('[ui] Register "ui-select" component'), customElements.define("ui-select", Q));
}), a(Q, "observedAttributes", ["open", "keep-open"]);
let $e = Q;
$e.register();
var Ut, Ri;
const I = class I extends HTMLElement {
  constructor() {
    super();
    p(this, Ut);
    this.ui = {
      root: this,
      /** @type {Events<E>} */
      events: new w(),
      /** @type {HTMLTextAreaElement | null} */
      textarea: null,
      get title() {
        return this.root.getAttribute("title");
      },
      set title(t) {
        let i = this.root.querySelector('[slot="title"]');
        !t && i && this.root.removeChild(i), t && (i || (i = new lt(), i.slot = "title", this.root.appendChild(i)), i.innerHTML = t);
      },
      get value() {
        return this.textarea.value;
      },
      set value(t) {
        this.textarea.value = t;
      },
      get placeholder() {
        return this.textarea.placeholder;
      },
      set placeholder(t) {
        this.textarea.placeholder = t || "";
      },
      get invalid() {
        return this.root.hasAttribute("invalid");
      },
      set invalid(t) {
        if (!t) {
          this.root.removeAttribute("invalid");
          return;
        }
        this.root.setAttribute("invalid", "");
      },
      get rows() {
        return this.textarea.rows;
      },
      set rows(t) {
        this.textarea.rows = t;
      },
      get cols() {
        return this.textarea.cols;
      },
      set cols(t) {
        this.textarea.cols = t;
      },
      /**
       * @param {FocusOptions | null} [options]
       */
      focus(t = null) {
        this.root.shadowRoot.querySelector("textarea").focus(t);
      },
      blur() {
        this.root.shadowRoot.querySelector("textarea").blur();
      }
    }, g(this, Ut, Ri).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "title":
        this.ui.title = r;
        break;
      case "value":
        this.ui.value = r;
        break;
      case "placeholder":
        this.ui.placeholder = r;
        break;
      case "invalid":
        this.ui.textarea.ariaInvalid = r !== null ? "" : null;
        break;
      case "rows":
        this.ui.rows = r !== null ? parseFloat(r) : null;
        break;
      case "cols":
        this.ui.cols = r !== null ? parseFloat(r) : null;
        break;
    }
  }
};
Ut = new WeakSet(), Ri = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                * {
                    box-sizing: border-box;
                }

                :host {
                    display: block;
                    position: relative;
                    width: 100%;
                    height: fit-content;
                }

                textarea {
                    resize: none;
                    width: 100%;
                    display: block;
                    margin: 0;
                    padding: var(--ui-spacing) calc(var(--ui-spacing) * 2);
                    border: none !important;
                    border-radius: inherit;
                    outline: none !important;
                    font-size: 0.9rem;
                    font-family: var(--ui-fontFamily);
                    font-variation-settings: var(--ui-input-fontVariation);
                    accent-color: var(--ui-primary);
                    background-color: transparent !important;
                }

                .container {
                    width: 100%;
                    height: 100%;
                    border: none;
                    border: 1px solid var(--ui-borderColor);
                    border-radius: var(--ui-radius);
                    transition: border-color 0.25s linear;
                }

                .container:has(textarea:focus) {
                    border-color: var(--ui-primary);
                }

                :host([invalid]) .container {
                    border-color: var(--ui-destructive);
                }

                ::slotted([slot="title"]) {
                    display: block;
                    padding: 0 var(--ui-spacing);
                    user-select: none;
                    transform: translateY(calc(var(--ui-spacing) / 2));
                }
            </style>

            <div class="container">
                <slot name="title"></slot>
                <textarea></textarea>
            </div>
        `, this.ui.textarea = this.shadowRoot.querySelector("textarea"), this.ui.textarea.oninput = () => {
    this.ui.events.dispatch("input", this.ui.textarea.value);
  }, this.ui.textarea.onchange = () => {
    this.ui.events.dispatch("change", this.ui.textarea.value);
  };
}, a(I, "register", () => {
  customElements.get("ui-textarea") || (console.debug('[ui] Register "ui-textarea" component'), customElements.define("ui-textarea", I));
}), a(I, "observedAttributes", [
  "title",
  "value",
  "placeholder",
  "invalid",
  "rows",
  "cols"
]);
let Me = I;
Me.register();
const tt = class tt extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      /**
       * @type {{
       *  [key: string]: {
       *      [key: string]: string;
       *  };
       * }}
       */
      data: {},
      /**
       * @type {Events<{ "change": import(".").UILangType}>}
       */
      events: new w(),
      get current() {
        return this.root.getAttribute("current");
      },
      set current(e) {
        this.root.setCurrent(e || "");
      },
      /** @returns {import(".").UILangType} */
      fallback() {
        return this.root.querySelector("ui-lang-type[fallback]");
      },
      /**
       * @param {string} group
       * @param {string} key
       */
      get(e, t) {
        var i, r;
        return ((r = (i = this.data) == null ? void 0 : i[e]) == null ? void 0 : r[t]) || null;
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(e, t, i) {
    switch (e) {
      case "current":
        this.ui.current = i;
        break;
    }
  }
  /**
   * @private
   * @param {string} name
   */
  async setCurrent(e) {
    const t = this.querySelector(`ui-lang-type[name="${e}"]`) || this.ui.fallback();
    if (t) {
      if (!t.ui.href) throw "Missing href attribute!";
      try {
        this.ui.data = await (await fetch(t.ui.href)).json();
      } catch (i) {
        console.error(i);
      }
      this.ui.events.dispatch("change", t);
    }
  }
};
a(tt, "register", () => {
  customElements.get("ui-lang") || (console.debug('[ui] Register "ui-lang" component'), customElements.define("ui-lang", tt));
}), a(tt, "observedAttributes", ["current"]);
let Ee = tt;
Ee.register();
const Yt = class Yt extends HTMLElement {
  constructor() {
    super(), this.ui = {
      root: this,
      get name() {
        return this.root.getAttribute("name");
      },
      set name(e) {
        if (!e) {
          this.root.removeAttribute("name");
          return;
        }
        this.root.setAttribute("name", e);
      },
      get href() {
        return this.root.getAttribute("href");
      },
      set href(e) {
        if (!e) {
          this.root.removeAttribute("href");
          return;
        }
        this.root.setAttribute("href", e);
      },
      get fallback() {
        return this.root.hasAttribute("fallback");
      },
      set fallback(e) {
        if (!e) {
          this.root.removeAttribute("fallback");
          return;
        }
        this.root.setAttribute("fallback", "");
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
a(Yt, "register", () => {
  customElements.get("ui-lang-type") || (console.debug('[ui] Register "ui-lang-type" component'), customElements.define("ui-lang-type", Yt));
});
let Re = Yt;
Re.register();
var Wt, Hi;
const et = class et extends HTMLElement {
  constructor() {
    super();
    p(this, Wt);
    this.ui = {
      root: this,
      get nobg() {
        return this.root.hasAttribute("nobg");
      },
      set nobg(t) {
        const i = this.root.shadowRoot.querySelector(".background");
        if (!t) {
          i.style.display = null;
          return;
        }
        i.style.display = "none";
      }
    }, g(this, Wt, Hi).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} name
   * @param {string | null} _oldValue
   * @param {string | null} newValue
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "nobg":
        this.ui.nobg = r !== null;
        break;
    }
  }
};
Wt = new WeakSet(), Hi = function() {
  this.attachShadow({ mode: "open" }), m(this.shadowRoot), this.shadowRoot.innerHTML = l`
            <style>
                :host {
                    position: absolute !important;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                }

                .background {
                    z-index: 999;
                    position: absolute !important;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                }

                .spinner {
                    content: "";
                    box-sizing: border-box;

                    z-index: 1000;
                    position: absolute !important;
                    top: 50%;
                    left: 50%;
                    width: 2.5rem;
                    height: 2.5rem;

                    margin-top: -1.25rem;
                    margin-left: -1.25rem;

                    border: 2px solid var(--ui-borderColor);
                    border-top-color: var(--ui-primary);
                    border-radius: 50%;

                    animation: spinner 0.6s linear infinite;
                }

                @keyframes spinner {
                    to {
                        transform: rotate(360deg);
                    }
                }
            </style>

            <div class="background has-backdrop-blur"></div>
            <div class="spinner"></div>
        `;
}, a(et, "register", () => {
  customElements.get("ui-spinner") || (console.debug('[ui] Register "ui-spinner" component'), customElements.define("ui-spinner", et));
}), a(et, "observedAttributes", ["nobg"]);
let He = et;
He.register();
var Jt, Ti;
const Xt = class Xt extends HTMLElement {
  constructor() {
    super();
    p(this, Jt);
    this.pages = {}, this.stack = [], this.onpopstate = () => this.goBack(), this.ui = {
      root: this,
      /**
       * @type {Events<{
       *  "change": {
       *      oldPage: UIStackLayoutPage | null,
       *      newPage: UIStackLayoutPage | null
       *  }
       * }>}
       */
      events: new w(),
      lock: !1,
      size() {
        return this.root.stack.length;
      },
      clear() {
        for (; this.size() > 0; )
          this.root.removeChild(this.root.stack.pop());
      },
      goBack() {
        if (!(!this.size() || this.lock)) {
          if (this.root.onpopstate !== null) {
            history.back();
            return;
          }
          this.root.goBack();
        }
      },
      /**
       * @param {T} pageName
       * @param {(() => UIStackLayoutPage|Promise<UIStackLayoutPage>)} cb
       */
      register(t, i) {
        this.root.pages[t] = i;
      },
      /**
       * @param {T} pageName
       */
      unregister(t) {
        delete this.root.pages[t];
      },
      /**
       * @param {T} pageName
       * @param {((page: UIStackLayoutPage) => void|Promise<void>) | null} [cb]
       * @param {boolean} [keepOldPage]
       */
      async set(t, i = null, r = !1) {
        if (this.lock) return;
        const s = await this.root.pages[t]();
        this.root.stack.push(this.root.appendChild(s)), typeof i == "function" && i(s);
        let n = null;
        this.size() > 1 && !r && (n = this.root.stack[this.root.stack.length - 2], n.parentElement.removeChild(n)), this.root.dispatchChangeEvent(n), this.root.onpopstate !== null && history.pushState(null, document.title, location.href);
      }
    }, g(this, Jt, Ti).call(this);
  }
  connectedCallback() {
    window.addEventListener("popstate", this.onpopstate);
  }
  disconnectedCallback() {
    window.removeEventListener("popstate", this.onpopstate);
  }
  goBack() {
    if (this.ui.size() === 0) {
      this.dispatchChangeEvent(null);
      return;
    }
    const t = this.removeChild(this.stack.pop());
    this.stack.length > 0 && (this.stack[this.stack.length - 1].parentElement || this.appendChild(this.stack[this.stack.length - 1])), this.dispatchChangeEvent(t);
  }
  /**
   * @param {UIStackLayoutPage} oldChild
   */
  async dispatchChangeEvent(t) {
    this.ui.events.dispatch("change", {
      newPage: this.stack[this.stack.length - 1] || null,
      oldPage: t || this.stack[this.stack.length - 2] || null
    });
  }
};
Jt = new WeakSet(), Ti = function() {
  this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = l`
            <style>
                :host {
                    display: block !important;
                    position: relative !important;
                    width: 100%;
                    height: 100%;
                }
            </style>

            <slot></slot>
        `;
}, a(Xt, "register", () => {
  customElements.get("ui-stack-layout") || (console.debug('[ui] Register "ui-stack-layout" component'), customElements.define("ui-stack-layout", Xt));
});
let Te = Xt;
Te.register();
var Kt, ji;
const it = class it extends HTMLElement {
  /**
   * @param {string} name
   */
  constructor(t) {
    super();
    p(this, Kt);
    this._name = t, this.ui = {
      root: this,
      get name() {
        return this.root._name;
      },
      set name(i) {
        this.name = i || "";
      }
    }, g(this, Kt, ji).call(this);
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
  /**
   * @param {string} n
   * @param {string | null} _oV
   * @param {string | null} nV
   */
  attributeChangedCallback(t, i, r) {
    switch (t) {
      case "name":
        this.ui.name = r;
        break;
    }
  }
};
Kt = new WeakSet(), ji = function() {
  this.attachShadow({ mode: "open" }), this.shadowRoot.innerHTML = l`
            <style>
                :host {
                    display: block !important;
                    position: absolute !important;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    opacity: 0;
                    animation: fade-in 0.5s;
                    transition: opacity 0.5s ease;
                }

                :host(:last-child) {
                    opacity: 1;
                }

                @keyframes fade-in {
                    0% {
                        opacity: 0;
                    }
                    100% {
                        opacity: 1;
                    }
                }
            </style>

            <slot></slot>
        `;
}, a(it, "register", () => {
  customElements.get("ui-stack-layout-page") || (console.debug('[ui] Register "ui-stack-layout-page" component'), customElements.define("ui-stack-layout-page", it));
}), a(it, "observedAttributes", ["name"]);
let je = it;
je.register();
const Qt = class Qt extends HTMLElement {
  constructor() {
    super(), this.stores = {}, this.ui = {
      root: this,
      /**
       * @type {Events<T>}
       */
      events: new w(),
      get storage() {
        return this.root.hasAttribute("storage");
      },
      set storage(e) {
        if (!e) {
          this.root.removeAttribute("storage");
          return;
        }
        this.root.setAttribute("storage", "");
      },
      get storageprefix() {
        return this.root.getAttribute("storageprefix");
      },
      set storageprefix(e) {
        if (!e) {
          this.root.removeAttribute("storageprefix");
          return;
        }
        this.root.setAttribute("storageprefix", e);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @returns {T[K]}
       */
      get(e) {
        if (this.storage) {
          const t = localStorage.getItem(
            (this.storageprefix || "") + e.toString()
          );
          if (t !== null)
            return JSON.parse(t);
        }
        return this.root.stores[e];
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {T[K]} data
       * @param {boolean} [useDataAsFallback] Use data as fallback, if nothing found in the browsers `localStorage`
       * `this.enableLocalStorage` flag needs to be set to `true` for this to work
       */
      set(e, t, i = !1) {
        if (i && this.storage) {
          const r = JSON.parse(
            localStorage.getItem(
              (this.storageprefix || "") + e.toString()
            ) || "null"
          );
          this.root.stores[e] = r ?? t;
        } else
          this.root.stores[e] = t;
        this.storage && localStorage.setItem(
          (this.storageprefix || "") + e.toString(),
          JSON.stringify(this.root.stores[e])
        ), this.events.dispatch(e, this.root.stores[e]);
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => any} callback
       */
      update(e, t) {
        if (typeof t != "function")
          throw "callback is not a function";
        let i = null;
        if (this.storage) {
          const r = localStorage.getItem(
            (this.storageprefix || "") + e.toString()
          );
          r !== null && (i = JSON.parse(r));
        }
        i === null && (i = this.root.stores[e]), this.set(e, t(i));
      },
      /**
       * @template {keyof T} K
       * @param {K} key
       * @param {(data: T[K]) => void|Promise<void>} callback
       * @param {boolean} [trigger] - this will run the callback first
       * @returns {() => void} clean up function
       */
      on(e, t, i = !1) {
        if (typeof t != "function")
          throw "callback is not a function";
        return i && t(this.get(e)), this.events.on(e, t);
      }
    };
  }
  connectedCallback() {
  }
  disconnectedCallback() {
  }
};
a(Qt, "register", () => {
  customElements.get("ui-store") || (console.debug('[ui] Register "ui-store" component'), customElements.define("ui-store", Qt));
});
let Ve = Qt;
Ve.register();
var Vr = Object.defineProperty, Or = Object.getOwnPropertyDescriptor, te = (o, e, t, i) => {
  for (var r = i > 1 ? void 0 : i ? Or(e, t) : e, s = o.length - 1, n; s >= 0; s--)
    (n = o[s]) && (r = (i ? n(e, t, r) : n(r)) || r);
  return i && r && Vr(e, t, r), r;
};
const ti = "gruvbox";
let ut = class extends j {
  constructor() {
    super(...arguments);
    a(this, "media", null);
    a(this, "auto", !1);
    a(this, "mode", null);
    a(this, "theme", ti);
  }
  get target() {
    return document.body;
  }
  get mediaHandler() {
    return (e) => {
      e.matches ? this.target.setAttribute("data-theme", "dark") : this.target.setAttribute("data-theme", "light");
    };
  }
  attributeChangedCallback(e, t, i) {
    switch (super.attributeChangedCallback(e, t, i), e) {
      case "auto":
        this.handleAuto();
        break;
      case "mode":
        this.handleMode();
        break;
      case "theme":
        this.handleTheme();
        break;
    }
  }
  handleAuto() {
    if (!this.auto) {
      if (!this.media) return;
      this.media.removeEventListener("change", this.mediaHandler), this.media = null;
      return;
    }
    if (this.mode = null, this.media) {
      this.mediaHandler(this.media);
      return;
    }
    this.media = window.matchMedia("(prefers-color-scheme: dark)"), this.media.addEventListener("change", this.mediaHandler), this.mediaHandler(this.media);
  }
  handleMode() {
    this.mode ? this.target.setAttribute("data-theme", this.mode) : this.target.removeAttribute("data-theme");
  }
  handleTheme() {
    const e = document.head, t = "/themes";
    e.querySelectorAll("link.theme").forEach((r) => {
      e.removeChild(r);
    });
    const i = document.createElement("link");
    i.classList.add("theme"), i.rel = "stylesheet", i.href = `${t}/${this.theme || ti}.css`, e.appendChild(i);
  }
};
te([
  S()
], ut.prototype, "auto", 2);
te([
  S()
], ut.prototype, "mode", 2);
te([
  S()
], ut.prototype, "theme", 2);
ut = te([
  Ge("ui-theme-handler")
], ut);
export {
  Br as CleanUp,
  w as Events,
  pe as UIAlert,
  ue as UIAlerts,
  ge as UIAppBar,
  fe as UIAppBarItem,
  me as UIButton,
  xe as UICheck,
  ve as UIContainer,
  ye as UIDialog,
  we as UIDrawer,
  ke as UIDrawerGroup,
  Ce as UIDrawerGroupItem,
  de as UIFlexGrid,
  ot as UIFlexGridItem,
  he as UIFlexGridRow,
  be as UIIconButton,
  _e as UIInput,
  Le as UILabel,
  Ee as UILang,
  Re as UILangType,
  Se as UIPrimary,
  Ae as UISearch,
  lt as UISecondary,
  $e as UISelect,
  ct as UISelectOption,
  He as UISpinner,
  Te as UIStackLayout,
  je as UIStackLayoutPage,
  Ve as UIStore,
  k as UIText,
  Me as UITextarea,
  ut as UIThemeHandler,
  rt as css,
  Gr as draggable,
  ir as globalStyleSheets,
  m as globalStylesToShadowRoot,
  l as html,
  Dr as isAndroid,
  qr as ripple,
  Nr as styles,
  zr as svg
};
