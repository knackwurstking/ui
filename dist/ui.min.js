class E {
  constructor() {
    this.listeners = {};
  }
  addListener(e, t) {
    return this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t), () => this.removeListener(e, t);
  }
  removeListener(e, t) {
    this.listeners[e] && (this.listeners[e] = this.listeners[e].filter((s) => s !== t));
  }
  dispatch(e, t) {
    this.listeners[e] && this.listeners[e].forEach((s) => s(t));
  }
}
class C {
  constructor(e) {
    this.prefix = "", this.events = new E(), this.data = {}, this.prefix = e;
  }
  delete(e, t) {
    t != null && t.skipStore || localStorage.removeItem(`${this.prefix}${e}`), delete this.data[e];
  }
  get(e, t) {
    if (!(t != null && t.skipStore)) {
      const s = localStorage.getItem(`${this.prefix}${e}`);
      if (s !== null) return JSON.parse(s);
    }
    if (this.data.hasOwnProperty(e))
      return this.data[e];
  }
  set(e, t, s = !1, n) {
    if (s) {
      let i = null;
      n != null && n.skipStore ? i = null : i = localStorage.getItem(`${this.prefix}${e}`), i !== null ? this.data[e] = JSON.parse(i) : this.data.hasOwnProperty(e) || (this.data[e] = t);
    } else
      this.data[e] = t;
    n != null && n.skipStore || localStorage.setItem(
      `${this.prefix}${e}`,
      JSON.stringify(this.data[e])
    ), this.events.dispatch(e, this.data[e]);
  }
  update(e, t, s) {
    const n = this.get(e, s);
    if (n === void 0)
      throw new Error(`"${e}" not found, use \`set\``);
    this.set(e, t(n), !1, s);
  }
  listen(e, t, s = !1, n) {
    if (s) {
      const i = this.get(e, n);
      i !== void 0 && setTimeout(() => t(i));
    }
    return this.events.addListener(e, t);
  }
}
class _ {
  constructor(e) {
    this.url = "", this.socket = null, this.events = new E(), this.reconnectInterval = 1e3, this.timeout = null, this.open = !1, this.onClose = () => {
      this.timeout !== null && (clearTimeout(this.timeout), this.timeout = null), this.open && (this.open = !1, this.events.dispatch("close", this)), this.timeout = setTimeout(async () => {
        await this.connect();
      }, this.reconnectInterval);
    }, this.onOpen = () => {
      this.open || (this.open = !0, this.events.dispatch("open", this));
    }, this.onMessage = async (t) => {
      const s = JSON.parse(await t.data.text());
      this.events.dispatch("message", s);
    }, this.url = e;
  }
  isOpen() {
    return this.open;
  }
  async connect() {
    this.socket && this.close(), this.socket = new WebSocket(this.url), this.socket.addEventListener("close", this.onClose), this.socket.addEventListener("open", this.onOpen), this.socket.addEventListener("message", this.onMessage);
  }
  close() {
    this.timeout && (clearTimeout(this.timeout), this.timeout = null), this.socket && (this.socket.removeEventListener("close", this.onClose), this.isOpen() && this.socket.close(), this.socket = null);
  }
}
const b = {
  onDragStart: null,
  onDragging: null,
  onDragEnd: null
};
function S(r, e, t) {
  t = { ...b, ...t };
  const s = [...r.children].indexOf(e);
  return e.draggable = !0, e.ondragstart = (n) => {
    n.dataTransfer && (n.dataTransfer.effectAllowed = "move", n.dataTransfer.dropEffect = "move"), r.classList.add("ui-dragging"), t.onDragStart && t.onDragStart(s);
  }, e.ondragover = (n) => (n.preventDefault(), !1), e.ondragenter = (n) => {
    n.preventDefault(), [...r.children].forEach((i, o) => {
      if (o === s) {
        i.style.background = "var(--ui-primary)", i.style.color = "var(--ui-primary-text)";
        return;
      }
      i.style.background = "inherit", i.style.color = "inherit";
    }), t.onDragging && t.onDragging(s);
  }, e.ondrop = (n) => {
    n.preventDefault(), n.dataTransfer && (n.dataTransfer.dropEffect = "move"), r.classList.remove("ui-dragging"), t.onDragEnd && t.onDragEnd(s), [...r.children].forEach((i) => {
      i.style.background = "inherit", i.style.color = "inherit";
    });
  }, () => {
    e.draggable = !1, e.ondragstart = null, e.ondragover = null, e.ondragenter = null, e.ondrop = null;
  };
}
const L = {
  onDragStart: null,
  onDragEnd: null
};
function w(r, e) {
  e = { ...L, ...e };
  let t = null, s = null, n = null, i = !1, o = "", c = "";
  const v = (l) => {
    const u = l.currentTarget;
    !t && Array.from(u.classList).includes("draggable") && (s = (/* @__PURE__ */ new Date()).getTime(), t = u, n && clearTimeout(n), n = setTimeout(() => {
      t && (o = t.style.color, c = t.style.backgroundColor, t.style.color = "var(--ui-primary-text)", t.style.backgroundColor = "var(--ui-primary)", r.classList.add("ui-dragging"), i = !0, e != null && e.onDragStart && e.onDragStart());
    }, 200));
  }, p = (l) => {
    if (!s || !t) return;
    if (!i && (/* @__PURE__ */ new Date()).getTime() - s < 200) {
      f();
      return;
    }
    l.preventDefault(), i || (i = !0, e != null && e.onDragStart && e.onDragStart());
    let u;
    if (window.TouchEvent && l instanceof TouchEvent) {
      const h = l.targetTouches[0];
      u = {
        clientX: h.clientX,
        clientY: h.clientY
      };
    } else
      u = {
        // @ts-ignore
        clientX: l.clientX,
        // @ts-ignore
        clientY: l.clientY
      };
    let a = document.elementFromPoint(u.clientX, u.clientY);
    if (a) {
      for (; !a.classList.contains("draggable") && a.parentElement; )
        a = a.parentElement;
      a.classList.contains("draggable") && ((() => {
        let d = t == null ? void 0 : t.previousElementSibling;
        for (; d; ) {
          if (d === a)
            return !0;
          d = d.previousElementSibling;
        }
        return !1;
      })() ? r.insertBefore(t, a) : r.insertBefore(
        t,
        a.nextElementSibling
      ));
    }
  }, f = () => {
    n !== null && (clearTimeout(n), n = null), t && (t.style.color = o, t.style.backgroundColor = c, t = null), s = null, r.classList.remove("ui-dragging"), i && (i = !1, e != null && e.onDragEnd && e.onDragEnd());
  };
  return [...r.children].forEach((l) => {
    l.classList.add("draggable"), l.onmousedown = v, l.ontouchstart = v, l.onmousemove = p, l.ontouchmove = p, r.onmouseleave = l.onmouseup = f, l.ontouchend = f;
  }), () => {
    [...r.children].forEach(
      (l) => {
        l.classList.remove("draggable"), l.onmousedown = null, l.ontouchstart = null, l.onmousemove = null, l.ontouchmove = null, r.onmouseleave = l.onmouseup = null, l.ontouchend = null;
      }
    );
  };
}
const P = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createMobile: w,
  createNative: S
}, Symbol.toStringTag, { value: "Module" })), y = {
  color: "var(--ui-ripple-color, currentColor)",
  opacity: "var(--ui-ripple-opacity, 0.2)",
  centered: !1,
  spreadDuration: ".4s",
  spreadTiming: "linear",
  clearDuration: "1s",
  clearTiming: "ease-in-out",
  usePointer: !1
};
function $(r, e) {
  e = { ...y, ...e || {} };
  let t = null;
  const s = (c) => {
    t = g(c, e), r.addEventListener("pointermove", i);
  }, n = () => {
    r.removeEventListener("pointermove", i), m(t), t = null;
  }, i = () => n(), o = (c) => {
    t = g(c, e), m(t), t = null;
  };
  return r.classList.add("ripple-container"), r.style.overflow = "hidden", e.usePointer ? (r.addEventListener("pointerdown", s), r.addEventListener("pointerup", n), r.addEventListener("pointerleave", n)) : r.addEventListener("click", o), () => {
    if (r.classList.remove("ripple-container"), e.usePointer) {
      r.removeEventListener("pointerdown", s), r.removeEventListener("pointerup", n), r.removeEventListener("pointerleave", n), r.removeEventListener("pointermove", i);
      return;
    }
    r.removeEventListener("click", o);
  };
}
function g(r, e) {
  const t = document.createElement("div"), s = r.currentTarget;
  s.appendChild(t), t.classList.add("ripple"), t.style.position = "absolute", t.style.color = "inherit", t.style.borderRadius = "50%", t.style.pointerEvents = "none", t.style.width = "100px", t.style.height = "100px", t.style.marginTop = "-50px", t.style.marginLeft = "-50px", t.style.opacity = `${e.opacity}`, t.style.backgroundColor = `${e.color}`, t.style.transform = "scale(0) translate(0, 0)", t.style.transition = `transform ${e.spreadDuration} ${e.spreadTiming} 0s,opacity ${e.clearDuration} ${e.clearTiming} 0s`;
  const n = s.getBoundingClientRect();
  e.centered ? (t.style.top = `${n.height / 2}px`, t.style.left = `${n.width / 2}px`) : (t.style.top = `${r.clientY - n.top}px`, t.style.left = `${r.clientX - n.left}px`);
  const i = Math.max(n.width, n.height) * 0.02;
  return t.style.transform = `scale(${i}) translate(0, 0)`, t;
}
function m(r) {
  r && (r.addEventListener("transitionend", (e) => {
    e.propertyName === "opacity" && r.remove();
  }), r.style.opacity = "0");
}
const j = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  create: $,
  defaultOptions: y,
  start: g,
  stop: m
}, Symbol.toStringTag, { value: "Module" }));
function T(r) {
  let e = null;
  async function t(s) {
    if (e !== null && e.onDestroy && e.onDestroy(), e = s, e.title !== void 0) {
      const n = document.querySelector("head > title");
      n && (n.innerHTML = e.title);
    }
    e.onMount && e.onMount();
  }
  window.addEventListener("hashchange", () => {
    const s = window.location.hash.replace("#", "");
    let n = "";
    for (const i of Object.keys(r))
      s.startsWith(i) && i > n && (n = i);
    if (!n) {
      const i = r["/"];
      if (i === void 0) {
        console.warn(
          `Window location “${s}” is missing in routes, and the fallback route “/“ is also missing.`
        );
        return;
      }
      t(i);
      return;
    }
    t(r[n]);
  }), window.dispatchEvent(new Event("hashchange"));
}
function D(r, e) {
  let t;
  if (r ? t = `?${Object.entries(r).map(
    ([s, n]) => `${encodeURIComponent(s)}=${encodeURIComponent(n)}`
  ).join("&")}` : t = "", !e && !t) {
    location.hash = "";
    return;
  }
  location.hash = `#${encodeURIComponent(e)}` + (t ? `&${t}` : "");
}
function x() {
  const r = {};
  return location.hash.replace(/^#.*\?/, "").split("?").forEach((e) => {
    e.split("&").forEach((t) => {
      const [s, n] = t.split("=");
      r[decodeURIComponent(s)] = decodeURIComponent(n);
    });
  }), r;
}
const O = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  getSearchParam: x,
  goTo: D,
  init: T
}, Symbol.toStringTag, { value: "Module" })), M = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hash: O
}, Symbol.toStringTag, { value: "Module" }));
function I() {
  return /(android)/i.test(navigator.userAgent);
}
function k(r) {
  return Object.entries(r).map(
    ([e, t]) => `${e.replace(/[A-Z]/g, (s) => `-${s.toLowerCase()}`)}:${t}`
  ).join(";") + ";";
}
export {
  E as Events,
  C as Store,
  _ as WS,
  P as draggable,
  I as isAndroid,
  j as ripple,
  M as router,
  k as styles
};
